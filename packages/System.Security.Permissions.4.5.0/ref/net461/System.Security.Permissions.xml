<?xml version="1.0" encoding="utf-8"?><doc>
  <assembly>
    <name>System.Security.Permissions</name>
  </assembly>
  <members>
    <member name="T:System.Data.SqlClient.SqlClientPermission">
      <summary>Enables the .NET Framework Data Provider for SQL Server to help make sure that a user has a security level sufficient to access a data source.</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlClientPermission"></see> class.</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlClientPermission"></see> class.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlClientPermission"></see> class.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <param name="allowBlankPassword">Indicates whether a blank password is allowed.</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>Adds a new connection string and a set of restricted keywords to the <see cref="T:System.Data.SqlClient.SqlClientPermission"></see> object.</summary>
      <param name="connectionString">The connection string.</param>
      <param name="restrictions">The key restrictions.</param>
      <param name="behavior">One of the <see cref="T:System.Data.KeyRestrictionBehavior"></see> enumerations.</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.Copy">
      <summary>Returns the <see cref="T:System.Data.SqlClient.SqlClientPermission"></see> as an <see cref="T:System.Security.IPermission"></see>.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientPermissionAttribute">
      <summary>Associates a security action with a custom security attribute.</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlClientPermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values representing an action that can be performed by using declarative security.</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermissionAttribute.CreatePermission">
      <summary>Returns a <see cref="T:System.Data.SqlClient.SqlClientPermission"></see> object that is configured according to the attribute properties.</summary>
      <returns>A <see cref="System.Data.SqlClient.SqlClientPermission"></see> object.</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermission">
      <summary>Controls code access permissions for event logging.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission"></see> class.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission"></see> class with the specified permission entries.</summary>
      <param name="permissionAccessEntries">An array of  objects that represent permission entries. The <see cref="P:System.Diagnostics.EventLogPermission.PermissionEntries"></see> property is set to this value.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="permissionAccessEntries">permissionAccessEntries</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission"></see> class with the specified permission state.</summary>
      <param name="state">One of the enumeration values that specifies the permission state (full access or no access to resources).</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission"></see> class with the specified access levels and the name of the computer to use.</summary>
      <param name="permissionAccess">One of the enumeration values that specifies an access level.</param>
      <param name="machineName">The name of the computer on which to read or write events.</param>
    </member>
    <member name="P:System.Diagnostics.EventLogPermission.PermissionEntries">
      <summary>Gets the collection of permission entries for this permissions request.</summary>
      <returns>A collection that contains the permission entries for this permissions request.</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAccess">
      <summary>Defines access levels used by <see cref="T:System.Diagnostics.EventLog"></see> permission classes.</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Administer">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can create an event source, read existing logs, delete event sources or logs, respond to entries, clear an event log, listen to events, and access a collection of all event logs.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Audit">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can read existing logs, delete event sources or logs, respond to entries, clear an event log, listen to events, and access a collection of all event logs. Note This member is now obsolete, use <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer"></see> instead.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Browse">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can read existing logs. Note This member is now obsolete, use <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer"></see> instead.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Instrument">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can read or write to existing logs, and create event sources and logs. Note This member is now obsolete, use <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write"></see> instead.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.None">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> has no permissions.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Write">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can write to existing logs, and create event sources and logs.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAttribute">
      <summary>Allows declaritive permission checks for event logging.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.CreatePermission">
      <summary>Creates the permission based on the <see cref="P:System.Diagnostics.EventLogPermissionAttribute.MachineName"></see> property and the requested access levels that are set through the <see cref="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess"></see> property on the attribute.</summary>
      <returns>An <see cref="System.Security.IPermission"></see> that represents the created permission.</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.MachineName">
      <summary>Gets or sets the name of the computer on which events might be read.</summary>
      <returns>The name of the computer on which events might be read. The default is &amp;quot;.&amp;quot;.</returns>
      <exception cref="T:System.ArgumentException">The computer name is invalid.</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess">
      <summary>Gets or sets the access levels used in the permissions request.</summary>
      <returns>A bitwise combination of the <see cref="System.Diagnostics.EventLogPermissionAccess"></see> values. The default is <see cref="System.Diagnostics.EventLogPermissionAccess.Write"></see>.</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntry">
      <summary>Defines the smallest unit of a code access security permission that is set for an <see cref="T:System.Diagnostics.EventLog"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntry.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> class.</summary>
      <param name="permissionAccess">A bitwise combination of the <see cref="T:System.Diagnostics.EventLogPermissionAccess"></see> values. The <see cref="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess"></see> property is set to this value.</param>
      <param name="machineName">The name of the computer on which to read or write events. The <see cref="P:System.Diagnostics.EventLogPermissionEntry.MachineName"></see> property is set to this value.</param>
      <exception cref="T:System.ArgumentException">The computer name is invalid.</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.MachineName">
      <summary>Gets the name of the computer on which to read or write events.</summary>
      <returns>The name of the computer on which to read or write events.</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess">
      <summary>Gets the permission access levels used in the permissions request.</summary>
      <returns>A bitwise combination of the <see cref="System.Diagnostics.EventLogPermissionAccess"></see> values.</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntryCollection">
      <summary>Contains a strongly typed collection of <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> objects.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Add(System.Diagnostics.EventLogPermissionEntry)">
      <summary>Adds a specified <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> to this collection.</summary>
      <param name="value">The <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> to add.</param>
      <returns>The zero-based index of the added <see cref="System.Diagnostics.EventLogPermissionEntry"></see>.</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>Appends a set of specified permission entries to this collection.</summary>
      <param name="value">An array of type <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> objects that contains the permission entries to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntryCollection)">
      <summary>Appends a set of specified permission entries to this collection.</summary>
      <param name="value">A <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"></see> that contains the permission entries to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Contains(System.Diagnostics.EventLogPermissionEntry)">
      <summary>Determines whether this collection contains a specified <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see>.</summary>
      <param name="value">The <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> to find.</param>
      <returns>true if the specified <see cref="System.Diagnostics.EventLogPermissionEntry"></see> belongs to this collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.CopyTo(System.Diagnostics.EventLogPermissionEntry[],System.Int32)">
      <summary>Copies the permission entries from this collection to an array, starting at a particular index of the array.</summary>
      <param name="array">An array of type <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> that receives this collection&amp;#39;s permission entries.</param>
      <param name="index">The zero-based index at which to begin copying the permission entries.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.IndexOf(System.Diagnostics.EventLogPermissionEntry)">
      <summary>Determines the index of a specified permission entry in this collection.</summary>
      <param name="value">The permission entry to search for.</param>
      <returns>The zero-based index of the specified permission entry, or -1 if the permission entry was not found in the collection.</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.EventLogPermissionEntry)">
      <summary>Inserts a permission entry into this collection at a specified index.</summary>
      <param name="index">The zero-based index of the collection at which to insert the permission entry.</param>
      <param name="value">The permission entry to insert into this collection.</param>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntryCollection.Item(System.Int32)">
      <summary>Gets or sets the object at a specified index.</summary>
      <param name="index">The zero-based index into the collection.</param>
      <returns>The <see cref="System.Diagnostics.EventLogPermissionEntry"></see> that exists at the specified index.</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnClear">
      <summary>Performs additional custom processes after clearing the contents of the collection.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>Performs additional custom processes before a new permission entry is inserted into the collection.</summary>
      <param name="index">The zero-based index at which to insert value.</param>
      <param name="value">The new value of the permission entry at index.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>Performs additional custom processes when removing a new permission entry from the collection.</summary>
      <param name="index">The zero-based index at which value can be found.</param>
      <param name="value">The permission entry to remove from index.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Performs additional custom processes before setting a value in the collection.</summary>
      <param name="index">The zero-based index at which oldValue can be found.</param>
      <param name="oldValue">The value to replace with newValue.</param>
      <param name="newValue">The new value of the permission entry at index.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Remove(System.Diagnostics.EventLogPermissionEntry)">
      <summary>Removes a specified permission entry from this collection.</summary>
      <param name="value">The permission entry to remove.</param>
    </member>
    <member name="T:System.Net.Mail.SmtpAccess">
      <summary>Specifies the level of access allowed to a Simple Mail Transport Protocol (SMTP) server.</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.Connect">
      <summary>Connection to an SMTP host on the default port (port 25).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort">
      <summary>Connection to an SMTP host on any port.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.None">
      <summary>No access to an SMTP host.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mail.SmtpPermission">
      <summary>Controls access to Simple Mail Transport Protocol (SMTP) servers.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpPermission"></see> class with the specified state.</summary>
      <param name="unrestricted">true if the new permission is unrestricted; otherwise, false.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Net.Mail.SmtpAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpPermission"></see> class using the specified access level.</summary>
      <param name="access">One of the <see cref="T:System.Net.Mail.SmtpAccess"></see> values.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpPermission"></see> class using the specified permission state value.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="P:System.Net.Mail.SmtpPermission.Access">
      <summary>Gets the level of access to SMTP servers controlled by the permission.</summary>
      <returns>One of the <see cref="System.Net.Mail.SmtpAccess"></see> values.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.AddPermission(System.Net.Mail.SmtpAccess)">
      <summary>Adds the specified access level value to the permission.</summary>
      <param name="access">One of the <see cref="T:System.Net.Mail.SmtpAccess"></see> values.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>An <see cref="System.Net.Mail.SmtpPermission"></see> that is identical to the current permission.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.FromXml(System.Security.SecurityElement)">
      <summary>Sets the state of the permission using the specified XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to set the state of the current permission.</param>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> does not describe an <see cref="System.Net.Mail.SmtpPermission"></see> object.  
 -or-  
 <paramref name="securityElement">securityElement</paramref> does not contain the required state information to reconstruct the permission.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="securityElement">securityElement</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>An <see cref="System.Net.Mail.SmtpPermission"></see> that represents the intersection of the current permission and the specified permission. Returns null if the intersection is empty or <paramref name="target">target</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not an <see cref="System.Net.Mail.SmtpPermission"></see>.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Returns a value indicating whether the current permission is a subset of the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not an <see cref="System.Net.Mail.SmtpPermission"></see>.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.ToXml">
      <summary>Creates an XML encoding of the state of the permission.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> that contains an XML encoding of the current permission.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> to combine with the current permission.</param>
      <returns>A new <see cref="System.Net.Mail.SmtpPermission"></see> permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not an <see cref="System.Net.Mail.SmtpPermission"></see>.</exception>
    </member>
    <member name="T:System.Net.Mail.SmtpPermissionAttribute">
      <summary>Controls access to Simple Mail Transport Protocol (SMTP) servers.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpPermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values that specifies the permission behavior.</param>
      <exception cref="T:System.ArgumentException"><paramref name="action">action</paramref> is not a valid <see cref="System.Security.Permissions.SecurityAction"></see>.</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpPermissionAttribute.Access">
      <summary>Gets or sets the level of access to SMTP servers controlled by the attribute.</summary>
      <returns>A <see cref="System.String"></see> value. Valid values are &amp;quot;Connect&amp;quot; and &amp;quot;None&amp;quot;.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.CreatePermission">
      <summary>Creates a permission object that can be stored with the <see cref="T:System.Security.Permissions.SecurityAction"></see> in an assembly&amp;#39;s metadata.</summary>
      <returns>An <see cref="System.Net.Mail.SmtpPermission"></see> instance.</returns>
    </member>
    <member name="T:System.Net.NetworkAccess">
      <summary>Specifies network access permissions.</summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Accept">
      <summary>Indicates that the application is allowed to accept connections from the Internet on a local resource. Notice that this is a protection for the local host that uses Accept to grant access to a local resource (address/port). At the time a socket tries to bind to this local resource a permission check is performed to see if an Accept exists on that resource.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkAccess.Connect">
      <summary>Indicates that the application is allowed to connect to specific Internet resources. Notice that, in the case of remote host resource, no check is performed to see that Connect permissions exist. This is because the port of a connecting remote host is unknown and not suitable permissions can be built in advance. It is the application responsibility to check the permissions of the remote host trying to connect to a listening socket.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.HostProtectionException">
      <summary>The exception that is thrown when a denied host resource is detected.</summary>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.HostProtectionException"></see> class with default values.</summary>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.HostProtectionException"></see> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.HostProtectionException"></see> class using the provided serialization information and streaming context.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">Contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.HostProtectionException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="e">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor(System.String,System.Security.Permissions.HostProtectionResource,System.Security.Permissions.HostProtectionResource)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.HostProtectionException"></see> class with a specified error message, the protected host resources, and the host resources that caused the exception to be thrown.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="protectedResources">A bitwise combination of the enumeration values that specify the host resources that are inaccessible to partially trusted code.</param>
      <param name="demandedResources">A bitwise combination of the enumeration values that specify the demanded host resources.</param>
    </member>
    <member name="P:System.Security.HostProtectionException.DemandedResources">
      <summary>Gets or sets the demanded host protection resources that caused the exception to be thrown.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.HostProtectionResource"></see> values identifying the protection resources causing the exception to be thrown. The default is <see cref="System.Security.Permissions.HostProtectionResource.None"></see>.</returns>
    </member>
    <member name="P:System.Security.HostProtectionException.ProtectedResources">
      <summary>Gets or sets the host protection resources that are inaccessible to partially trusted code.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.HostProtectionResource"></see> values identifying the inaccessible host protection categories. The default is <see cref="System.Security.Permissions.HostProtectionResource.None"></see>.</returns>
    </member>
    <member name="M:System.Security.HostProtectionException.ToString">
      <summary>Returns a string representation of the current host protection exception.</summary>
      <returns>A string representation of the current <see cref="System.Security.HostProtectionException"></see>.</returns>
    </member>
    <member name="T:System.Security.HostSecurityManager">
      <summary>Allows the control and customization of security behavior for application domains.</summary>
    </member>
    <member name="M:System.Security.HostSecurityManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.HostSecurityManager"></see> class.</summary>
    </member>
    <member name="M:System.Security.HostSecurityManager.DetermineApplicationTrust(System.Security.Policy.Evidence,System.Security.Policy.Evidence,System.Security.Policy.TrustManagerContext)">
      <summary>Determines whether an application should be executed.</summary>
      <param name="applicationEvidence">The evidence for the application to be activated.</param>
      <param name="activatorEvidence">Optionally, the evidence for the activating application domain.</param>
      <param name="context">The trust context.</param>
      <returns>An object that contains trust information about the application.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="applicationEvidence">applicationEvidence</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">An <see cref="System.Runtime.Hosting.ActivationArguments"></see> object could not be found in the application evidence.  
 -or-  
 The <see cref="System.Runtime.Hosting.ActivationArguments.ActivationContext"></see> property in the activation arguments is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="System.Security.Policy.ApplicationTrust"></see> grant set does not contain the minimum request set specified by the <see cref="System.ActivationContext"></see>.</exception>
    </member>
    <member name="P:System.Security.HostSecurityManager.DomainPolicy">
      <summary>When overridden in a derived class, gets the security policy for the current application domain.</summary>
      <returns>The security policy for the current application domain. The default is null.</returns>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
    </member>
    <member name="P:System.Security.HostSecurityManager.Flags">
      <summary>Gets the flag representing the security policy components of concern to the host.</summary>
      <returns>One of the enumeration values that specifies security policy components. The default is <see cref="System.Security.HostSecurityManagerOptions.AllFlags"></see>.</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.GenerateAppDomainEvidence(System.Type)">
      <summary>Requests a specific evidence type for the application domain.</summary>
      <param name="evidenceType">The evidence type.</param>
      <returns>The requested application domain evidence.</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.GenerateAssemblyEvidence(System.Type,System.Reflection.Assembly)">
      <summary>Requests a specific evidence type for the assembly.</summary>
      <param name="evidenceType">The evidence type.</param>
      <param name="assembly">The target assembly.</param>
      <returns>The requested assembly evidence.</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.GetHostSuppliedAppDomainEvidenceTypes">
      <summary>Determines which evidence types the host can supply for the application domain, if requested.</summary>
      <returns>An array of evidence types.</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.GetHostSuppliedAssemblyEvidenceTypes(System.Reflection.Assembly)">
      <summary>Determines which evidence types the host can supply for the assembly, if requested.</summary>
      <param name="assembly">The target assembly.</param>
      <returns>An array of evidence types.</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.ProvideAppDomainEvidence(System.Security.Policy.Evidence)">
      <summary>Provides the application domain evidence for an assembly being loaded.</summary>
      <param name="inputEvidence">Additional evidence to add to the <see cref="T:System.AppDomain"></see> evidence.</param>
      <returns>The evidence to be used for the <see cref="System.AppDomain"></see>.</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.ProvideAssemblyEvidence(System.Reflection.Assembly,System.Security.Policy.Evidence)">
      <summary>Provides the assembly evidence for an assembly being loaded.</summary>
      <param name="loadedAssembly">The loaded assembly.</param>
      <param name="inputEvidence">Additional evidence to add to the assembly evidence.</param>
      <returns>The evidence to be used for the assembly.</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.ResolvePolicy(System.Security.Policy.Evidence)">
      <summary>Determines what permissions to grant to code based on the specified evidence.</summary>
      <param name="evidence">The evidence set used to evaluate policy.</param>
      <returns>The permission set that can be granted by the security system.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="evidence">evidence</paramref> is null.</exception>
    </member>
    <member name="T:System.Security.HostSecurityManagerOptions">
      <summary>Specifies the security policy components to be used by the host security manager.</summary>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.AllFlags">
      <summary>Use all security policy components.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostAppDomainEvidence">
      <summary>Use the application domain evidence.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostAssemblyEvidence">
      <summary>Use the assembly evidence.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostDetermineApplicationTrust">
      <summary>Route calls to the <see cref="M:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)"></see> method to the <see cref="M:System.Security.HostSecurityManager.DetermineApplicationTrust(System.Security.Policy.Evidence,System.Security.Policy.Evidence,System.Security.Policy.TrustManagerContext)"></see> method first.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostPolicyLevel">
      <summary>Use the policy level specified in the <see cref="P:System.Security.HostSecurityManager.DomainPolicy"></see> property.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostResolvePolicy">
      <summary>Use the <see cref="M:System.Security.HostSecurityManager.ResolvePolicy(System.Security.Policy.Evidence)"></see> method to resolve the application evidence.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.None">
      <summary>Use none of the security policy components.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.IEvidenceFactory">
      <summary>Gets an object&amp;#39;s <see cref="T:System.Security.Policy.Evidence"></see>.</summary>
    </member>
    <member name="P:System.Security.IEvidenceFactory.Evidence">
      <summary>Gets <see cref="T:System.Security.Policy.Evidence"></see> that verifies the current object&amp;#39;s identity.</summary>
      <returns><see cref="System.Security.Policy.Evidence"></see> of the current object&amp;#39;s identity.</returns>
    </member>
    <member name="T:System.Security.ISecurityPolicyEncodable">
      <summary>Supports the methods that convert permission object state to and from an XML element representation.</summary>
    </member>
    <member name="M:System.Security.ISecurityPolicyEncodable.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy-level context to resolve named permission set references.</param>
    </member>
    <member name="M:System.Security.ISecurityPolicyEncodable.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <param name="level">The policy-level context to resolve named permission set references.</param>
      <returns>The root element of the XML representation of the policy object.</returns>
    </member>
    <member name="T:System.Security.IStackWalk">
      <summary>Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</summary>
    </member>
    <member name="M:System.Security.IStackWalk.Assert">
      <summary>Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</summary>
      <exception cref="T:System.Security.SecurityException">The calling code does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.Assertion"></see>.</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Demand">
      <summary>Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</summary>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have the permission specified by the current permission object.  
 -or-  
 A caller in the call stack has called <see cref="System.Security.IStackWalk.Deny"></see> on the current permission object.</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Deny">
      <summary>Causes every <see cref="M:System.Security.IStackWalk.Demand"></see> for the current object that passes through the calling code to fail.</summary>
    </member>
    <member name="M:System.Security.IStackWalk.PermitOnly">
      <summary>Causes every <see cref="M:System.Security.IStackWalk.Demand"></see> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</summary>
    </member>
    <member name="T:System.Security.NamedPermissionSet">
      <summary>Defines a permission set that has a name and description associated with it. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.Security.NamedPermissionSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.NamedPermissionSet"></see> class from another named permission set.</summary>
      <param name="permSet">The named permission set from which to create the new instance.</param>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.String)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Security.NamedPermissionSet"></see> class with the specified name.</summary>
      <param name="name">The name for the new named permission set.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter is null or is an empty string (&amp;quot;&amp;quot;).</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.String,System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.NamedPermissionSet"></see> class with the specified name in either an unrestricted or a fully restricted state.</summary>
      <param name="name">The name for the new named permission set.</param>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter is null or is an empty string (&amp;quot;&amp;quot;).</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.String,System.Security.PermissionSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.NamedPermissionSet"></see> class with the specified name from a permission set.</summary>
      <param name="name">The name for the named permission set.</param>
      <param name="permSet">The permission set from which to take the value of the new named permission set.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter is null or is an empty string (&amp;quot;&amp;quot;).</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.Copy">
      <summary>Creates a permission set copy from a named permission set.</summary>
      <returns>A permission set that is a copy of the permissions in the named permission set.</returns>
    </member>
    <member name="M:System.Security.NamedPermissionSet.Copy(System.String)">
      <summary>Creates a copy of the named permission set with a different name but the same permissions.</summary>
      <param name="name">The name for the new named permission set.</param>
      <returns>A copy of the named permission set with the new name.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter is null or is an empty string (&amp;quot;&amp;quot;).</exception>
    </member>
    <member name="P:System.Security.NamedPermissionSet.Description">
      <summary>Gets or sets the text description of the current named permission set.</summary>
      <returns>A text description of the named permission set.</returns>
    </member>
    <member name="M:System.Security.NamedPermissionSet.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Security.NamedPermissionSet"></see> object is equal to the current <see cref="T:System.Security.NamedPermissionSet"></see>.</summary>
      <param name="obj">The <see cref="T:System.Security.NamedPermissionSet"></see> object to compare with the current <see cref="T:System.Security.NamedPermissionSet"></see>.</param>
      <returns>true if the specified <see cref="System.Security.NamedPermissionSet"></see> is equal to the current <see cref="System.Security.NamedPermissionSet"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.NamedPermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a named permission set with a specified state from an XML encoding.</summary>
      <param name="et">A security element containing the XML representation of the named permission set.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="et">et</paramref> parameter is not a valid representation of a named permission set.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="et">et</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Security.NamedPermissionSet"></see> object that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="System.Security.NamedPermissionSet"></see> object.</returns>
    </member>
    <member name="P:System.Security.NamedPermissionSet.Name">
      <summary>Gets or sets the name of the current named permission set.</summary>
      <returns>The name of the named permission set.</returns>
      <exception cref="T:System.ArgumentException">The name is null or is an empty string (&amp;quot;&amp;quot;).</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.ToXml">
      <summary>Creates an XML element description of the named permission set.</summary>
      <returns>The XML representation of the named permission set.</returns>
    </member>
    <member name="T:System.Security.Permissions.EnvironmentPermission">
      <summary>Controls access to system and user environment variables. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.EnvironmentPermission"></see> class with either restricted or unrestricted permission as specified.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.#ctor(System.Security.Permissions.EnvironmentPermissionAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.EnvironmentPermission"></see> class with the specified access to the specified environment variables.</summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess"></see> values.</param>
      <param name="pathList">A list of environment variables (semicolon-separated) to which access is granted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pathList">pathList</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="flag">flag</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.EnvironmentPermissionAccess"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.AddPathList(System.Security.Permissions.EnvironmentPermissionAccess,System.String)">
      <summary>Adds access for the specified environment variables to the existing state of the permission.</summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess"></see> values.</param>
      <param name="pathList">A list of environment variables (semicolon-separated).</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pathList">pathList</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="flag">flag</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.EnvironmentPermissionAccess"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.GetPathList(System.Security.Permissions.EnvironmentPermissionAccess)">
      <summary>Gets all environment variables with the specified <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess"></see>.</summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess"></see> values that represents a single type of environment variable access.</param>
      <returns>A list of environment variables (semicolon-separated) for the selected flag.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="flag">flag</paramref> is not a valid value of <see cref="System.Security.Permissions.EnvironmentPermissionAccess"></see>.  
 -or-  
 <paramref name="flag">flag</paramref> is <see cref="System.Security.Permissions.EnvironmentPermissionAccess.AllAccess"></see>, which represents more than one type of environment variable access, or <see cref="System.Security.Permissions.EnvironmentPermissionAccess.NoAccess"></see>, which does not represent any type of environment variable access.</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.SetPathList(System.Security.Permissions.EnvironmentPermissionAccess,System.String)">
      <summary>Sets the specified access to the specified environment variables to the existing state of the permission.</summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess"></see> values.</param>
      <param name="pathList">A list of environment variables (semicolon-separated).</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pathList">pathList</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="flag">flag</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.EnvironmentPermissionAccess"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="other">other</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.EnvironmentPermissionAccess">
      <summary>Specifies access to environment variables.</summary>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess">
      <summary><see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read"></see> and <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Write"></see> access to environment variables. <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess"></see> represents multiple <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess"></see> values and causes an <see cref="T:System.ArgumentException"></see> when used as the <paramref name="flag">flag</paramref> parameter for the <see cref="M:System.Security.Permissions.EnvironmentPermission.GetPathList(System.Security.Permissions.EnvironmentPermissionAccess)"></see> method, which expects a single value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.NoAccess">
      <summary>No access to environment variables. <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.NoAccess"></see> represents no valid <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess"></see> values and causes an <see cref="T:System.ArgumentException"></see> when used as the parameter for <see cref="M:System.Security.Permissions.EnvironmentPermission.GetPathList(System.Security.Permissions.EnvironmentPermissionAccess)"></see>, which expects a single value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.Read">
      <summary>Only read access to environment variables is specified. Changing, deleting and creating environment variables is not included in this access level.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.Write">
      <summary>Only write access to environment variables is specified. Write access includes creating and deleting environment variables as well as changing existing values. Reading environment variables is not included in this access level.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.EnvironmentPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.EnvironmentPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="action">action</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.SecurityAction"></see>.</exception>
    </member>
    <member name="P:System.Security.Permissions.EnvironmentPermissionAttribute.All">
      <summary>Sets full access for the environment variables specified by the string value.</summary>
      <returns>A list of environment variables for full access.</returns>
      <exception cref="T:System.NotSupportedException">The get method is not supported for this property.</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.EnvironmentPermission"></see>.</summary>
      <returns>An <see cref="System.Security.Permissions.EnvironmentPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.EnvironmentPermissionAttribute.Read">
      <summary>Gets or sets read access for the environment variables specified by the string value.</summary>
      <returns>A list of environment variables for read access.</returns>
    </member>
    <member name="P:System.Security.Permissions.EnvironmentPermissionAttribute.Write">
      <summary>Gets or sets write access for the environment variables specified by the string value.</summary>
      <returns>A list of environment variables for write access.</returns>
    </member>
    <member name="T:System.Security.Permissions.FileDialogPermission">
      <summary>Controls the ability to access files or folders through a File dialog box. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.#ctor(System.Security.Permissions.FileDialogPermissionAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileDialogPermission"></see> class with the specified access.</summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileDialogPermissionAccess"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid combination of the <see cref="System.Security.Permissions.FileDialogPermissionAccess"></see> values.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileDialogPermission"></see> class with either restricted or unrestricted permission, as specified.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values (Unrestricted or None).</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="P:System.Security.Permissions.FileDialogPermission.Access">
      <summary>Gets or sets the permitted access to files.</summary>
      <returns>The permitted access to files.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set the <paramref name="access">access</paramref> parameter to a value that is not a valid combination of the <see cref="System.Security.Permissions.FileDialogPermissionAccess"></see> values.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding used to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The version number of the <paramref name="esd">esd</paramref> parameter is not supported.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.FileDialogPermissionAccess">
      <summary>Specifies the type of access to files allowed through the File dialog boxes.</summary>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.None">
      <summary>No access to files through the File dialog boxes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.Open">
      <summary>Ability to open files through the File dialog boxes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.OpenSave">
      <summary>Ability to open and save files through the File dialog boxes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.Save">
      <summary>Ability to save files through the File dialog boxes.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.FileDialogPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.FileDialogPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileDialogPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.FileDialogPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.FileDialogPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.FileDialogPermissionAttribute.Open">
      <summary>Gets or sets a value indicating whether permission to open files through the file dialog is declared.</summary>
      <returns>true if permission to open files through the file dialog is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.FileDialogPermissionAttribute.Save">
      <summary>Gets or sets a value indicating whether permission to save files through the file dialog is declared.</summary>
      <returns>true if permission to save files through the file dialog is declared; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.FileIOPermission">
      <summary>Controls the ability to access files and folders. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"></see> class with fully restricted or unrestricted permission as specified.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> enumeration values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"></see> class with the specified access to the designated file or directory.</summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> enumeration values.</param>
      <param name="path">The absolute path of the file or directory.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"></see>.  
 -or-  
 The <paramref name="path">path</paramref> parameter is not a valid string.  
 -or-  
 The <paramref name="path">path</paramref> parameter does not specify the absolute path to the file or directory.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"></see> class with the specified access to the designated files and directories.</summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> enumeration values.</param>
      <param name="pathList">An array containing the absolute paths of the files and directories.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"></see>.  
 -or-  
 An entry in the <paramref name="pathList">pathList</paramref> array is not a valid string.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"></see> class with the specified access to the designated file or directory and the specified access rights to file control information.</summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> enumeration values.</param>
      <param name="control">A bitwise combination of the <see cref="T:System.Security.AccessControl.AccessControlActions"></see> enumeration values.</param>
      <param name="path">The absolute path of the file or directory.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"></see>.  
 -or-  
 The <paramref name="path">path</paramref> parameter is not a valid string.  
 -or-  
 The <paramref name="path">path</paramref> parameter does not specify the absolute path to the file or directory.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"></see> class with the specified access to the designated files and directories and the specified access rights to file control information.</summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> enumeration values.</param>
      <param name="control">A bitwise combination of the <see cref="T:System.Security.AccessControl.AccessControlActions"></see> enumeration values.</param>
      <param name="pathList">An array containing the absolute paths of the files and directories.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"></see>.  
 -or-  
 An entry in the <paramref name="pathList">pathList</paramref> array is not a valid string.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)">
      <summary>Adds access for the specified file or directory to the existing state of the permission.</summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> values.</param>
      <param name="path">The absolute path of a file or directory.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"></see>.  
 -or-  
 The <paramref name="path">path</paramref> parameter is not a valid string.  
 -or-  
 The <paramref name="path">path</paramref> parameter did not specify the absolute path to the file or directory.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path">path</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="path">path</paramref> parameter has an invalid format.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])">
      <summary>Adds access for the specified files and directories to the existing state of the permission.</summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> values.</param>
      <param name="pathList">An array containing the absolute paths of the files and directories.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"></see>.  
 -or-  
 An entry in the <paramref name="pathList">pathList</paramref> array is not valid.</exception>
      <exception cref="T:System.NotSupportedException">An entry in the <paramref name="pathList">pathList</paramref> array has an invalid format.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pathList">pathList</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermission.AllFiles">
      <summary>Gets or sets the permitted access to all files.</summary>
      <returns>The set of file I/O flags for all files.</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermission.AllLocalFiles">
      <summary>Gets or sets the permitted access to all local files.</summary>
      <returns>The set of file I/O flags for all local files.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Security.Permissions.FileIOPermission"></see> object is equal to the current <see cref="T:System.Security.Permissions.FileIOPermission"></see>.</summary>
      <param name="obj">The <see cref="T:System.Security.Permissions.FileIOPermission"></see> object to compare with the current <see cref="T:System.Security.Permissions.FileIOPermission"></see>.</param>
      <returns>true if the specified <see cref="System.Security.Permissions.FileIOPermission"></see> is equal to the current <see cref="System.Security.Permissions.FileIOPermission"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding used to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not compatible.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Security.Permissions.FileIOPermission"></see> object that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="System.Security.Permissions.FileIOPermission"></see> object.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)">
      <summary>Gets all files and directories with the specified <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see>.</summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> values that represents a single type of file access.</param>
      <returns>An array containing the paths of the files and directories to which access specified by the <paramref name="access">access</paramref> parameter is granted.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="access">access</paramref> is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"></see>.  
 -or-  
 <paramref name="access">access</paramref> is <see cref="System.Security.Permissions.FileIOPermissionAccess.AllAccess"></see>, which represents more than one type of file access, or <see cref="System.Security.Permissions.FileIOPermissionAccess.NoAccess"></see>, which does not represent any type of file access.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)">
      <summary>Sets the specified access to the specified file or directory, replacing the existing state of the permission.</summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> values.</param>
      <param name="path">The absolute path of the file or directory.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"></see>.  
 -or-  
 The <paramref name="path">path</paramref> parameter is not a valid string.  
 -or-  
 The <paramref name="path">path</paramref> parameter did not specify the absolute path to the file or directory.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])">
      <summary>Sets the specified access to the specified files and directories, replacing the current state for the specified access with the new set of paths.</summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> values.</param>
      <param name="pathList">An array containing the absolute paths of the files and directories.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"></see>.  
 -or-  
 An entry in the <paramref name="pathList">pathList</paramref> parameter is not a valid string.</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="other">A permission to combine with the current permission. It must be the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="other">other</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.FileIOPermissionAccess">
      <summary>Specifies the type of file access requested.</summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess">
      <summary><see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append"></see>, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read"></see>, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write"></see>, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery"></see> access to a file or directory. <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess"></see> represents multiple <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> values and causes an <see cref="T:System.ArgumentException"></see> when used as the <paramref name="access">access</paramref> parameter for the <see cref="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)"></see> method, which expects a single value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.Append">
      <summary>Access to append material to a file or directory. <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append"></see> access includes the ability to create a new file or directory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess">
      <summary>No access to a file or directory. <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess"></see> represents no valid <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> values and causes an <see cref="T:System.ArgumentException"></see> when used as the parameter for <see cref="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)"></see>, which expects a single value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">
      <summary>Access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.Read">
      <summary>Access to read from a file or directory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.Write">
      <summary>Access to write to or delete a file or directory. <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write"></see> access includes deleting and overwriting files or directories.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.FileIOPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.FileIOPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="action">action</paramref> parameter is not a valid <see cref="System.Security.Permissions.SecurityAction"></see>.</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.All">
      <summary>Gets or sets full access for the file or directory that is specified by the string value.</summary>
      <returns>The absolute path of the file or directory for full access.</returns>
      <exception cref="T:System.NotSupportedException">The get method is not supported for this property.</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.AllFiles">
      <summary>Gets or sets the permitted access to all files.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.FileIOPermissionAccess"></see> values that represents the permissions for all files. The default is <see cref="System.Security.Permissions.FileIOPermissionAccess.NoAccess"></see>.</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles">
      <summary>Gets or sets the permitted access to all local files.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.FileIOPermissionAccess"></see> values that represents the permissions for all local files. The default is <see cref="System.Security.Permissions.FileIOPermissionAccess.NoAccess"></see>.</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.Append">
      <summary>Gets or sets append access for the file or directory that is specified by the string value.</summary>
      <returns>The absolute path of the file or directory for append access.</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl">
      <summary>Gets or sets the file or directory in which access control information can be changed.</summary>
      <returns>The absolute path of the file or directory in which access control information can be changed.</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.FileIOPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.FileIOPermission"></see> that corresponds to this attribute.</returns>
      <exception cref="T:System.ArgumentException">The path information for a file or directory for which access is to be secured contains invalid characters or wildcard specifiers.</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery">
      <summary>Gets or sets the file or directory to which to grant path discovery.</summary>
      <returns>The absolute path of the file or directory.</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.Read">
      <summary>Gets or sets read access for the file or directory specified by the string value.</summary>
      <returns>The absolute path of the file or directory for read access.</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl">
      <summary>Gets or sets the file or directory in which access control information can be viewed.</summary>
      <returns>The absolute path of the file or directory in which access control information can be viewed.</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify">
      <summary>Gets or sets the file or directory in which file data can be viewed and modified.</summary>
      <returns>The absolute path of the file or directory in which file data can be viewed and modified.</returns>
      <exception cref="T:System.NotSupportedException">The get accessor is called. The accessor is provided only for C# compiler compatibility.</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.Write">
      <summary>Gets or sets write access for the file or directory specified by the string value.</summary>
      <returns>The absolute path of the file or directory for write access.</returns>
    </member>
    <member name="T:System.Security.Permissions.GacIdentityPermission">
      <summary>Defines the identity permission for files originating in the global assembly cache. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.GacIdentityPermission"></see> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.GacIdentityPermission"></see> class with fully restricted <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid <see cref="System.Security.Permissions.PermissionState"></see> value.</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>Creates a permission from an XML encoding.</summary>
      <param name="securityElement">A <see cref="T:System.Security.SecurityElement"></see> that contains the XML encoding to use to create the permission.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="securityElement">securityElement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> is not a valid permission element.  
 -or-  
 The version number of <paramref name="securityElement">securityElement</paramref> is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. The new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Indicates whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission object to test for the subset relationship. The permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> that represents the XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.Union(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.GacIdentityPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.GacIdentityPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.GacIdentityPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see> value.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="action">action</paramref> parameter is not a valid <see cref="System.Security.Permissions.SecurityAction"></see> value.</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermissionAttribute.CreatePermission">
      <summary>Creates a new <see cref="T:System.Security.Permissions.GacIdentityPermission"></see> object.</summary>
      <returns>A <see cref="System.Security.Permissions.GacIdentityPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="T:System.Security.Permissions.HostProtectionAttribute">
      <summary>Allows the use of declarative security actions to determine host protection requirements. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.HostProtectionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.HostProtectionAttribute"></see> class with default values.</summary>
    </member>
    <member name="M:System.Security.Permissions.HostProtectionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.HostProtectionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see> value.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="action">action</paramref> is not <see cref="System.Security.Permissions.SecurityAction.LinkDemand"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.HostProtectionAttribute.CreatePermission">
      <summary>Creates and returns a new host protection permission.</summary>
      <returns>An <see cref="System.Security.IPermission"></see> that corresponds to the current attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt">
      <summary>Gets or sets a value indicating whether external process management is exposed.</summary>
      <returns>true if external process management is exposed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.ExternalThreading">
      <summary>Gets or sets a value indicating whether external threading is exposed.</summary>
      <returns>true if external threading is exposed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort">
      <summary>Gets or sets a value indicating whether resources might leak memory if the operation is terminated.</summary>
      <returns>true if resources might leak memory on termination; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.Resources">
      <summary>Gets or sets flags specifying categories of functionality that are potentially harmful to the host.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.HostProtectionResource"></see> values. The default is <see cref="System.Security.Permissions.HostProtectionResource.None"></see>.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure">
      <summary>Gets or sets a value indicating whether the security infrastructure is exposed.</summary>
      <returns>true if the security infrastructure is exposed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt">
      <summary>Gets or sets a value indicating whether self-affecting process management is exposed.</summary>
      <returns>true if self-affecting process management is exposed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading">
      <summary>Gets or sets a value indicating whether self-affecting threading is exposed.</summary>
      <returns>true if self-affecting threading is exposed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.SharedState">
      <summary>Gets or sets a value indicating whether shared state is exposed.</summary>
      <returns>true if shared state is exposed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.Synchronization">
      <summary>Gets or sets a value indicating whether synchronization is exposed.</summary>
      <returns>true if synchronization is exposed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.UI">
      <summary>Gets or sets a value indicating whether the user interface is exposed.</summary>
      <returns>true if the user interface is exposed; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Security.Permissions.HostProtectionResource">
      <summary>Specifies categories of functionality potentially harmful to the host if invoked by a method or class.</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.All">
      <summary>Exposes all host resources.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.ExternalProcessMgmt">
      <summary>Might create or destroy other processes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.ExternalThreading">
      <summary>Creates or manipulates threads other than its own, which might be harmful to the host.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.MayLeakOnAbort">
      <summary>Might cause a resource leak on termination, if not protected by a safe handle or some other means of ensuring the release of resources.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.None">
      <summary>Exposes no host resources.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.SecurityInfrastructure">
      <summary>Exposes the security infrastructure.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.SelfAffectingProcessMgmt">
      <summary>Might exit the current process, terminating the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.SelfAffectingThreading">
      <summary>Manipulates threads in a way that only affects user code.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.SharedState">
      <summary>Exposes state that might be shared between threads.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.Synchronization">
      <summary>Exposes synchronization.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.UI">
      <summary>Exposes the user interface.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStorageContainment">
      <summary>Specifies the permitted use of isolated storage.</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AdministerIsolatedStorageByUser">
      <summary>Unlimited administration ability for the user store. Allows browsing and deletion of the entire user store, but not read access other than the user&amp;#39;s own domain/assembly identity.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.ApplicationIsolationByMachine">
      <summary>Storage is isolated first by computer and then by application. This provides a data store for the application that is accessible in any domain context. The per-application data compartment requires additional trust because it potentially provides a &amp;quot;tunnel&amp;quot; between applications that could compromise the data isolation of applications in particular Web sites.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.ApplicationIsolationByRoamingUser">
      <summary>Storage is isolated first by user and then by application evidence. Storage will roam if Windows user data roaming is enabled. This provides a data store for the application that is accessible in any domain context. The per-application data compartment requires additional trust because it potentially provides a &amp;quot;tunnel&amp;quot; between applications that could compromise the data isolation of applications in particular Web sites.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.ApplicationIsolationByUser">
      <summary>Storage is isolated first by user and then by application. Storage is also isolated by computer. This provides a data store for the application that is accessible in any domain context. The per-application data compartment requires additional trust because it potentially provides a &amp;quot;tunnel&amp;quot; between applications that could compromise the data isolation of applications in particular Web sites.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByMachine">
      <summary>Storage is isolated first by computer and then by code assembly. This provides a data store for the assembly that is accessible in any domain context. The per-assembly data compartment requires additional trust because it potentially provides a &amp;quot;tunnel&amp;quot; between applications that could compromise the data isolation of applications in particular Web sites.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByRoamingUser">
      <summary>Storage is isolated first by user and then by assembly evidence. Storage will roam if Windows user data roaming is enabled. This provides a data store for the assembly that is accessible in any domain context. The per-assembly data compartment requires additional trust because it potentially provides a &amp;quot;tunnel&amp;quot; between applications that could compromise the data isolation of applications in particular Web sites.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByUser">
      <summary>Storage is isolated first by user and then by code assembly. Storage is also isolated by computer. This provides a data store for the assembly that is accessible in any domain context. The per-assembly data compartment requires additional trust because it potentially provides a &amp;quot;tunnel&amp;quot; between applications that could compromise the data isolation of applications in particular Web sites.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByMachine">
      <summary>Storage is isolated first by computer and then by domain and assembly. Data can only be accessed within the context of the same application and only when run on the same computer. This is helpful when a third-party assembly wants to keep a private data store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByRoamingUser">
      <summary>Storage is isolated first by user and then by domain and assembly. Storage will roam if Windows user data roaming is enabled. Data can only be accessed within the context of the same application and only when run by the same user. This is helpful when a third-party assembly wants to keep a private data store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByUser">
      <summary>Storage is isolated first by user and then by domain and assembly. Storage is also isolated by computer. Data can only be accessed within the context of the same application and only when run by the same user. This is helpful when a third-party assembly wants to keep a private data store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.None">
      <summary>Use of isolated storage is not allowed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.UnrestrictedIsolatedStorage">
      <summary>Use of isolated storage is allowed without restriction. Code has full access to any part of the user store, regardless of the identity of the domain or assembly. This use of isolated storage includes the ability to enumerate the contents of the isolated storage data store.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStorageFilePermission">
      <summary>Specifies the allowed usage of a private virtual file system. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission"></see> class with either fully restricted or unrestricted permission as specified.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission object. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStorageFilePermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.IsolatedStorageFilePermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission"></see>.</summary>
      <returns>An <see cref="System.Security.Permissions.IsolatedStorageFilePermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStoragePermission">
      <summary>Represents access to generic isolated storage capabilities.</summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.IsolatedStoragePermission"></see> class with either restricted or unrestricted permission as specified.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermission.UsageAllowed">
      <summary>Gets or sets the type of isolated storage containment allowed.</summary>
      <returns>One of the <see cref="System.Security.Permissions.IsolatedStorageContainment"></see> values.</returns>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermission.UserQuota">
      <summary>Gets or sets the quota on the overall size of each user&amp;#39;s total store.</summary>
      <returns>The size, in bytes, of the resource allocated to the user.</returns>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStoragePermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.IsolatedStoragePermission"></see> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.IsolatedStoragePermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermissionAttribute.UsageAllowed">
      <summary>Gets or sets the level of isolated storage that should be declared.</summary>
      <returns>One of the <see cref="System.Security.Permissions.IsolatedStorageContainment"></see> values.</returns>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermissionAttribute.UserQuota">
      <summary>Gets or sets the maximum user storage quota size.</summary>
      <returns>The maximum user storage quota size in bytes.</returns>
    </member>
    <member name="T:System.Security.Permissions.IUnrestrictedPermission">
      <summary>Allows a permission to expose an unrestricted state.</summary>
    </member>
    <member name="M:System.Security.Permissions.IUnrestrictedPermission.IsUnrestricted">
      <summary>Returns a value indicating whether unrestricted access to the resource protected by the permission is allowed.</summary>
      <returns>true if unrestricted use of the resource protected by the permission is allowed; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermission">
      <summary>Controls the ability to access key containers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermission"></see> class with the specified access.</summary>
      <param name="flags">A bitwise combination of the <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="flags">flags</paramref> is not a valid combination of the <see cref="System.Security.Permissions.KeyContainerPermissionFlags"></see> values.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermission"></see> class with either restricted or unrestricted permission.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid <see cref="System.Security.Permissions.PermissionState"></see> value.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermission"></see> class with the specified global access and specific key container access rights.</summary>
      <param name="flags">A bitwise combination of the <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags"></see> values.</param>
      <param name="accessList">An array of <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> objects identifying specific key container access rights.</param>
      <exception cref="T:System.ArgumentException"><paramref name="flags">flags</paramref> is not a valid combination of the <see cref="System.Security.Permissions.KeyContainerPermissionFlags"></see> values.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="accessList">accessList</paramref> is null.</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermission.AccessEntries">
      <summary>Gets the collection of <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> objects associated with the current permission.</summary>
      <returns>A <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"></see> containing the <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> objects for this <see cref="System.Security.Permissions.KeyContainerPermission"></see>.</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermission.Flags">
      <summary>Gets the key container permission flags that apply to all key containers associated with the permission.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.KeyContainerPermissionFlags"></see> values.</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement">A <see cref="T:System.Security.SecurityElement"></see> that contains the XML encoding used to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="securityElement">securityElement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> is not a valid permission element.  
 -or-  
 The version number of <paramref name="securityElement">securityElement</paramref> is not supported.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and does not specify a permission of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission to test for the subset relationship. This permission must be the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and does not specify a permission of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.IsUnrestricted">
      <summary>Determines whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> that contains an XML encoding of the permission, including state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and does not specify a permission of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionAccessEntry">
      <summary>Specifies access rights for specific key containers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.#ctor(System.Security.Cryptography.CspParameters,System.Security.Permissions.KeyContainerPermissionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> class, using the specified cryptographic service provider (CSP) parameters and access permissions.</summary>
      <param name="parameters">A <see cref="T:System.Security.Cryptography.CspParameters"></see> object that contains the cryptographic service provider (CSP) parameters.</param>
      <param name="flags">A bitwise combination of the <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags"></see> values.</param>
      <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.#ctor(System.String,System.Security.Permissions.KeyContainerPermissionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> class, using the specified key container name and access permissions.</summary>
      <param name="keyContainerName">The name of the key container.</param>
      <param name="flags">A bitwise combination of the <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags"></see> values.</param>
      <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.#ctor(System.String,System.String,System.Int32,System.String,System.Int32,System.Security.Permissions.KeyContainerPermissionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> class with the specified property values.</summary>
      <param name="keyStore">The name of the key store.</param>
      <param name="providerName">The name of the provider.</param>
      <param name="providerType">The type code for the provider. See the <see cref="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.ProviderType"></see> property for values.</param>
      <param name="keyContainerName">The name of the key container.</param>
      <param name="keySpec">The key specification. See the <see cref="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.KeySpec"></see> property for values.</param>
      <param name="flags">A bitwise combination of the <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags"></see> values.</param>
      <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object is equal to the current instance.</summary>
      <param name="o">The <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object to compare with the currentinstance.</param>
      <returns>true if the specified <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> is equal to the current <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.Flags">
      <summary>Gets or sets the key container permissions.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.KeyContainerPermissionFlags"></see> values. The default is <see cref="System.Security.Permissions.KeyContainerPermissionFlags.NoFlags"></see>.</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.GetHashCode">
      <summary>Gets a hash code for the current instance that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.KeyContainerName">
      <summary>Gets or sets the key container name.</summary>
      <returns>The name of the key container.</returns>
      <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.KeySpec">
      <summary>Gets or sets the key specification.</summary>
      <returns>One of the AT_ values defined in the Wincrypt.h header file.</returns>
      <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.KeyStore">
      <summary>Gets or sets the name of the key store.</summary>
      <returns>The name of the key store.</returns>
      <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.ProviderName">
      <summary>Gets or sets the provider name.</summary>
      <returns>The name of the provider.</returns>
      <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.ProviderType">
      <summary>Gets or sets the provider type.</summary>
      <returns>One of the PROV_ values defined in the Wincrypt.h header file.</returns>
      <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection">
      <summary>Represents a collection of <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.#ctor">
      
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Add(System.Security.Permissions.KeyContainerPermissionAccessEntry)">
      <summary>Adds a <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object to the collection.</summary>
      <param name="accessEntry">The <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="accessEntry">accessEntry</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Clear">
      <summary>Removes all the <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> objects from the collection.</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.CopyTo(System.Array,System.Int32)">
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.CopyTo(System.Security.Permissions.KeyContainerPermissionAccessEntry[],System.Int32)">
      <summary>Copies the elements of the collection to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> array that is the destination of the elements copied from the current collection.</param>
      <param name="index">The index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than the lower bound of <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.  
 -or-  
 The number of elements in the collection is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Count">
      <summary>Gets the number of items in the collection.</summary>
      <returns>The number of <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> objects in the collection.</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.GetEnumerator">
      <summary>Returns a <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator"></see> object that can be used to iterate through the objects in the collection.</summary>
      <returns>A <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator"></see> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.IndexOf(System.Security.Permissions.KeyContainerPermissionAccessEntry)">
      <summary>Gets the index in the collection of the specified <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object, if it exists in the collection.</summary>
      <param name="accessEntry">The <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object to locate.</param>
      <returns>The index of the specified <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object in the collection, or –1 if no match is found.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.IsSynchronized">
      <summary>Gets a value indicating whether the collection is synchronized (thread safe).</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Item(System.Int32)">
      <summary>Gets the item at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the element to access.</param>
      <returns>The <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object at the specified index in the collection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is greater than or equal to the collection count.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="index">index</paramref> is negative.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Remove(System.Security.Permissions.KeyContainerPermissionAccessEntry)">
      <summary>Removes the specified <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object from thecollection.</summary>
      <param name="accessEntry">The <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="accessEntry">accessEntry</paramref> is null.</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns a <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator"></see> object that can be used to iterate through the objects in the collection.</summary>
      <returns>A <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator"></see> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator">
      <summary>Represents the enumerator for <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> objects in a <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"></see>.</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.#ctor">
      
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current">
      <summary>Gets the current entry in the collection.</summary>
      <returns>The current <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntry"></see> object in the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current"></see> property is accessed before first calling the <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext"></see> method. The cursor is located before the first object in the collection.  
 -or-  
 The <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current"></see> property is accessed after a call to the <see cref="System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext"></see> method returns false, which indicates that the cursor is located after the last object in the collection.</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext">
      <summary>Moves to the next element in the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset">
      <summary>Resets the enumerator to the beginning of the collection.</summary>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current object in the collection.</summary>
      <returns>The current object in the collection.</returns>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.KeyContainerPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermissionAttribute"></see> class with the specified security action.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.KeyContainerPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.KeyContainerPermission"></see> that corresponds to the attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.Flags">
      <summary>Gets or sets the key container permissions.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.KeyContainerPermissionFlags"></see> values. The default is <see cref="System.Security.Permissions.KeyContainerPermissionFlags.NoFlags"></see>.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName">
      <summary>Gets or sets the name of the key container.</summary>
      <returns>The name of the key container.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec">
      <summary>Gets or sets the key specification.</summary>
      <returns>One of the AT_ values defined in the Wincrypt.h header file.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore">
      <summary>Gets or sets the name of the key store.</summary>
      <returns>The name of the key store. The default is &amp;quot;*&amp;quot;.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName">
      <summary>Gets or sets the provider name.</summary>
      <returns>The name of the provider.</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType">
      <summary>Gets or sets the provider type.</summary>
      <returns>One of the PROV_ values defined in the Wincrypt.h header file.</returns>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionFlags">
      <summary>Specifies the type of key container access allowed.</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.AllFlags">
      <summary>Create, decrypt, delete, and open a key container; export and import a key; sign files using a key; and view and change the access control list for a key container.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.ChangeAcl">
      <summary>Change the access control list (ACL) for a key container.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Create">
      <summary>Create a key container.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Decrypt">
      <summary>Decrypt a key container.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Delete">
      <summary>Delete a key container.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Export">
      <summary>Export a key from a key container.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Import">
      <summary>Import a key into a key container.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.NoFlags">
      <summary>No access to a key container.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Open">
      <summary>Open a key container and use the public key.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Sign">
      <summary>Sign a file using a key.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.ViewAcl">
      <summary>View the access control list (ACL) for a key container.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.PermissionSetAttribute">
      <summary>Allows security actions for a <see cref="T:System.Security.PermissionSet"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.PermissionSetAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.PermissionSetAttribute"></see> class with the specified security action.</summary>
      <param name="action">One of the enumeration values that specifies a security action.</param>
    </member>
    <member name="M:System.Security.Permissions.PermissionSetAttribute.CreatePermission">
      <summary>This method is not used.</summary>
      <returns>A null reference (nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="M:System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet">
      <summary>Creates and returns a new permission set based on this permission set attribute object.</summary>
      <returns>A new permission set.</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.File">
      <summary>Gets or sets a file containing the XML representation of a custom permission set to be declared.</summary>
      <returns>The physical path to the file containing the XML representation of the permission set.</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.Hex">
      <summary>Gets or sets the hexadecimal representation of the XML encoded permission set.</summary>
      <returns>The hexadecimal representation of the XML encoded permission set.</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.Name">
      <summary>Gets or sets the name of the permission set.</summary>
      <returns>The name of an immutable <see cref="System.Security.NamedPermissionSet"></see> (one of several permission sets that are contained in the default policy and cannot be altered).</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded">
      <summary>Gets or sets a value indicating whether the file specified by <see cref="P:System.Security.Permissions.PermissionSetAttribute.File"></see> is Unicode or ASCII encoded.</summary>
      <returns>true if the file is Unicode encoded; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.XML">
      <summary>Gets or sets the XML representation of a permission set.</summary>
      <returns>The XML representation of a permission set.</returns>
    </member>
    <member name="T:System.Security.Permissions.PermissionState">
      <summary>Specifies whether a permission should have all or no access to resources at creation.</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.None">
      <summary>No access to the resource protected by the permission.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.Unrestricted">
      <summary>Full access to the resource protected by the permission.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.PrincipalPermission">
      <summary>Allows checks against the active principal (see <see cref="T:System.Security.Principal.IPrincipal"></see>) using the language constructs defined for both declarative and imperative security actions. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.PrincipalPermission"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.PrincipalPermission"></see> class for the specified <paramref name="name">name</paramref> and <paramref name="role">role</paramref>.</summary>
      <param name="name">The name of the <see cref="T:System.Security.Principal.IPrincipal"></see> object&amp;#39;s user.</param>
      <param name="role">The role of the <see cref="T:System.Security.Principal.IPrincipal"></see> object&amp;#39;s user (for example, Administrator).</param>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.PrincipalPermission"></see> class for the specified <paramref name="name">name</paramref>, <paramref name="role">role</paramref>, and authentication status.</summary>
      <param name="name">The name of the <see cref="T:System.Security.Principal.IPrincipal"></see> object&amp;#39;s user.</param>
      <param name="role">The role of the <see cref="T:System.Security.Principal.IPrincipal"></see> object&amp;#39;s user (for example, Administrator).</param>
      <param name="isAuthenticated">true to signify that the user is authenticated; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Demand">
      <summary>Determines at run time whether the current principal matches the principal specified by the current permission.</summary>
      <exception cref="T:System.Security.SecurityException">The current principal does not pass the security check for the principal specified by the current permission.  
 -or-  
 The current <see cref="System.Security.Principal.IPrincipal"></see> is null.</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Security.Permissions.PrincipalPermission"></see> object is equal to the current <see cref="T:System.Security.Permissions.PrincipalPermission"></see>.</summary>
      <param name="obj">The <see cref="T:System.Security.Permissions.PrincipalPermission"></see> object to compare with the current <see cref="T:System.Security.Permissions.PrincipalPermission"></see>.</param>
      <returns>true if the specified <see cref="System.Security.Permissions.PrincipalPermission"></see> is equal to the current <see cref="System.Security.Permissions.PrincipalPermission"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="elem">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="elem">elem</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="elem">elem</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="elem">elem</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Security.Permissions.PrincipalPermission"></see> object that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="System.Security.Permissions.PrincipalPermission"></see> object.</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission will be null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not an instance of the same class as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is an object that is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.ToString">
      <summary>Creates and returns a string representing the current permission.</summary>
      <returns>A representation of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="other">other</paramref> parameter is an object that is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.PrincipalPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.PrincipalPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.PrincipalPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated">
      <summary>Gets or sets a value indicating whether the current principal has been authenticated by the underlying role-based security provider.</summary>
      <returns>true if the current principal has been authenticated; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.PrincipalPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.PrincipalPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.PrincipalPermissionAttribute.Name">
      <summary>Gets or sets the name of the identity associated with the current principal.</summary>
      <returns>A name to match against that provided by the underlying role-based security provider.</returns>
    </member>
    <member name="P:System.Security.Permissions.PrincipalPermissionAttribute.Role">
      <summary>Gets or sets membership in a specified security role.</summary>
      <returns>The name of a role from the underlying role-based security provider.</returns>
    </member>
    <member name="T:System.Security.Permissions.PublisherIdentityPermission">
      <summary>Represents the identity of a software publisher. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.PublisherIdentityPermission"></see> class with the specified Authenticode X.509v3 certificate.</summary>
      <param name="certificate">An X.509 certificate representing the software publisher&amp;#39;s identity.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="certificate">certificate</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="certificate">certificate</paramref> parameter is not a valid certificate.</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.PublisherIdentityPermission"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermission.Certificate">
      <summary>Gets or sets an Authenticode X.509v3 certificate that represents the identity of the software publisher.</summary>
      <returns>An X.509 certificate representing the identity of the software publisher.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Permissions.PublisherIdentityPermission.Certificate"></see> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Permissions.PublisherIdentityPermission.Certificate"></see> is not a valid certificate.</exception>
      <exception cref="T:System.NotSupportedException">The property cannot be set because the identity is ambiguous.</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.  
 -or-  
 The two permissions are not equal.</exception>
    </member>
    <member name="T:System.Security.Permissions.PublisherIdentityPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.PublisherIdentityPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.PublisherIdentityPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile">
      <summary>Gets or sets a certification file containing an Authenticode X.509v3 certificate.</summary>
      <returns>The file path of an X.509 certificate file (usually has the extension.cer).</returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of <see cref="T:System.Security.Permissions.PublisherIdentityPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.PublisherIdentityPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile">
      <summary>Gets or sets a signed file from which to extract an Authenticode X.509v3 certificate.</summary>
      <returns>The file path of a file signed with the Authenticode signature.</returns>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate">
      <summary>Gets or sets an Authenticode X.509v3 certificate that identifies the publisher of the calling code.</summary>
      <returns>A hexadecimal representation of the X.509 certificate.</returns>
    </member>
    <member name="T:System.Security.Permissions.ReflectionPermission">
      <summary>Controls access to non-public types and members through the <see cref="N:System.Reflection"></see> APIs. Controls some features of the <see cref="N:System.Reflection.Emit"></see> APIs.</summary>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ReflectionPermission"></see> class with either fully restricted or unrestricted permission as specified.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ReflectionPermission"></see> class with the specified access.</summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.ReflectionPermissionFlag"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="flag">flag</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.ReflectionPermissionFlag"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermission.Flags">
      <summary>Gets or sets the type of reflection allowed for the current permission.</summary>
      <returns>The set flags for the current permission.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="System.Security.Permissions.ReflectionPermissionFlag"></see> for the valid values.</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="other">other</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.ReflectionPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.ReflectionPermission"></see> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ReflectionPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.ReflectionPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.ReflectionPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.Flags">
      <summary>Gets or sets the current allowed uses of reflection.</summary>
      <returns>One or more of the <see cref="System.Security.Permissions.ReflectionPermissionFlag"></see> values combined using a bitwise OR.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="System.Security.Permissions.ReflectionPermissionFlag"></see> for the valid values.</exception>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess">
      <summary>Gets or sets a value that indicates whether invocation of operations on non-public members is allowed.</summary>
      <returns>true if invocation of operations on non-public members is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit">
      <summary>Gets or sets a value that indicates whether use of certain features in <see cref="N:System.Reflection.Emit"></see>, such as emitting debug symbols, is allowed.</summary>
      <returns>true if use of the affected features is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess">
      <summary>Gets or sets a value that indicates whether restricted invocation of non-public members is allowed. Restricted invocation means that the grant set of the assembly that contains the non-public member that is being invoked must be equal to, or a subset of, the grant set of the invoking assembly.</summary>
      <returns>true if restricted invocation of non-public members is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation">
      <summary>Gets or sets a value that indicates whether reflection on members that are not visible is allowed.</summary>
      <returns>true if reflection on members that are not visible is allowed; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.DnsPermission">
      <summary>Controls rights to access Domain Name System (DNS) servers on the network.</summary>
    </member>
    <member name="M:System.Net.DnsPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Creates a new instance of the <see cref="T:System.Net.DnsPermission"></see> class that either allows unrestricted DNS access or disallows DNS access.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid <see cref="System.Security.Permissions.PermissionState"></see> value.</exception>
    </member>
    <member name="M:System.Net.DnsPermission.Copy">
      <summary>Creates an identical copy of the current permission instance.</summary>
      <returns>A new instance of the <see cref="System.Net.DnsPermission"></see> class that is an identical copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.DnsPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a <see cref="T:System.Net.DnsPermission"></see> instance from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the <see cref="T:System.Net.DnsPermission"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="securityElement">securityElement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> is not a <see cref="System.Net.DnsPermission"></see> element.</exception>
    </member>
    <member name="M:System.Net.DnsPermission.Intersect(System.Security.IPermission)">
      <summary>Creates a permission instance that is the intersection of the current permission instance and the specified permission instance.</summary>
      <param name="target">The <see cref="T:System.Net.DnsPermission"></see> instance to intersect with the current instance.</param>
      <returns>A <see cref="System.Net.DnsPermission"></see> instance that represents the intersection of the current <see cref="System.Net.DnsPermission"></see> instance with the specified <see cref="System.Net.DnsPermission"></see> instance, or null if the intersection is empty. If both the current instance and <paramref name="target">target</paramref> are unrestricted, this method returns a new <see cref="System.Net.DnsPermission"></see> instance that is unrestricted; otherwise, it returns null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is neither a <see cref="System.Net.DnsPermission"></see> nor null.</exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission instance is a subset of the specified permission instance.</summary>
      <param name="target">The second <see cref="T:System.Net.DnsPermission"></see> instance to be tested for the subset relationship.</param>
      <returns>false if the current instance is unrestricted and <paramref name="target">target</paramref> is either null or unrestricted; otherwise, true.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is neither a <see cref="System.Net.DnsPermission"></see> nor null.</exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsUnrestricted">
      <summary>Checks the overall permission state of the object.</summary>
      <returns>true if the <see cref="System.Net.DnsPermission"></see> instance was created with <see cref="System.Security.Permissions.PermissionState.Unrestricted"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.DnsPermission.ToXml">
      <summary>Creates an XML encoding of a <see cref="T:System.Net.DnsPermission"></see> instance and its current state.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> instance that contains an XML-encoded representation of the security object, including state information.</returns>
    </member>
    <member name="M:System.Net.DnsPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission instance that is the union of the current permission instance and the specified permission instance.</summary>
      <param name="target">The <see cref="T:System.Net.DnsPermission"></see> instance to combine with the current instance.</param>
      <returns>A <see cref="System.Net.DnsPermission"></see> instance that represents the union of the current <see cref="System.Net.DnsPermission"></see> instance with the specified <see cref="System.Net.DnsPermission"></see> instance. If <paramref name="target">target</paramref> is null, this method returns a copy of the current instance. If the current instance or <paramref name="target">target</paramref> is unrestricted, this method returns a <see cref="System.Net.DnsPermission"></see> instance that is unrestricted; otherwise, it returns a <see cref="System.Net.DnsPermission"></see> instance that is restricted.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is neither a <see cref="System.Net.DnsPermission"></see> nor null.</exception>
    </member>
    <member name="T:System.Net.DnsPermissionAttribute">
      <summary>Specifies permission to request information from Domain Name Servers.</summary>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.DnsPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see> value.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="action">action</paramref> parameter is not a valid <see cref="System.Security.Permissions.SecurityAction"></see>.</exception>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of the <see cref="T:System.Net.DnsPermission"></see> class.</summary>
      <returns>A <see cref="System.Net.DnsPermission"></see> that corresponds to the security declaration.</returns>
    </member>
    <member name="T:System.Net.EndpointPermission">
      <summary>Defines an endpoint that is authorized by a <see cref="T:System.Net.SocketPermission"></see> instance.</summary>
    </member>
    <member name="M:System.Net.EndpointPermission.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the current Object.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current Object.</param>
      <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.EndpointPermission.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>A hash code for the current <see cref="System.Object"></see>.</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Hostname">
      <summary>Gets the DNS host name or IP address of the server that is associated with this endpoint.</summary>
      <returns>A string that contains the DNS host name or IP address of the server.</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Port">
      <summary>Gets the network port number that is associated with this endpoint.</summary>
      <returns>The network port number that is associated with this request, or <see cref="System.Net.SocketPermission.AllPorts"></see>.</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Transport">
      <summary>Gets the transport type that is associated with this endpoint.</summary>
      <returns>One of the <see cref="System.Net.TransportType"></see> values.</returns>
    </member>
    <member name="T:System.Data.Odbc.OdbcPermission">
      <summary>Enables the .NET Framework Data Provider for ODBC to help make sure that a user has a security level sufficient to access an ODBC data source. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Odbc.OdbcPermission"></see> class.</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Odbc.OdbcPermission"></see> class with one of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Odbc.OdbcPermission"></see> class.</summary>
      <param name="state">One of the System.Security.Permissions.PermissionState values.</param>
      <param name="allowBlankPassword">Indicates whether a blank password is allowed.</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>Adds access for the specified connection string to the existing state of the permission.</summary>
      <param name="connectionString">A permitted connection string.</param>
      <param name="restrictions">String that identifies connection string parameters that are allowed or disallowed.</param>
      <param name="behavior">One of the <see cref="T:System.Data.KeyRestrictionBehavior"></see> values.</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.Copy">
      <summary>Returns the <see cref="T:System.Data.Odbc.OdbcPermission"></see> as an <see cref="T:System.Security.IPermission"></see>.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="T:System.Data.Odbc.OdbcPermissionAttribute">
      <summary>Associates a security action with a custom security attribute.</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Odbc.OdbcPermissionAttribute"></see> class with one of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values representing an action that can be performed by using declarative security.</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermissionAttribute.CreatePermission">
      <summary>Returns an <see cref="T:System.Data.Odbc.OdbcPermission"></see> object that is configured according to the attribute properties.</summary>
      <returns>An <see cref="System.Data.Odbc.OdbcPermission"></see> object.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationAccess">
      <summary>Specifies permission to access information about network interfaces and traffic statistics.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.None">
      <summary>No access to network information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping">
      <summary>Ping access to network information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Read">
      <summary>Read access to network information.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermission">
      <summary>Controls access to network information and traffic statistics for the local computer. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> class using the specified <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess"></see> value.</summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess"></see> values.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermission.Access">
      <summary>Gets the level of access to network information controlled by this permission.</summary>
      <returns>One of the <see cref="System.Net.NetworkInformation.NetworkInformationAccess"></see> values.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.AddPermission(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>Adds the specified value to this permission.</summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess"></see> values.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Copy">
      <summary>Creates and returns an identical copy of this permission.</summary>
      <returns>A <see cref="System.Net.NetworkInformation.NetworkInformationPermission"></see> that is identical to the current permission</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.FromXml(System.Security.SecurityElement)">
      <summary>Sets the state of this permission using the specified XML encoding.</summary>
      <param name="securityElement">A <see cref="T:System.Security.SecurityElement"></see> that contains the XML encoding to use to set the state of the current permission</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="securityElement">securityElement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> is not a permission encoding.  
 -or-  
 <paramref name="securityElement">securityElement</paramref> is not an encoding of a <see cref="System.Net.NetworkInformation.NetworkInformationPermission"></see>.  
 -or-  
 <paramref name="securityElement">securityElement</paramref> has invalid <see cref="System.Net.NetworkInformation.NetworkInformationAccess"></see> values.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A <see cref="System.Net.NetworkInformation.NetworkInformationPermission"></see> that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty or <paramref name="target">target</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not a <see cref="System.Net.NetworkInformation.NetworkInformationPermission"></see>.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> that is to be tested for the subset relationship. This permission must be of the same type as the current permission</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.ToXml">
      <summary>Creates an XML encoding of the state of this permission.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> that contains the XML encoding of the current permission.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of this permission and the specified permission.</summary>
      <param name="target">A <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> permission to combine with the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute"></see> class.</summary>
      <param name="action">A <see cref="T:System.Security.Permissions.SecurityAction"></see> value that specifies the permission behavior.</param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.Access">
      <summary>Gets or sets the network information access level.</summary>
      <returns>A string that specifies the access level.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> object.</summary>
      <returns>A <see cref="System.Net.NetworkInformation.NetworkInformationPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission">
      <summary>Specifies the values that define or are used in <see cref="System.Net.PeerToPeer.Collaboration"></see> object permissions.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see>. The initial <see cref="T:System.Security.Permissions.PermissionState"></see> for this instance is passed when the constructor is called.</summary>
      <param name="state">One of the values in the <see cref="T:System.Security.Permissions.PermissionState"></see> enumeration.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy">
      <summary>Creates and returns a copy of the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see>.</summary>
      <returns>A <see cref="System.Object"></see> that contains a copy of the current instance of <see cref="System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see>.</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml(System.Security.SecurityElement)">
      <summary>Represents the XML object model for encoding security objects.</summary>
      <param name="e">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentException">
The parameter is not a valid permission element.  

The parameter does not contain a valid type or class.  

The parameter&amp;#39;s version number is not supported.</exception>
      <exception cref="T:System.ArgumentNullException">The parameter is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see> and the specified <paramref name="target">target</paramref> permission.</summary>
      <param name="target">Permission to <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(System.Security.IPermission)"></see> with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current <see cref="System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see> and the specified <paramref name="target">target</paramref> permission. This new permission is a null reference (Nothing in Visual Basic) if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The target parameter is not a null reference (Nothing in Visual Basic) and is not an instance of the same class as the current permission.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see> is a subset of the specified <paramref name="target">target</paramref> permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>True if the current <see cref="System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see> is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The parameter is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted">
      <summary>Returns a value specifying whether the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see> is unrestricted.</summary>
      <returns>True if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml">
      <summary>Creates an XML encoding of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see> and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see> and the specified <paramref name="target">target</paramref> permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the <see cref="System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(System.Security.IPermission)"></see> of the current <see cref="System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see> and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The parameter is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">Specifies a <see cref="T:System.Security.Permissions.SecurityAction"></see> value.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.IPermission"></see>.</summary>
      <returns>A new <see cref="System.Security.IPermission"></see> object.</returns>
    </member>
    <member name="T:System.Security.Policy.PublisherMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its software publisher&amp;#39;s Authenticode X.509v3 certificate. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PublisherMembershipCondition"></see> class with the Authenticode X.509v3 certificate that determines membership.</summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> that contains the software publisher&amp;#39;s public key.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="certificate">certificate</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Security.Policy.PublisherMembershipCondition.Certificate">
      <summary>Gets or sets the Authenticode X.509v3 certificate for which the membership condition tests.</summary>
      <returns>The <see cref="System.Security.Cryptography.X509Certificates.X509Certificate"></see> for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> against which to make the test.</param>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.PublisherMembershipCondition.Certificate"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.PublisherMembershipCondition.Certificate"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the publisher certificate from the specified object is equivalent to the publisher certificate contained in the current <see cref="T:System.Security.Policy.PublisherMembershipCondition"></see>.</summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.PublisherMembershipCondition"></see>.</param>
      <returns>true if the publisher certificate from the specified object is equivalent to the publisher certificate contained in the current <see cref="System.Security.Policy.PublisherMembershipCondition"></see>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.PublisherMembershipCondition.Certificate"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context, used to resolve <see cref="T:System.Security.NamedPermissionSet"></see> references.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.PublisherMembershipCondition.Certificate"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the <see cref="T:System.Security.Policy.PublisherMembershipCondition"></see>.</summary>
      <returns>A representation of the <see cref="System.Security.Policy.PublisherMembershipCondition"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.PublisherMembershipCondition.Certificate"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.PublisherMembershipCondition.Certificate"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel"></see>.</summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context, which is used to resolve <see cref="T:System.Security.NamedPermissionSet"></see> references.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.PublisherMembershipCondition.Certificate"></see> property is null.</exception>
    </member>
    <member name="T:System.Security.Policy.Site">
      <summary>Provides the Web site from which a code assembly originates as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Site.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Site"></see> class with the website from which a code assembly originates.</summary>
      <param name="name">The website of origin for the associated code assembly.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.Site.Copy">
      <summary>Creates an equivalent copy of the <see cref="T:System.Security.Policy.Site"></see> object.</summary>
      <returns>A new object that is identical to the current <see cref="System.Security.Policy.Site"></see> object.</returns>
    </member>
    <member name="M:System.Security.Policy.Site.CreateFromUrl(System.String)">
      <summary>Creates a new <see cref="T:System.Security.Policy.Site"></see> object from the specified URL.</summary>
      <param name="url">The URL from which to create the new <see cref="T:System.Security.Policy.Site"></see> object.</param>
      <returns>A new site object.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="url">url</paramref> parameter is not a valid URL.  
 -or-  
 The <paramref name="url">url</paramref> parameter is a file name.</exception>
    </member>
    <member name="M:System.Security.Policy.Site.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates an identity permission that corresponds to the current <see cref="T:System.Security.Policy.Site"></see> object.</summary>
      <param name="evidence">The evidence from which to construct the identity permission.</param>
      <returns>A site identity permission for the current <see cref="System.Security.Policy.Site"></see> object.</returns>
    </member>
    <member name="M:System.Security.Policy.Site.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Security.Policy.Site"></see> to the specified object for equivalence.</summary>
      <param name="o">The object to test for equivalence with the current object.</param>
      <returns>true if the two instances of the <see cref="System.Security.Policy.Site"></see> class are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.Site.GetHashCode">
      <summary>Returns the hash code of the current website name.</summary>
      <returns>The hash code of the current website name.</returns>
    </member>
    <member name="P:System.Security.Policy.Site.Name">
      <summary>Gets the website from which the code assembly originates.</summary>
      <returns>The name of the website from which the code assembly originates.</returns>
    </member>
    <member name="M:System.Security.Policy.Site.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Policy.Site"></see> object.</summary>
      <returns>A representation of the current site.</returns>
    </member>
    <member name="T:System.Security.Policy.SiteMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing the site from which it originated. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.SiteMembershipCondition"></see> class with name of the site that determines membership.</summary>
      <param name="site">The site name or wildcard expression.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="site">site</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="site">site</paramref> parameter is not a valid <see cref="System.Security.Policy.Site"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> against which to make the test.</param>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.SiteMembershipCondition.Site"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.SiteMembershipCondition.Site"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the site from the specified <see cref="T:System.Security.Policy.SiteMembershipCondition"></see> object is equivalent to the site contained in the current <see cref="T:System.Security.Policy.SiteMembershipCondition"></see>.</summary>
      <param name="o">The <see cref="T:System.Security.Policy.SiteMembershipCondition"></see> object to compare to the current <see cref="T:System.Security.Policy.SiteMembershipCondition"></see>.</param>
      <returns>true if the site from the specified <see cref="System.Security.Policy.SiteMembershipCondition"></see> object is equivalent to the site contained in the current <see cref="System.Security.Policy.SiteMembershipCondition"></see>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.SiteMembershipCondition.Site"></see> property for the current object or the specified object is null.</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context, used to resolve <see cref="T:System.Security.NamedPermissionSet"></see> references.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.SiteMembershipCondition.Site"></see> property is null.</exception>
    </member>
    <member name="P:System.Security.Policy.SiteMembershipCondition.Site">
      <summary>Gets or sets the site for which the membership condition tests.</summary>
      <returns>The site for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set <see cref="System.Security.Policy.SiteMembershipCondition.Site"></see> to null.</exception>
      <exception cref="T:System.ArgumentException">An attempt is made to set <see cref="System.Security.Policy.SiteMembershipCondition.Site"></see> to an invalid <see cref="System.Security.Policy.Site"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the membership condition.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.SiteMembershipCondition.Site"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.SiteMembershipCondition.Site"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel"></see>.</summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context, used to resolve <see cref="T:System.Security.NamedPermissionSet"></see> references.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.SiteMembershipCondition.Site"></see> property is null.</exception>
    </member>
    <member name="T:System.Security.Policy.StrongName">
      <summary>Provides the strong name of a code assembly as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.StrongName.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.StrongName"></see> class with the strong name public key blob, name, and version.</summary>
      <param name="blob">The <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob"></see> of the software publisher.</param>
      <param name="name">The simple name section of the strong name.</param>
      <param name="version">The <see cref="T:System.Version"></see> of the strong name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="blob">blob</paramref> parameter is null.  
 -or-  
 The <paramref name="name">name</paramref> parameter is null.  
 -or-  
 The <paramref name="version">version</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter is an empty string (&amp;quot;&amp;quot;).</exception>
    </member>
    <member name="M:System.Security.Policy.StrongName.Copy">
      <summary>Creates an equivalent copy of the current <see cref="T:System.Security.Policy.StrongName"></see>.</summary>
      <returns>A new, identical copy of the current <see cref="System.Security.Policy.StrongName"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates a <see cref="T:System.Security.Permissions.StrongNameIdentityPermission"></see> that corresponds to the current <see cref="T:System.Security.Policy.StrongName"></see>.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> from which to construct the <see cref="T:System.Security.Permissions.StrongNameIdentityPermission"></see>.</param>
      <returns>A <see cref="System.Security.Permissions.StrongNameIdentityPermission"></see> for the specified <see cref="System.Security.Policy.StrongName"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.Equals(System.Object)">
      <summary>Determines whether the specified strong name is equal to the current strong name.</summary>
      <param name="o">The strong name to compare against the current strong name.</param>
      <returns>true if the specified strong name is equal to the current strong name; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.GetHashCode">
      <summary>Gets the hash code of the current <see cref="T:System.Security.Policy.StrongName"></see>.</summary>
      <returns>The hash code of the current <see cref="System.Security.Policy.StrongName"></see>.</returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.Name">
      <summary>Gets the simple name of the current <see cref="T:System.Security.Policy.StrongName"></see>.</summary>
      <returns>The simple name part of the <see cref="System.Security.Policy.StrongName"></see>.</returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.PublicKey">
      <summary>Gets the <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob"></see> of the current <see cref="T:System.Security.Policy.StrongName"></see>.</summary>
      <returns>The <see cref="System.Security.Permissions.StrongNamePublicKeyBlob"></see> of the current <see cref="System.Security.Policy.StrongName"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.ToString">
      <summary>Creates a string representation of the current <see cref="T:System.Security.Policy.StrongName"></see>.</summary>
      <returns>A representation of the current <see cref="System.Security.Policy.StrongName"></see>.</returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.Version">
      <summary>Gets the <see cref="T:System.Version"></see> of the current <see cref="T:System.Security.Policy.StrongName"></see>.</summary>
      <returns>The <see cref="System.Version"></see> of the current <see cref="System.Security.Policy.StrongName"></see>.</returns>
    </member>
    <member name="T:System.Security.Policy.StrongNameMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its strong name. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> class with the strong name public key blob, name, and version number that determine membership.</summary>
      <param name="blob">The strong name public key blob of the software publisher.</param>
      <param name="name">The simple name section of the strong name.</param>
      <param name="version">The version number of the strong name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="blob">blob</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter is null.  
 -or-  
 The <paramref name="name">name</paramref> parameter is an empty string (&amp;quot;&amp;quot;).</exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> against which to make the test.</param>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see>.</summary>
      <returns>A new, identical copy of the current <see cref="System.Security.Policy.StrongNameMembershipCondition"></see></returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the <see cref="T:System.Security.Policy.StrongName"></see> from the specified object is equivalent to the <see cref="T:System.Security.Policy.StrongName"></see> contained in the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see>.</summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see>.</param>
      <returns>true if the <see cref="System.Security.Policy.StrongName"></see> from the specified object is equivalent to the <see cref="System.Security.Policy.StrongName"></see> contained in the current <see cref="System.Security.Policy.StrongNameMembershipCondition"></see>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.StrongNameMembershipCondition.PublicKey"></see> property of the current object or the specified object is null.</exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context, used to resolve <see cref="T:System.Security.NamedPermissionSet"></see> references.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see>.</summary>
      <returns>The hash code for the current <see cref="System.Security.Policy.StrongNameMembershipCondition"></see>.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.StrongNameMembershipCondition.PublicKey"></see> property is null.</exception>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.Name">
      <summary>Gets or sets the simple name of the <see cref="T:System.Security.Policy.StrongName"></see> for which the membership condition tests.</summary>
      <returns>The simple name of the <see cref="System.Security.Policy.StrongName"></see> for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentException">The value is null.  
 -or-  
 The value is an empty string (&amp;quot;&amp;quot;).</exception>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey">
      <summary>Gets or sets the <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob"></see> of the <see cref="T:System.Security.Policy.StrongName"></see> for which the membership condition tests.</summary>
      <returns>The <see cref="System.Security.Permissions.StrongNamePublicKeyBlob"></see> of the <see cref="System.Security.Policy.StrongName"></see> for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set the <see cref="System.Security.Policy.StrongNameMembershipCondition.PublicKey"></see> to null.</exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see>.</summary>
      <returns>A representation of the current <see cref="System.Security.Policy.StrongNameMembershipCondition"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel"></see>.</summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context, which is used to resolve <see cref="T:System.Security.NamedPermissionSet"></see> references.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.Version">
      <summary>Gets or sets the <see cref="T:System.Version"></see> of the <see cref="T:System.Security.Policy.StrongName"></see> for which the membership condition tests.</summary>
      <returns>The <see cref="System.Version"></see> of the <see cref="System.Security.Policy.StrongName"></see> for which the membership condition tests.</returns>
    </member>
    <member name="T:System.Security.Policy.TrustManagerContext">
      <summary>Represents the context for the trust manager to consider when making the decision to run an application, and when setting up the security on a new <see cref="T:System.AppDomain"></see> in which to run an application.</summary>
    </member>
    <member name="M:System.Security.Policy.TrustManagerContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.TrustManagerContext"></see> class.</summary>
    </member>
    <member name="M:System.Security.Policy.TrustManagerContext.#ctor(System.Security.Policy.TrustManagerUIContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.TrustManagerContext"></see> class using the specified <see cref="T:System.Security.Policy.TrustManagerUIContext"></see> object.</summary>
      <param name="uiContext">One of the <see cref="T:System.Security.Policy.TrustManagerUIContext"></see> values that specifies the type of trust manager user interface to use.</param>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.IgnorePersistedDecision">
      <summary>Gets or sets a value indicating whether the application security manager should ignore any persisted decisions and call the trust manager.</summary>
      <returns>true to call the trust manager; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.KeepAlive">
      <summary>Gets or sets a value indicating whether the trust manager should cache state for this application, to facilitate future requests to determine application trust.</summary>
      <returns>true to cache state data; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.NoPrompt">
      <summary>Gets or sets a value indicating whether the trust manager should prompt the user for trust decisions.</summary>
      <returns>true to not prompt the user; false to prompt the user. The default is false.</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.Persist">
      <summary>Gets or sets a value indicating whether the user&amp;#39;s response to the consent dialog should be persisted.</summary>
      <returns>true to cache state data; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity">
      <summary>Gets or sets the identity of the previous application identity.</summary>
      <returns>An <see cref="System.ApplicationIdentity"></see> object representing the previous <see cref="System.ApplicationIdentity"></see>.</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.UIContext">
      <summary>Gets or sets the type of user interface the trust manager should display.</summary>
      <returns>One of the <see cref="System.Security.Policy.TrustManagerUIContext"></see> values. The default is <see cref="System.Security.Policy.TrustManagerUIContext.Run"></see>.</returns>
    </member>
    <member name="T:System.Security.Policy.TrustManagerUIContext">
      <summary>Specifies the type of user interface (UI) the trust manager should use for trust decisions.</summary>
    </member>
    <member name="F:System.Security.Policy.TrustManagerUIContext.Install">
      <summary>An Install UI.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Policy.TrustManagerUIContext.Run">
      <summary>A Run UI.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Policy.TrustManagerUIContext.Upgrade">
      <summary>An Upgrade UI.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Policy.UnionCodeGroup">
      <summary>Represents a code group whose policy statement is the union of the current code group&amp;#39;s policy statement and the policy statement of all its matching child code groups. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.UnionCodeGroup"></see> class.</summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy.</param>
      <param name="policy">The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.</param>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="membershipCondition">membershipCondition</paramref> parameter is not valid.  
 -or-  
 The type of the <paramref name="policy">policy</paramref> parameter is not valid.</exception>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.Copy">
      <summary>Makes a deep copy of the current code group.</summary>
      <returns>An equivalent copy of the current code group, including its membership conditions and child code groups.</returns>
    </member>
    <member name="P:System.Security.Policy.UnionCodeGroup.MergeLogic">
      <summary>Gets the merge logic.</summary>
      <returns>Always the string &amp;quot;Union&amp;quot;.</returns>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>Resolves policy for the code group and its descendants for a set of evidence.</summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>A policy statement consisting of the permissions granted by the code group with optional attributes, or null if the code group does not apply (the membership condition does not match the specified evidence).</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
      <exception cref="T:System.Security.Policy.PolicyException">More than one code group (including the parent code group and any child code groups) is marked <see cref="System.Security.Policy.PolicyStatementAttribute.Exclusive"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>Resolves matching code groups.</summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>The complete set of code groups that were matched by the evidence.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
    </member>
    <member name="T:System.Security.Policy.Url">
      <summary>Provides the URL from which a code assembly originates as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Url.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Url"></see> class with the URL from which a code assembly originates.</summary>
      <param name="name">The URL of origin for the associated code assembly.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.Url.Copy">
      <summary>Creates a new copy of the evidence object.</summary>
      <returns>A new, identical copy of the evidence object.</returns>
    </member>
    <member name="M:System.Security.Policy.Url.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates an identity permission corresponding to the current instance of the <see cref="T:System.Security.Policy.Url"></see> evidence class.</summary>
      <param name="evidence">The evidence set from which to construct the identity permission.</param>
      <returns>A <see cref="System.Security.Permissions.UrlIdentityPermission"></see> for the specified <see cref="System.Security.Policy.Url"></see> evidence.</returns>
    </member>
    <member name="M:System.Security.Policy.Url.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Security.Policy.Url"></see> evidence object to the specified object for equivalence.</summary>
      <param name="o">The <see cref="T:System.Security.Policy.Url"></see> evidence object to test for equivalence with the current object.</param>
      <returns>true if the two <see cref="System.Security.Policy.Url"></see> objects are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.Url.GetHashCode">
      <summary>Gets the hash code of the current URL.</summary>
      <returns>The hash code of the current URL.</returns>
    </member>
    <member name="M:System.Security.Policy.Url.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Policy.Url"></see>.</summary>
      <returns>A representation of the current <see cref="System.Security.Policy.Url"></see>.</returns>
    </member>
    <member name="P:System.Security.Policy.Url.Value">
      <summary>Gets the URL from which the code assembly originates.</summary>
      <returns>The URL from which the code assembly originates.</returns>
    </member>
    <member name="T:System.Security.Policy.UrlMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its URL. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.UrlMembershipCondition"></see> class with the URL that determines membership.</summary>
      <param name="url">The URL for which to test.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url">url</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="url">url</paramref> must be an absolute URL.</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <param name="evidence">The evidence set against which to make the test.</param>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.UrlMembershipCondition.Url"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.UrlMembershipCondition.Url"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the URL from the specified object is equivalent to the URL contained in the current <see cref="T:System.Security.Policy.UrlMembershipCondition"></see>.</summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.UrlMembershipCondition"></see>.</param>
      <returns>true if the URL from the specified object is equivalent to the URL contained in the current <see cref="System.Security.Policy.UrlMembershipCondition"></see>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.UrlMembershipCondition.Url"></see> property of the current object or the specified object is null.</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy level context, used to resolve named permission set references.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.UrlMembershipCondition.Url"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the state of the membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.UrlMembershipCondition.Url"></see> property is null.</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel"></see>.</summary>
      <param name="level">The policy level context for resolving named permission set references.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.UrlMembershipCondition.Url"></see> property is null.</exception>
    </member>
    <member name="P:System.Security.Policy.UrlMembershipCondition.Url">
      <summary>Gets or sets the URL for which the membership condition tests.</summary>
      <returns>The URL for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set <see cref="System.Security.Policy.UrlMembershipCondition.Url"></see> to null.</exception>
      <exception cref="T:System.ArgumentException">Value is not an absolute URL.</exception>
    </member>
    <member name="T:System.Security.Policy.Zone">
      <summary>Provides the security zone of a code assembly as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Zone.#ctor(System.Security.SecurityZone)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Zone"></see> class with the zone from which a code assembly originates.</summary>
      <param name="zone">The zone of origin for the associated code assembly.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="zone">zone</paramref> parameter is not a valid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.Zone.Copy">
      <summary>Creates an equivalent copy of the evidence object.</summary>
      <returns>A new, identical copy of the evidence object.</returns>
    </member>
    <member name="M:System.Security.Policy.Zone.CreateFromUrl(System.String)">
      <summary>Creates a new zone with the specified URL.</summary>
      <param name="url">The URL from which to create the zone.</param>
      <returns>A new zone with the specified URL.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url">url</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.Zone.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates an identity permission that corresponds to the current instance of the <see cref="T:System.Security.Policy.Zone"></see> evidence class.</summary>
      <param name="evidence">The evidence set from which to construct the identity permission.</param>
      <returns>A <see cref="System.Security.Permissions.ZoneIdentityPermission"></see> for the specified <see cref="System.Security.Policy.Zone"></see> evidence.</returns>
    </member>
    <member name="M:System.Security.Policy.Zone.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Security.Policy.Zone"></see> evidence object to the specified object for equivalence.</summary>
      <param name="o">The <see cref="T:System.Security.Policy.Zone"></see> evidence object to test for equivalence with the current object.</param>
      <returns>true if the two <see cref="System.Security.Policy.Zone"></see> objects are equal; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="o">o</paramref> parameter is not a <see cref="System.Security.Policy.Zone"></see> object.</exception>
    </member>
    <member name="M:System.Security.Policy.Zone.GetHashCode">
      <summary>Gets the hash code of the current zone.</summary>
      <returns>The hash code of the current zone.</returns>
    </member>
    <member name="P:System.Security.Policy.Zone.SecurityZone">
      <summary>Gets the zone from which the code assembly originates.</summary>
      <returns>The zone from which the code assembly originates.</returns>
    </member>
    <member name="M:System.Security.Policy.Zone.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Policy.Zone"></see>.</summary>
      <returns>A representation of the current <see cref="System.Security.Policy.Zone"></see>.</returns>
    </member>
    <member name="T:System.Security.Policy.ZoneMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its zone of origin. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.#ctor(System.Security.SecurityZone)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.ZoneMembershipCondition"></see> class with the zone that determines membership.</summary>
      <param name="zone">The <see cref="T:System.Security.SecurityZone"></see> for which to test.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="zone">zone</paramref> parameter is not a valid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <param name="evidence">The evidence set against which to make the test.</param>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is not a valid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is not a valid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the zone from the specified object is equivalent to the zone contained in the current <see cref="T:System.Security.Policy.ZoneMembershipCondition"></see>.</summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.ZoneMembershipCondition"></see>.</param>
      <returns>true if the zone from the specified object is equivalent to the zone contained in the current <see cref="System.Security.Policy.ZoneMembershipCondition"></see>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property for the current object or the specified object is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property for the current object or the specified object is not a valid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy level context used to resolve named permission set references.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is not a valid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone">
      <summary>Gets or sets the zone for which the membership condition tests.</summary>
      <returns>The zone for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentException">An attempt is made to set <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> to an invalid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the state of the membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is not a valid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is not a valid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel"></see>.</summary>
      <param name="level">The policy level context for resolving named permission set references.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ZoneMembershipCondition.SecurityZone"></see> property is not a valid <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="T:System.Security.PolicyLevelType">
      <summary>Specifies the type of a managed code policy level.</summary>
    </member>
    <member name="F:System.Security.PolicyLevelType.AppDomain">
      <summary>Security policy for all managed code in an application.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.PolicyLevelType.Enterprise">
      <summary>Security policy for all managed code in an enterprise.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.PolicyLevelType.Machine">
      <summary>Security policy for all managed code that is run on the computer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.PolicyLevelType.User">
      <summary>Security policy for all managed code that is run by the user.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.SecurityContext">
      <summary>Encapsulates and propagates all security-related data for execution contexts transferred across threads. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.SecurityContext.Capture">
      <summary>Captures the security context for the current thread.</summary>
      <returns>The security context for the current thread.</returns>
    </member>
    <member name="M:System.Security.SecurityContext.CreateCopy">
      <summary>Creates a copy of the current security context.</summary>
      <returns>The security context for the current thread.</returns>
      <exception cref="T:System.InvalidOperationException">The current security context has been previously used, was marshaled across application domains, or was not acquired through the <see cref="System.Security.SecurityContext.Capture"></see> method.</exception>
    </member>
    <member name="M:System.Security.SecurityContext.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.SecurityContext"></see> class.</summary>
    </member>
    <member name="M:System.Security.SecurityContext.IsFlowSuppressed">
      <summary>Determines whether the flow of the security context has been suppressed.</summary>
      <returns>true if the flow has been suppressed; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed">
      <summary>Determines whether the flow of the Windows identity portion of the current security context has been suppressed.</summary>
      <returns>true if the flow has been suppressed; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.SecurityContext.RestoreFlow">
      <summary>Restores the flow of the security context across asynchronous threads.</summary>
      <exception cref="T:System.InvalidOperationException">The security context is null or an empty string.</exception>
    </member>
    <member name="M:System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)">
      <summary>Runs the specified method in the specified security context on the current thread.</summary>
      <param name="securityContext">The security context to set.</param>
      <param name="callback">The delegate that represents the method to run in the specified security context.</param>
      <param name="state">The object to pass to the callback method.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="securityContext">securityContext</paramref> is null.  
 -or-  
 <paramref name="securityContext">securityContext</paramref> was not acquired through a capture operation.  
 -or-  
 <paramref name="securityContext">securityContext</paramref> has already been used as the argument to a <see cref="System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)"></see> method call.</exception>
    </member>
    <member name="M:System.Security.SecurityContext.SuppressFlow">
      <summary>Suppresses the flow of the security context across asynchronous threads.</summary>
      <returns>An <see cref="System.Threading.AsyncFlowControl"></see> structure for restoring the flow.</returns>
    </member>
    <member name="M:System.Security.SecurityContext.SuppressFlowWindowsIdentity">
      <summary>Suppresses the flow of the Windows identity portion of the current security context across asynchronous threads.</summary>
      <returns>A structure for restoring the flow.</returns>
    </member>
    <member name="T:System.Security.SecurityContextSource">
      <summary>Identifies the source for the security context.</summary>
    </member>
    <member name="F:System.Security.SecurityContextSource.CurrentAppDomain">
      <summary>The current application domain is the source for the security context.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.SecurityContextSource.CurrentAssembly">
      <summary>The current assembly is the source for the security context.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.SecurityManager">
      <summary>Provides the main access point for classes interacting with the security system. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Security.SecurityManager.CheckExecutionRights">
      <summary>Gets or sets a value indicating whether code must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution"></see> in order to execute.</summary>
      <returns>true if code must have <see cref="System.Security.Permissions.SecurityPermissionFlag.Execution"></see> in order to execute; otherwise, false.</returns>
      <exception cref="T:System.Security.SecurityException">The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy"></see>.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture">
      <summary>Determines whether the current thread requires a security context capture if its security state has to be re-created at a later point in time.</summary>
      <returns>false if the stack contains no partially trusted application domains, no partially trusted assemblies, and no currently active <see cref="System.Security.CodeAccessPermission.PermitOnly"></see> or <see cref="System.Security.CodeAccessPermission.Deny"></see> modifiers; true if the common language runtime cannot guarantee that the stack contains none of these.</returns>
    </member>
    <member name="M:System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)">
      <summary>Gets a permission set that is safe to grant to an application that has the provided evidence.</summary>
      <param name="evidence">The host evidence to match to a permission set.</param>
      <returns>A permission set that can be used as a grant set for the application that has the provided evidence.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="evidence">evidence</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)">
      <summary>Gets the granted zone identity and URL identity permission sets for the current assembly.</summary>
      <param name="zone">An output parameter that contains an <see cref="T:System.Collections.ArrayList"></see> of granted <see cref="P:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone"></see> objects.</param>
      <param name="origin">An output parameter that contains an <see cref="T:System.Collections.ArrayList"></see> of granted <see cref="T:System.Security.Permissions.UrlIdentityPermission"></see> objects.</param>
      <exception cref="T:System.Security.SecurityException">The request for <see cref="System.Security.Permissions.StrongNameIdentityPermission"></see> failed.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.IsGranted(System.Security.IPermission)">
      <summary>Determines whether a permission is granted to the caller.</summary>
      <param name="perm">The permission to test against the grant of the caller.</param>
      <returns>true if the permissions granted to the caller include the permission <paramref name="perm">perm</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)">
      <summary>Loads a <see cref="T:System.Security.Policy.PolicyLevel"></see> from the specified file.</summary>
      <param name="path">The physical file path to a file containing the security policy information.</param>
      <param name="type">One of the enumeration values that specifies the type of the policy level to be loaded.</param>
      <returns>The loaded policy level.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path">path</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The file indicated by the <paramref name="path">path</paramref> parameter does not exist.</exception>
      <exception cref="T:System.Security.SecurityException">The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy"></see>.  
 -or-  
 The code that calls this method does not have <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"></see>.  
 -or-  
 The code that calls this method does not have <see cref="System.Security.Permissions.FileIOPermissionAccess.Write"></see>.  
 -or-  
 The code that calls this method does not have <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery"></see>.</exception>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)">
      <summary>Loads a <see cref="T:System.Security.Policy.PolicyLevel"></see> from the specified string.</summary>
      <param name="str">The XML representation of a security policy level in the same form in which it appears in a configuration file.</param>
      <param name="type">One of the enumeration values that specifies the type of the policy level to be loaded.</param>
      <returns>The loaded policy level.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="str">str</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="str">str</paramref> parameter is not valid.</exception>
      <exception cref="T:System.Security.SecurityException">The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy"></see>.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.PolicyHierarchy">
      <summary>Provides an enumerator to access the security policy hierarchy by levels, such as computer policy and user policy.</summary>
      <returns>An enumerator for <see cref="System.Security.Policy.PolicyLevel"></see> objects that compose the security policy hierarchy.</returns>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
      <exception cref="T:System.Security.SecurityException">The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy"></see>.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)">
      <summary>Determines what permissions to grant to code based on the specified evidence.</summary>
      <param name="evidence">The evidence set used to evaluate policy.</param>
      <returns>The set of permissions that can be granted by the security system.</returns>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])">
      <summary>Determines what permissions to grant to code based on the specified evidence.</summary>
      <param name="evidences">An array of evidence objects used to evaluate policy.</param>
      <returns>The set of permissions that is appropriate for all of the provided evidence.</returns>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)">
      <summary>Determines what permissions to grant to code based on the specified evidence and requests.</summary>
      <param name="evidence">The evidence set used to evaluate policy.</param>
      <param name="reqdPset">The required permissions the code needs to run.</param>
      <param name="optPset">The optional permissions that will be used if granted, but aren&amp;#39;t required for the code to run.</param>
      <param name="denyPset">The denied permissions that must never be granted to the code even if policy otherwise permits it.</param>
      <param name="denied">An output parameter that contains the set of permissions not granted.</param>
      <returns>The set of permissions that would be granted by the security system.</returns>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
      <exception cref="T:System.Security.Policy.PolicyException">Policy fails to grant the minimum required permissions specified by the <paramref name="reqdPset">reqdPset</paramref> parameter.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)">
      <summary>Gets a collection of code groups matching the specified evidence.</summary>
      <param name="evidence">The evidence set against which the policy is evaluated.</param>
      <returns>An enumeration of the set of code groups matching the evidence.</returns>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)">
      <summary>Determines which permissions to grant to code based on the specified evidence, excluding the policy for the <see cref="T:System.AppDomain"></see> level.</summary>
      <param name="evidence">The evidence set used to evaluate policy.</param>
      <returns>The set of permissions that can be granted by the security system.</returns>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.SavePolicy">
      <summary>Saves the modified security policy state.</summary>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
      <exception cref="T:System.Security.SecurityException">The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy"></see>.</exception>
    </member>
    <member name="M:System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)">
      <summary>Saves a modified security policy level loaded with <see cref="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)"></see>.</summary>
      <param name="level">The policy level object to be saved.</param>
      <exception cref="T:System.Security.SecurityException">The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy"></see>.</exception>
      <exception cref="T:System.NotSupportedException">This method uses code access security (CAS) policy, which is obsolete in the .NET Framework 4. To enable CAS policy for compatibility with earlier versions of the .NET Framework, use the &amp;lt;legacyCasPolicy&amp;gt; element.</exception>
    </member>
    <member name="P:System.Security.SecurityManager.SecurityEnabled">
      <summary>Gets or sets a value indicating whether security is enabled.</summary>
      <returns>true if security is enabled; otherwise, false.</returns>
      <exception cref="T:System.Security.SecurityException">The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy"></see>.</exception>
    </member>
    <member name="T:System.Security.SecurityState">
      <summary>Provides a base class for requesting the security status of an action from the <see cref="T:System.AppDomainManager"></see> object.</summary>
    </member>
    <member name="M:System.Security.SecurityState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityState"></see> class.</summary>
    </member>
    <member name="M:System.Security.SecurityState.EnsureState">
      <summary>When overridden in a derived class, ensures that the state that is represented by <see cref="T:System.Security.SecurityState"></see> is available on the host.</summary>
    </member>
    <member name="M:System.Security.SecurityState.IsStateAvailable">
      <summary>Gets a value that indicates whether the state for this implementation of the <see cref="T:System.Security.SecurityState"></see> class is available on the current host.</summary>
      <returns>true if the state is available; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.SecurityZone">
      <summary>Defines the integer values corresponding to security zones used by security policy.</summary>
    </member>
    <member name="F:System.Security.SecurityZone.Internet">
      <summary>The Internet zone is used for the Web sites on the Internet that do not belong to another zone.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.SecurityZone.Intranet">
      <summary>The local intranet zone is used for content located on a company&amp;#39;s intranet. Because the servers and information would be within a company&amp;#39;s firewall, a user or company could assign a higher trust level to the content on the intranet.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.SecurityZone.MyComputer">
      <summary>The local computer zone is an implicit zone used for content that exists on the user&amp;#39;s computer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.SecurityZone.NoZone">
      <summary>No zone is specified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.SecurityZone.Trusted">
      <summary>The trusted sites zone is used for content located on Web sites considered more reputable or trustworthy than other sites on the Internet. Users can use this zone to assign a higher trust level to these sites to minimize the number of authentication requests. The URLs of these trusted Web sites need to be mapped into this zone by the user.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.SecurityZone.Untrusted">
      <summary>The restricted sites zone is used for Web sites with content that could cause, or could have caused, problems when downloaded. The URLs of these untrusted Web sites need to be mapped into this zone by the user.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Data.OleDb.OleDbPermission">
      <summary>Enables the .NET Framework Data Provider for OLE DB to help make sure that a user has a security level sufficient to access an OLE DB data source.</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbPermission"></see> class.</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbPermission"></see> class.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbPermission"></see> class.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <param name="allowBlankPassword">Indicates whether a blank password is allowed.</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.Copy">
      <summary>Returns the <see cref="T:System.Data.OleDb.OleDbPermission"></see> as an <see cref="T:System.Security.IPermission"></see>.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbPermission.Provider">
      <summary>This property has been marked as obsolete. Setting this property will have no effect.</summary>
      <returns>This property has been marked as obsolete. Setting this property will have no effect.</returns>
    </member>
    <member name="T:System.Data.OleDb.OleDbPermissionAttribute">
      <summary>Associates a security action with a custom security attribute.</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbPermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values representing an action that can be performed by using declarative security.</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermissionAttribute.CreatePermission">
      <summary>Returns an <see cref="T:System.Data.OleDb.OleDbPermission"></see> object that is configured according to the attribute properties.</summary>
      <returns>An <see cref="System.Data.OleDb.OleDbPermission"></see> object.</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbPermissionAttribute.Provider">
      <summary>Gets or sets a comma-delimited string that contains a list of supported providers.</summary>
      <returns>A comma-delimited list of providers allowed by the security policy.</returns>
    </member>
    <member name="T:System.Security.Permissions.ReflectionPermissionFlag">
      <summary>Specifies the permitted use of the <see cref="N:System.Reflection"></see> and <see cref="N:System.Reflection.Emit"></see> namespaces.</summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags">
      <summary>TypeInformation , MemberAccess, and ReflectionEmit are set. <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags"></see> does not include <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess">
      <summary>Invocation operations on all members are allowed, regardless of grant set. If this flag is not set, invocation operations are allowed only on visible members.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags">
      <summary>Enumeration of types and members is allowed. Invocation operations are allowed on visible types and members.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit">
      <summary>Emitting debug symbols is allowed. Beginning with the .NET Framework 2.0 Service Pack 1, this flag is no longer required to emit code.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess">
      <summary>Restricted member access is provided for partially trusted code. Partially trusted code can access nonpublic types and members, but only if the grant set of the partially trusted code includes all permissions in the grant set of the assembly that contains the nonpublic types and members being accessed. This flag is new in the .NET Framework 2.0 SP1.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.TypeInformation">
      <summary>This flag is obsolete. No flags are necessary to enumerate types and members and to examine their metadata. Use <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags"></see> instead.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.RegistryPermission">
      <summary>Controls the ability to access registry variables. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.RegistryPermission"></see> class with either fully restricted or unrestricted permission as specified.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.RegistryPermission"></see> class with the specified access to the specified registry variables.</summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess"></see> values.</param>
      <param name="pathList">A list of registry variables (semicolon-separated) to which access is granted.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"></see>.  
 -or-  
 The <paramref name="pathList">pathList</paramref> parameter is not a valid string.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.RegistryPermission"></see> class with the specified access to the specified registry variables and the specified access rights to registry control information.</summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess"></see> values.</param>
      <param name="control">A bitwise combination of the <see cref="T:System.Security.AccessControl.AccessControlActions"></see> values.</param>
      <param name="pathList">A list of registry variables (semicolon-separated) to which access is granted.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"></see>.  
 -or-  
 The <paramref name="pathList">pathList</paramref> parameter is not a valid string.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)">
      <summary>Adds access for the specified registry variables to the existing state of the permission.</summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess"></see> values.</param>
      <param name="pathList">A list of registry variables (semicolon-separated).</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"></see>.  
 -or-  
 The <paramref name="pathList">pathList</paramref> parameter is not a valid string.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)">
      <summary>Adds access for the specified registry variables to the existing state of the permission, specifying registry permission access and access control actions.</summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess"></see> values.</param>
      <param name="control">One of the <see cref="T:System.Security.AccessControl.AccessControlActions"></see> values.</param>
      <param name="pathList">A list of registry variables (separated by semicolons).</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"></see>.  
 -or-  
 The <paramref name="pathList">pathList</paramref> parameter is not a valid string.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)">
      <summary>Gets paths for all registry variables with the specified <see cref="T:System.Security.Permissions.RegistryPermissionAccess"></see>.</summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess"></see> values that represents a single type of registry variable access.</param>
      <returns>A list of the registry variables (semicolon-separated) with the specified <see cref="System.Security.Permissions.RegistryPermissionAccess"></see>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="access">access</paramref> is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"></see>.  
 -or-  
 <paramref name="access">access</paramref> is <see cref="System.Security.Permissions.RegistryPermissionAccess.AllAccess"></see>, which represents more than one type of registry variable access, or <see cref="System.Security.Permissions.RegistryPermissionAccess.NoAccess"></see>, which does not represent any type of registry variable access.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)">
      <summary>Sets new access for the specified registry variable names to the existing state of the permission.</summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess"></see> values.</param>
      <param name="pathList">A list of registry variables (semicolon-separated).</param>
      <exception cref="T:System.ArgumentException">The <paramref name="access">access</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"></see>.  
 -or-  
 The <paramref name="pathList">pathList</paramref> parameter is not a valid string.</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="other">other</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.RegistryPermissionAccess">
      <summary>Specifies the permitted access to registry keys and values.</summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.AllAccess">
      <summary><see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create"></see>, <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"></see>, and <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write"></see> access to registry variables. <see cref="F:System.Security.Permissions.RegistryPermissionAccess.AllAccess"></see> represents multiple <see cref="T:System.Security.Permissions.RegistryPermissionAccess"></see> values and causes an <see cref="T:System.ArgumentException"></see> when used as the <paramref name="access">access</paramref> parameter for the <see cref="M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)"></see> method, which expects a single value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.Create">
      <summary>Create access to registry variables.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.NoAccess">
      <summary>No access to registry variables. <see cref="F:System.Security.Permissions.RegistryPermissionAccess.NoAccess"></see> represents no valid <see cref="T:System.Security.Permissions.RegistryPermissionAccess"></see> values and causes an <see cref="T:System.ArgumentException"></see> when used as the parameter for <see cref="M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)"></see>, which expects a single value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.Read">
      <summary>Read access to registry variables.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.Write">
      <summary>Write access to registry variables.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.RegistryPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.RegistryPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.RegistryPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="action">action</paramref> parameter is not a valid <see cref="System.Security.Permissions.SecurityAction"></see>.</exception>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.All">
      <summary>Gets or sets full access for the specified registry keys.</summary>
      <returns>A semicolon-separated list of registry key paths, for full access.</returns>
      <exception cref="T:System.NotSupportedException">The get accessor is called; it is only provided for C# compiler compatibility.</exception>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl">
      <summary>Gets or sets change access control for the specified registry keys.</summary>
      <returns>A semicolon-separated list of registry key paths, for change access control. .</returns>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.Create">
      <summary>Gets or sets create-level access for the specified registry keys.</summary>
      <returns>A semicolon-separated list of registry key paths, for create-level access.</returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.RegistryPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.RegistryPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.Read">
      <summary>Gets or sets read access for the specified registry keys.</summary>
      <returns>A semicolon-separated list of registry key paths, for read access.</returns>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl">
      <summary>Gets or sets view access control for the specified registry keys.</summary>
      <returns>A semicolon-separated list of registry key paths, for view access control.</returns>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify">
      <summary>Gets or sets a specified set of registry keys that can be viewed and modified.</summary>
      <returns>A semicolon-separated list of registry key paths, for create, read, and write access.</returns>
      <exception cref="T:System.NotSupportedException">The get accessor is called; it is only provided for C# compiler compatibility.</exception>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.Write">
      <summary>Gets or sets write access for the specified registry keys.</summary>
      <returns>A semicolon-separated list of registry key paths, for write access.</returns>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBase">
      <summary>Allows control of code access security permissions.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBase"></see> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBase"></see> class with the specified level of access to resources at creation.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>Adds a permission entry to the permission.</summary>
      <param name="entry">The <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> to add.</param>
      <exception cref="T:System.ArgumentNullException">The specified <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"></see> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The number of elements in the <see cref="System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath"></see> property is not equal to the number of elements in the <see cref="System.Security.Permissions.ResourcePermissionBase.TagNames"></see> property.  
 -or-  
 The <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"></see> is already included in the permission.</exception>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Any">
      <summary>Specifies the character to be used to represent the any wildcard character.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Clear">
      <summary>Clears the permission of the added permission entries.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Copy">
      <summary>Creates and returns an identical copy of the current permission object.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="securityElement">securityElement</paramref> parameter is not a valid permission element.  
 -or-  
 The version number of the <paramref name="securityElement">securityElement</paramref> parameter is not supported.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="securityElement">securityElement</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries">
      <summary>Returns an array of the <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> objects added to this permission.</summary>
      <returns>An array of <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"></see> objects that were added to this permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission object that is the intersection of the current permission object and a target permission object.</summary>
      <param name="target">A permission object of the same type as the current permission object.</param>
      <returns>A new permission object that represents the intersection of the current object and the specified target. This object is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The target permission object is not of the same type as the current permission object.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission object is a subset of the specified permission.</summary>
      <param name="target">A permission object that is to be tested for the subset relationship.</param>
      <returns>true if the current permission object is a subset of the specified permission object; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsUnrestricted">
      <summary>Gets a value indicating whether the permission is unrestricted.</summary>
      <returns>true if permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Local">
      <summary>Specifies the character to be used to represent a local reference.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.PermissionAccessType">
      <summary>Gets or sets an enumeration value that describes the types of access that you are giving the resource.</summary>
      <returns>An enumeration value that is derived from <see cref="System.Type"></see> and describes the types of access that you are giving the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is null.</exception>
      <exception cref="T:System.ArgumentException">The property value is not an enumeration value.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>Removes a permission entry from the permission.</summary>
      <param name="entry">The <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> to remove.</param>
      <exception cref="T:System.ArgumentNullException">The specified <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"></see> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The number of elements in the <see cref="System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath"></see> property is not equal to the number of elements in the <see cref="System.Security.Permissions.ResourcePermissionBase.TagNames"></see> property.  
 -or-  
 The <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"></see> is not in the permission.</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.TagNames">
      <summary>Gets or sets an array of strings that identify the resource you are protecting.</summary>
      <returns>An array of strings that identify the resource you are trying to protect.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is null.</exception>
      <exception cref="T:System.ArgumentException">The length of the array is 0.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.ToXml">
      <summary>Creates and returns an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)">
      <summary>Creates a permission object that combines the current permission object and the target permission object.</summary>
      <param name="target">A permission object to combine with the current permission object. It must be of the same type as the current permission object.</param>
      <returns>A new permission object that represents the union of the current permission object and the specified permission object.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> permission object is not of the same type as the current permission object.</exception>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBaseEntry">
      <summary>Defines the smallest unit of a code access security permission set.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor(System.Int32,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> class with the specified permission access and permission access path.</summary>
      <param name="permissionAccess">The integer representation of the permission access level enumeration value. The <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess"></see> property is set to this value.</param>
      <param name="permissionAccessPath">The array of strings that identify the resource you are protecting. The <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath"></see> property is set to this value.</param>
      <exception cref="T:System.ArgumentNullException">The specified <paramref name="permissionAccessPath">permissionAccessPath</paramref> is null.</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess">
      <summary>Gets an integer representation of the access level enumeration value.</summary>
      <returns>The access level enumeration value.</returns>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath">
      <summary>Gets an array of strings that identify the resource you are protecting.</summary>
      <returns>An array of strings that identify the resource you are protecting.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermission">
      <summary>Describes a set of security permissions applied to code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermission"></see> class with either restricted or unrestricted permission as specified.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermission"></see> class with the specified initial set state of the flags.</summary>
      <param name="flag">The initial state of the permission, represented by a bitwise OR combination of any permission bits defined by <see cref="T:System.Security.Permissions.SecurityPermissionFlag"></see>.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="flag">flag</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.SecurityPermissionFlag"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermission.Flags">
      <summary>Gets or sets the security permission flags.</summary>
      <returns>The state of the current permission, represented by a bitwise OR combination of any permission bits defined by <see cref="System.Security.Permissions.SecurityPermissionFlag"></see>.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="System.Security.Permissions.SecurityPermissionFlag"></see> for the valid values.</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not supported.</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission object that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.SiteIdentityPermission">
      <summary>Defines the identity permission for the Web site from which the code originates. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.SiteIdentityPermission"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.SiteIdentityPermission"></see> class to represent the specified site identity.</summary>
      <param name="site">The site name or wildcard expression.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="site">site</paramref> parameter is not a valid string, or does not match a valid wildcard site name.</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="P:System.Security.Permissions.SiteIdentityPermission.Site">
      <summary>Gets or sets the current site.</summary>
      <returns>The current site.</returns>
      <exception cref="T:System.NotSupportedException">The site identity cannot be retrieved because it has an ambiguous identity.</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.  
 -or-  
 The permissions are not equal and one is not a subset of the other.</exception>
    </member>
    <member name="T:System.Security.Permissions.SiteIdentityPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.SiteIdentityPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.SiteIdentityPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of <see cref="T:System.Security.Permissions.SiteIdentityPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.SiteIdentityPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.SiteIdentityPermissionAttribute.Site">
      <summary>Gets or sets the site name of the calling code.</summary>
      <returns>The site name to compare against the site name specified by the security provider.</returns>
    </member>
    <member name="T:System.Security.Permissions.StorePermission">
      <summary>Controls access to stores containing X.509 certificates. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StorePermission"></see> class with either fully restricted or unrestricted permission state.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid <see cref="System.Security.Permissions.PermissionState"></see> value.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.StorePermissionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StorePermission"></see> class with the specified access.</summary>
      <param name="flag"></param>
      <exception cref="T:System.ArgumentException"><paramref name="flags">flags</paramref> is not a valid combination of <see cref="System.Security.Permissions.StorePermissionFlags"></see> values.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermission.Flags">
      <summary>Gets or sets the type of <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see> access allowed by the current permission.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.StorePermissionFlags"></see> values.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="System.Security.Permissions.StorePermissionFlags"></see> for the valid values.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement"></param>
      <exception cref="T:System.ArgumentNullException"><paramref name="e">e</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="e">e</paramref> is not a valid permission element.  
 -or-  
 The version number in <paramref name="e">e</paramref> is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> s not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission to test for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> that contains an XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.StorePermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StorePermissionAttribute"></see> class with the specified security action.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.AddToStore">
      <summary>Gets or sets a value indicating whether the code is permitted to add to a store.</summary>
      <returns>true if the ability to add to a store is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.StorePermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.StorePermission"></see> that corresponds to the attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.CreateStore">
      <summary>Gets or sets a value indicating whether the code is permitted to create a store.</summary>
      <returns>true if the ability to create a store is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.DeleteStore">
      <summary>Gets or sets a value indicating whether the code is permitted to delete a store.</summary>
      <returns>true if the ability to delete a store is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateCertificates">
      <summary>Gets or sets a value indicating whether the code is permitted to enumerate the certificates in a store.</summary>
      <returns>true if the ability to enumerate certificates is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateStores">
      <summary>Gets or sets a value indicating whether the code is permitted to enumerate stores.</summary>
      <returns>true if the ability to enumerate stores is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.Flags">
      <summary>Gets or sets the store permissions.</summary>
      <returns>A bitwise combination of the <see cref="System.Security.Permissions.StorePermissionFlags"></see> values. The default is <see cref="System.Security.Permissions.StorePermissionFlags.NoFlags"></see>.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.OpenStore">
      <summary>Gets or sets a value indicating whether the code is permitted to open a store.</summary>
      <returns>true if the ability to open a store is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.RemoveFromStore">
      <summary>Gets or sets a value indicating whether the code is permitted to remove a certificate from a store.</summary>
      <returns>true if the ability to remove a certificate from a store is allowed; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionFlags">
      <summary>Specifies the permitted access to X.509 certificate stores.</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AddToStore">
      <summary>The ability to add a certificate to a store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AllFlags">
      <summary>The ability to perform all certificate and store operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.CreateStore">
      <summary>The ability to create a new store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.DeleteStore">
      <summary>The ability to delete a store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates">
      <summary>The ability to enumerate the certificates in a store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateStores">
      <summary>The ability to enumerate the stores on a computer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.NoFlags">
      <summary>Permission is not given to perform any certificate or store operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.OpenStore">
      <summary>The ability to open a store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.RemoveFromStore">
      <summary>The ability to remove a certificate from a store.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.StrongNameIdentityPermission">
      <summary>Defines the identity permission for strong names. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StrongNameIdentityPermission"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StrongNameIdentityPermission"></see> class for the specified strong name identity.</summary>
      <param name="blob">The public key defining the strong name identity namespace.</param>
      <param name="name">The simple name part of the strong name identity. This corresponds to the name of the assembly.</param>
      <param name="version">The version number of the identity.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="blob">blob</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter is an empty string (&amp;quot;&amp;quot;).</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="e">e</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission, or null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermission.Name">
      <summary>Gets or sets the simple name portion of the strong name identity.</summary>
      <returns>The simple name of the identity.</returns>
      <exception cref="T:System.ArgumentException">The value is an empty string (&amp;quot;&amp;quot;).</exception>
      <exception cref="T:System.NotSupportedException">The property value cannot be retrieved because it contains an ambiguous identity.</exception>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermission.PublicKey">
      <summary>Gets or sets the public key blob that defines the strong name identity namespace.</summary>
      <returns>A <see cref="System.Security.Permissions.StrongNamePublicKeyBlob"></see> that contains the public key of the identity, or null if there is no key.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is set to null.</exception>
      <exception cref="T:System.NotSupportedException">The property value cannot be retrieved because it contains an ambiguous identity.</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.  
 -or-  
 The two permissions are not equal and one is a subset of the other.</exception>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermission.Version">
      <summary>Gets or sets the version number of the identity.</summary>
      <returns>The version of the identity.</returns>
      <exception cref="T:System.NotSupportedException">The property value cannot be retrieved because it contains an ambiguous identity.</exception>
    </member>
    <member name="T:System.Security.Permissions.StrongNameIdentityPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.StrongNameIdentityPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StrongNameIdentityPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.StrongNameIdentityPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.StrongNameIdentityPermission"></see> that corresponds to this attribute.</returns>
      <exception cref="T:System.ArgumentException">The method failed because the key is null.</exception>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.Name">
      <summary>Gets or sets the name of the strong name identity.</summary>
      <returns>A name to compare against the name specified by the security provider.</returns>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.PublicKey">
      <summary>Gets or sets the public key value of the strong name identity expressed as a hexadecimal string.</summary>
      <returns>The public key value of the strong name identity expressed as a hexadecimal string.</returns>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.Version">
      <summary>Gets or sets the version of the strong name identity.</summary>
      <returns>The version number of the strong name identity.</returns>
    </member>
    <member name="T:System.Security.Permissions.StrongNamePublicKeyBlob">
      <summary>Represents the public key information (called a blob) for a strong name. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob"></see> class with raw bytes of the public key blob.</summary>
      <param name="publicKey">The array of bytes representing the raw public key data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="publicKey">publicKey</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.Equals(System.Object)">
      <summary>Gets or sets a value indicating whether the current public key blob is equal to the specified public key blob.</summary>
      <param name="obj">An object containing a public key blob.</param>
      <returns>true if the public key blob of the current object is equal to the public key blob of the <paramref name="obj">obj</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.GetHashCode">
      <summary>Returns a hash code based on the public key.</summary>
      <returns>The hash code based on the public key.</returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.ToString">
      <summary>Creates and returns a string representation of the public key blob.</summary>
      <returns>A hexadecimal version of the public key blob.</returns>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermission">
      <summary>Defines partial-trust access to the <see cref="T:System.ComponentModel.TypeDescriptor"></see> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.TypeDescriptorPermission"></see> class.</summary>
      <param name="state">The <see cref="T:System.Security.Permissions.PermissionState"></see> to request. Only <see cref="F:System.Security.Permissions.PermissionState.Unrestricted"></see> and <see cref="F:System.Security.Permissions.PermissionState.None"></see> are valid.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid permission state. Only <see cref="System.Security.Permissions.PermissionState.Unrestricted"></see> and <see cref="System.Security.Permissions.PermissionState.None"></see> are valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.#ctor(System.Security.Permissions.TypeDescriptorPermissionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.TypeDescriptorPermission"></see> class with the specified permission flags.</summary>
      <param name="flag">The permission flags to request.</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Copy">
      <summary>When implemented by a derived class, creates and returns an identical copy of the current permission object.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermission.Flags">
      <summary>Gets or sets the <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags"></see> for the type descriptor.</summary>
      <returns>The <see cref="System.Security.Permissions.TypeDescriptorPermissionFlags"></see> for the type descriptor.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.FromXml(System.Security.SecurityElement)">
      <summary>When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Intersect(System.Security.IPermission)">
      <summary>When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.IsUnrestricted">
      <summary>Gets a value that indicates whether the type descriptor may be called from partially trusted code.</summary>
      <returns>true if the <see cref="System.Security.Permissions.TypeDescriptorPermission.Flags"></see> property is set to <see cref="System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.ToXml">
      <summary>When overridden in a derived class, creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Union(System.Security.IPermission)">
      <summary>When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermissionAttribute">
      <summary>Determines the permission flags that apply to a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.TypeDescriptorPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermissionAttribute.CreatePermission">
      <summary>When overridden in a derived class, creates a permission object that can then be serialized into binary form and persistently stored along with the <see cref="T:System.Security.Permissions.SecurityAction"></see> in an assembly&amp;#39;s metadata.</summary>
      <returns>A serializable permission object.</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermissionAttribute.Flags">
      <summary>Gets or sets the <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags"></see> for the <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <returns>The <see cref="System.Security.Permissions.TypeDescriptorPermissionFlags"></see> for the <see cref="System.ComponentModel.TypeDescriptor"></see>.</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermissionAttribute.RestrictedRegistrationAccess">
      <summary>Gets or sets a value that indicates whether the type descriptor can be accessed from partial trust.</summary>
      <returns>true if the type descriptor can be accessed from partial trust; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermissionFlags">
      <summary>Defines permission settings for type descriptors.</summary>
    </member>
    <member name="F:System.Security.Permissions.TypeDescriptorPermissionFlags.NoFlags">
      <summary>No permission flags are set on the type descriptor.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess">
      <summary>The type descriptor may be called from partially trusted code.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.UIPermission">
      <summary>Controls the permissions related to user interfaces and the Clipboard. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermission"></see> class with either fully restricted or unrestricted access, as specified.</summary>
      <param name="state">One of the enumeration values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.UIPermissionClipboard)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermission"></see> class with the permissions for the Clipboard, and no access to windows.</summary>
      <param name="clipboardFlag">One of the enumeration values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="clipboardFlag">clipboardFlag</paramref> parameter is not a valid <see cref="System.Security.Permissions.UIPermissionClipboard"></see> value.</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.UIPermissionWindow)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermission"></see> class with the permissions for windows, and no access to the Clipboard.</summary>
      <param name="windowFlag">One of the enumeration values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="windowFlag">windowFlag</paramref> parameter is not a valid <see cref="System.Security.Permissions.UIPermissionWindow"></see> value.</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.UIPermissionWindow,System.Security.Permissions.UIPermissionClipboard)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermission"></see> class with the specified permissions for windows and the Clipboard.</summary>
      <param name="windowFlag">One of the enumeration values.</param>
      <param name="clipboardFlag">One of the enumeration values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="windowFlag">windowFlag</paramref> parameter is not a valid <see cref="System.Security.Permissions.UIPermissionWindow"></see> value.  
 -or-  
 The <paramref name="clipboardFlag">clipboardFlag</paramref> parameter is not a valid <see cref="System.Security.Permissions.UIPermissionClipboard"></see> value.</exception>
    </member>
    <member name="P:System.Security.Permissions.UIPermission.Clipboard">
      <summary>Gets or sets the Clipboard access represented by the permission.</summary>
      <returns>One of the <see cref="System.Security.Permissions.UIPermissionClipboard"></see> values.</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding used to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission to test for the subset relationship. This permission must be the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="P:System.Security.Permissions.UIPermission.Window">
      <summary>Gets or sets the window access represented by the permission.</summary>
      <returns>One of the <see cref="System.Security.Permissions.UIPermissionWindow"></see> values.</returns>
    </member>
    <member name="T:System.Security.Permissions.UIPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.UIPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.UIPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Security.Permissions.UIPermissionAttribute.Clipboard">
      <summary>Gets or sets the type of access to the clipboard that is permitted.</summary>
      <returns>One of the <see cref="System.Security.Permissions.UIPermissionClipboard"></see> values.</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.UIPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.UIPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.UIPermissionAttribute.Window">
      <summary>Gets or sets the type of access to the window resources that is permitted.</summary>
      <returns>One of the <see cref="System.Security.Permissions.UIPermissionWindow"></see> values.</returns>
    </member>
    <member name="T:System.Security.Permissions.UIPermissionClipboard">
      <summary>Specifies the type of clipboard access that is allowed to the calling code.</summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionClipboard.AllClipboard">
      <summary>Clipboard can be used without restriction.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionClipboard.NoClipboard">
      <summary>Clipboard cannot be used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionClipboard.OwnClipboard">
      <summary>The ability to put data on the clipboard (Copy, Cut) is unrestricted. Intrinsic controls that accept Paste, such as text box, can accept the clipboard data, but user controls that must programmatically read the clipboard cannot.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.UIPermissionWindow">
      <summary>Specifies the type of windows that code is allowed to use.</summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.AllWindows">
      <summary>Users can use all windows and user input events without restriction.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.NoWindows">
      <summary>Users cannot use any windows or user interface events. No user interface can be used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows">
      <summary>Users can only use <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows"></see> for drawing, and can only use user input events for user interface within that subwindow. Examples of <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows"></see> are a <see cref="T:System.Windows.Forms.MessageBox"></see>, common dialog controls, and a control displayed within a browser.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows">
      <summary>Users can only use <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows"></see> and <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows"></see> for drawing, and can only use user input events for the user interface within those top-level windows and subwindows.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.UrlIdentityPermission">
      <summary>Defines the identity permission for the URL from which the code originates. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.UrlIdentityPermission"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.UrlIdentityPermission"></see> class to represent the URL identity described by <paramref name="site">site</paramref>.</summary>
      <param name="site">A URL or wildcard expression.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="site">site</paramref> parameter is null.</exception>
      <exception cref="T:System.FormatException">The length of the <paramref name="site">site</paramref> parameter is zero.</exception>
      <exception cref="T:System.ArgumentException">The URL, directory, or site portion of the <paramref name="site">site</paramref> parameter is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.  
 -or-  
 The Url property is not a valid URL.</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.  
 -or-  
 The Url property is not a valid URL.</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.  
 -or-  
 The <see cref="System.Security.Permissions.UrlIdentityPermission.Url"></see> property is not a valid URL.  
 -or-  
 The two permissions are not equal and one is not a subset of the other.</exception>
    </member>
    <member name="P:System.Security.Permissions.UrlIdentityPermission.Url">
      <summary>Gets or sets a URL representing the identity of Internet code.</summary>
      <returns>A URL representing the identity of Internet code.</returns>
      <exception cref="T:System.NotSupportedException">The URL cannot be retrieved because it has an ambiguous identity.</exception>
    </member>
    <member name="T:System.Security.Permissions.UrlIdentityPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.UrlIdentityPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.UrlIdentityPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.UrlIdentityPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.UrlIdentityPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.UrlIdentityPermissionAttribute.Url">
      <summary>Gets or sets the full URL of the calling code.</summary>
      <returns>The URL to match with the URL specified by the host.</returns>
    </member>
    <member name="T:System.Security.Permissions.ZoneIdentityPermission">
      <summary>Defines the identity permission for the zone from which the code originates. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ZoneIdentityPermission"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.#ctor(System.Security.SecurityZone)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ZoneIdentityPermission"></see> class to represent the specified zone identity.</summary>
      <param name="zone">The zone identifier.</param>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="esd">esd</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="esd">esd</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="esd">esd</paramref> parameter&amp;#39;s version number is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null, this permission does not represent the <see cref="System.Security.SecurityZone.NoZone"></see> security zone, and the specified permission is not equal to the current permission.</exception>
    </member>
    <member name="P:System.Security.Permissions.ZoneIdentityPermission.SecurityZone">
      <summary>Gets or sets the zone represented by the current <see cref="T:System.Security.Permissions.ZoneIdentityPermission"></see>.</summary>
      <returns>One of the <see cref="System.Security.SecurityZone"></see> values.</returns>
      <exception cref="T:System.ArgumentException">The parameter value is not a valid value of <see cref="System.Security.SecurityZone"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.  
 -or-  
 The two permissions are not equal and the current permission does not represent the <see cref="System.Security.SecurityZone.NoZone"></see> security zone.</exception>
    </member>
    <member name="T:System.Security.Permissions.ZoneIdentityPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.ZoneIdentityPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ZoneIdentityPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.ZoneIdentityPermission"></see>.</summary>
      <returns>A <see cref="System.Security.Permissions.ZoneIdentityPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone">
      <summary>Gets or sets membership in the content zone specified by the property value.</summary>
      <returns>One of the <see cref="System.Security.SecurityZone"></see> values.</returns>
    </member>
    <member name="T:System.Security.PermissionSet">
      <summary>Represents a collection that can contain many different types of permissions.</summary>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.PermissionSet"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the enumeration values that specifies the permission set&amp;#39;s access to resources.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.PermissionSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.PermissionSet"></see> class with initial values taken from the <paramref name="permSet">permSet</paramref> parameter.</summary>
      <param name="permSet">The set from which to take the value of the new <see cref="T:System.Security.PermissionSet"></see>, or null to create an empty <see cref="T:System.Security.PermissionSet"></see>.</param>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermission(System.Security.IPermission)">
      <summary>Adds a specified permission to the <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <param name="perm">The permission to add.</param>
      <returns>The union of the permission added and any permission of the same type that already exists in the <see cref="System.Security.PermissionSet"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The method is called from a <see cref="System.Security.ReadOnlyPermissionSet"></see>.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)">
      <summary>Adds a specified permission to the <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <param name="perm">The permission to add.</param>
      <returns>The union of the permission added and any permission of the same type that already exists in the <see cref="System.Security.PermissionSet"></see>, or null if <paramref name="perm">perm</paramref> is null.</returns>
      <exception cref="T:System.InvalidOperationException">The method is called from a <see cref="System.Security.ReadOnlyPermissionSet"></see>.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Assert">
      <summary>Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using <see cref="M:System.Security.PermissionSet.Assert"></see> can create security vulnerabilities.</summary>
      <exception cref="T:System.Security.SecurityException">The <see cref="System.Security.PermissionSet"></see> instance asserted has not been granted to the asserting code.  
 -or-  
 There is already an active <see cref="System.Security.PermissionSet.Assert"></see> for the current frame.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.ContainsNonCodeAccessPermissions">
      <summary>Gets a value indicating whether the <see cref="T:System.Security.PermissionSet"></see> contains permissions that are not derived from <see cref="T:System.Security.CodeAccessPermission"></see>.</summary>
      <returns>true if the <see cref="System.Security.PermissionSet"></see> contains permissions that are not derived from <see cref="System.Security.CodeAccessPermission"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)">
      <summary>Converts an encoded <see cref="T:System.Security.PermissionSet"></see> from one XML encoding format to another XML encoding format.</summary>
      <param name="inFormat">A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are &amp;quot;XMLASCII&amp;quot; or &amp;quot;XML&amp;quot;, &amp;quot;XMLUNICODE&amp;quot;, and &amp;quot;BINARY&amp;quot;.</param>
      <param name="inData">An XML-encoded permission set.</param>
      <param name="outFormat">A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are &amp;quot;XMLASCII&amp;quot; or &amp;quot;XML&amp;quot;, &amp;quot;XMLUNICODE&amp;quot;, and &amp;quot;BINARY&amp;quot;.</param>
      <returns>An encrypted permission set with the specified output format.</returns>
      <exception cref="T:System.NotImplementedException">In all cases.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Copy">
      <summary>Creates a copy of the <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <returns>A copy of the <see cref="System.Security.PermissionSet"></see>.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.CopyTo(System.Array,System.Int32)">
      <summary>Copies the permission objects of the set to the indicated location in an <see cref="T:System.Array"></see>.</summary>
      <param name="array">The target array to which to copy.</param>
      <param name="index">The starting position in the array to begin copying (zero based).</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="array">array</paramref> parameter has more than one dimension.</exception>
      <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index">index</paramref> parameter is out of the range of the <paramref name="array">array</paramref> parameter.</exception>
    </member>
    <member name="P:System.Security.PermissionSet.Count">
      <summary>Gets the number of permission objects contained in the permission set.</summary>
      <returns>The number of permission objects contained in the <see cref="System.Security.PermissionSet"></see>.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Demand">
      <summary>Forces a <see cref="T:System.Security.SecurityException"></see> at run time if all callers higher in the call stack have not been granted the permissions specified by the current instance.</summary>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have the permission demanded.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Deny">
      <summary>Causes any <see cref="M:System.Security.PermissionSet.Demand"></see> that passes through the calling code for a permission that has an intersection with a permission of a type contained in the current <see cref="T:System.Security.PermissionSet"></see> to fail.</summary>
      <exception cref="T:System.Security.SecurityException">A previous call to <see cref="System.Security.PermissionSet.Deny"></see> has already restricted the permissions for the current stack frame.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Security.PermissionSet"></see> or <see cref="T:System.Security.NamedPermissionSet"></see> object is equal to the current <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <param name="obj">The object to compare with the current <see cref="T:System.Security.PermissionSet"></see>.</param>
      <returns>true if the specified object is equal to the current <see cref="System.Security.PermissionSet"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="et">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="et">et</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="et">et</paramref> parameter is not a valid permission element.  
 -or-  
 The <paramref name="et">et</paramref> parameter&amp;#39;s version number is not supported.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumerator">
      <summary>Returns an enumerator for the permissions of the set.</summary>
      <returns>An enumerator object for the permissions of the set.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumeratorImpl">
      <summary>Returns an enumerator for the permissions of the set.</summary>
      <returns>An enumerator object for the permissions of the set.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Security.PermissionSet"></see> object that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="System.Security.PermissionSet"></see> object.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermission(System.Type)">
      <summary>Gets a permission object of the specified type, if it exists in the set.</summary>
      <param name="permClass">The type of the desired permission object.</param>
      <returns>A copy of the permission object of the type specified by the <paramref name="permClass">permClass</paramref> parameter contained in the <see cref="System.Security.PermissionSet"></see>, or null if none exists.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermissionImpl(System.Type)">
      <summary>Gets a permission object of the specified type, if it exists in the set.</summary>
      <param name="permClass">The type of the permission object.</param>
      <returns>A copy of the permission object, of the type specified by the <paramref name="permClass">permClass</paramref> parameter, contained in the <see cref="System.Security.PermissionSet"></see>, or null if none exists.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Intersect(System.Security.PermissionSet)">
      <summary>Creates and returns a permission set that is the intersection of the current <see cref="T:System.Security.PermissionSet"></see> and the specified <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <param name="other">A permission set to intersect with the current <see cref="T:System.Security.PermissionSet"></see>.</param>
      <returns>A new permission set that represents the intersection of the current <see cref="System.Security.PermissionSet"></see> and the specified target. This object is null if the intersection is empty.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsEmpty">
      <summary>Gets a value indicating whether the <see cref="T:System.Security.PermissionSet"></see> is empty.</summary>
      <returns>true if the <see cref="System.Security.PermissionSet"></see> is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>Always false.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)">
      <summary>Determines whether the current <see cref="T:System.Security.PermissionSet"></see> is a subset of the specified <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <param name="target">The permission set to test for the subset relationship. This must be either a <see cref="T:System.Security.PermissionSet"></see> or a <see cref="T:System.Security.NamedPermissionSet"></see>.</param>
      <returns>true if the current <see cref="System.Security.PermissionSet"></see> is a subset of the <paramref name="target">target</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsSynchronized">
      <summary>Gets a value indicating whether the collection is guaranteed to be thread safe.</summary>
      <returns>Always false.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsUnrestricted">
      <summary>Determines whether the <see cref="T:System.Security.PermissionSet"></see> is Unrestricted.</summary>
      <returns>true if the <see cref="System.Security.PermissionSet"></see> is Unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.PermitOnly">
      <summary>Causes any <see cref="M:System.Security.PermissionSet.Demand"></see> that passes through the calling code for any <see cref="T:System.Security.PermissionSet"></see> that is not a subset of the current <see cref="T:System.Security.PermissionSet"></see> to fail.</summary>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermission(System.Type)">
      <summary>Removes a permission of a certain type from the set.</summary>
      <param name="permClass">The type of permission to delete.</param>
      <returns>The permission removed from the set.</returns>
      <exception cref="T:System.InvalidOperationException">The method is called from a <see cref="System.Security.ReadOnlyPermissionSet"></see>.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermissionImpl(System.Type)">
      <summary>Removes a permission of a certain type from the set.</summary>
      <param name="permClass">The type of the permission to remove.</param>
      <returns>The permission removed from the set.</returns>
      <exception cref="T:System.InvalidOperationException">The method is called from a <see cref="System.Security.ReadOnlyPermissionSet"></see>.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RevertAssert">
      <summary>Causes any previous <see cref="M:System.Security.CodeAccessPermission.Assert"></see> for the current frame to be removed and no longer be in effect.</summary>
      <exception cref="T:System.InvalidOperationException">There is no previous <see cref="System.Security.CodeAccessPermission.Assert"></see> for the current frame.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermission(System.Security.IPermission)">
      <summary>Sets a permission to the <see cref="T:System.Security.PermissionSet"></see>, replacing any existing permission of the same type.</summary>
      <param name="perm">The permission to set.</param>
      <returns>The set permission.</returns>
      <exception cref="T:System.InvalidOperationException">The method is called from a <see cref="System.Security.ReadOnlyPermissionSet"></see>.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)">
      <summary>Sets a permission to the <see cref="T:System.Security.PermissionSet"></see>, replacing any existing permission of the same type.</summary>
      <param name="perm">The permission to set.</param>
      <returns>The set permission.</returns>
      <exception cref="T:System.InvalidOperationException">The method is called from a <see cref="System.Security.ReadOnlyPermissionSet"></see>.</exception>
    </member>
    <member name="P:System.Security.PermissionSet.SyncRoot">
      <summary>Gets the root object of the current collection.</summary>
      <returns>The root object of the current collection.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <returns>A representation of the <see cref="System.Security.PermissionSet"></see>.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Union(System.Security.PermissionSet)">
      <summary>Creates a <see cref="T:System.Security.PermissionSet"></see> that is the union of the current <see cref="T:System.Security.PermissionSet"></see> and the specified <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <param name="other">The permission set to form the union with the current <see cref="T:System.Security.PermissionSet"></see>.</param>
      <returns>A new permission set that represents the union of the current <see cref="System.Security.PermissionSet"></see> and the specified <see cref="System.Security.PermissionSet"></see>.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
    </member>
    <member name="T:System.Security.Policy.AllMembershipCondition">
      <summary>Represents a membership condition that matches all code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.AllMembershipCondition"></see> class.</summary>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <param name="evidence">The evidence set against which to make the test.</param>
      <returns>Always true.</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the specified membership condition is an <see cref="T:System.Security.Policy.AllMembershipCondition"></see>.</summary>
      <param name="o">The object to compare to <see cref="T:System.Security.Policy.AllMembershipCondition"></see>.</param>
      <returns>true if the specified membership condition is an <see cref="System.Security.Policy.AllMembershipCondition"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy level context used to resolve named permission set references.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A representation of the membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel"></see>.</summary>
      <param name="level">The policy level context for resolving named permission set references.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationDirectory">
      <summary>Provides the application directory as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.ApplicationDirectory"></see> class.</summary>
      <param name="name">The path of the application directory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.Copy">
      <summary>Creates a new copy of the <see cref="T:System.Security.Policy.ApplicationDirectory"></see>.</summary>
      <returns>A new, identical copy of the <see cref="System.Security.Policy.ApplicationDirectory"></see>.</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationDirectory.Directory">
      <summary>Gets the path of the application directory.</summary>
      <returns>The path of the application directory.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.Equals(System.Object)">
      <summary>Determines whether instances of the same type of an evidence object are equivalent.</summary>
      <param name="o">An object of same type as the current evidence object.</param>
      <returns>true if the two instances are equivalent; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.GetHashCode">
      <summary>Gets the hash code of the current application directory.</summary>
      <returns>The hash code of the current application directory.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.ToString">
      <summary>Gets a string representation of the state of the <see cref="T:System.Security.Policy.ApplicationDirectory"></see> evidence object.</summary>
      <returns>A representation of the state of the <see cref="System.Security.Policy.ApplicationDirectory"></see> evidence object.</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationDirectoryMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its application directory. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition"></see> class.</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the membership condition is satisfied by the specified evidence.</summary>
      <param name="evidence">The evidence set against which to make the test.</param>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the specified membership condition is an <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition"></see>.</summary>
      <param name="o">The object to compare to <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition"></see>.</param>
      <returns>true if the specified membership condition is an <see cref="System.Security.Policy.ApplicationDirectoryMembershipCondition"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid application directory membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy level context, used to resolve named permission set references.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid application directory membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the state of the membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel"></see>.</summary>
      <param name="level">The policy level context for resolving named permission set references.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationTrust">
      <summary>Encapsulates security decisions about an application. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.ApplicationTrust"></see> class.</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.#ctor(System.ApplicationIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.ApplicationTrust"></see> class with an <see cref="T:System.ApplicationIdentity"></see>.</summary>
      <param name="applicationIdentity">An <see cref="T:System.ApplicationIdentity"></see> that uniquely identifies an application.</param>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.#ctor(System.Security.PermissionSet,System.Collections.Generic.IEnumerable{System.Security.Policy.StrongName})">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.ApplicationTrust"></see> class using the provided grant set and collection of full-trust assemblies.</summary>
      <param name="defaultGrantSet">A default permission set that is granted to all assemblies that do not have specific grants.</param>
      <param name="fullTrustAssemblies">An array of strong names that represent assemblies that should be considered fully trusted in an application domain.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fullTrustAssemblies">fullTrustAssemblies</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="fullTrustAssemblies">fullTrustAssemblies</paramref> contains an assembly that does not have a <see cref="System.Security.Policy.StrongName"></see>.</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.ApplicationIdentity">
      <summary>Gets or sets the application identity for the application trust object.</summary>
      <returns>An <see cref="System.ApplicationIdentity"></see> for the application trust object.</returns>
      <exception cref="T:System.ArgumentNullException"><see cref="System.ApplicationIdentity"></see> cannot be set because it has a value of null.</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.DefaultGrantSet">
      <summary>Gets or sets the policy statement defining the default grant set.</summary>
      <returns>A <see cref="System.Security.Policy.PolicyStatement"></see> describing the default grants.</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.ExtraInfo">
      <summary>Gets or sets extra security information about the application.</summary>
      <returns>An object containing additional security information about the application.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs an <see cref="T:System.Security.Policy.ApplicationTrust"></see> object with a given state from an XML encoding.</summary>
      <param name="element">The XML encoding to use to reconstruct the <see cref="T:System.Security.Policy.ApplicationTrust"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="element">element</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The XML encoding used for <paramref name="element">element</paramref> is invalid.</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.FullTrustAssemblies">
      <summary>Gets the list of full-trust assemblies for this application trust.</summary>
      <returns>A list of full-trust assemblies.</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun">
      <summary>Gets or sets a value indicating whether the application has the required permission grants and is trusted to run.</summary>
      <returns>true if the application is trusted to run; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.Persist">
      <summary>Gets or sets a value indicating whether application trust information is persisted.</summary>
      <returns>true if application trust information is persisted; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.ToXml">
      <summary>Creates an XML encoding of the <see cref="T:System.Security.Policy.ApplicationTrust"></see> object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationTrustCollection">
      <summary>Represents a collection of <see cref="T:System.Security.Policy.ApplicationTrust"></see> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Add(System.Security.Policy.ApplicationTrust)">
      <summary>Adds an element to the collection.</summary>
      <param name="trust">The <see cref="T:System.Security.Policy.ApplicationTrust"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="trust">trust</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ApplicationTrust.ApplicationIdentity"></see> property of the <see cref="System.Security.Policy.ApplicationTrust"></see> specified in <paramref name="trust">trust</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.AddRange(System.Security.Policy.ApplicationTrust[])">
      <summary>Copies the elements of the specified <see cref="T:System.Security.Policy.ApplicationTrust"></see> array to the end of the collection.</summary>
      <param name="trusts">An array of type <see cref="T:System.Security.Policy.ApplicationTrust"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="trusts">trusts</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ApplicationTrust.ApplicationIdentity"></see> property of an <see cref="System.Security.Policy.ApplicationTrust"></see> specified in <paramref name="trust">trust</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.AddRange(System.Security.Policy.ApplicationTrustCollection)">
      <summary>Copies the elements of the specified <see cref="T:System.Security.Policy.ApplicationTrustCollection"></see> to the end of the collection.</summary>
      <param name="trusts">A <see cref="T:System.Security.Policy.ApplicationTrustCollection"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="trusts">trusts</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ApplicationTrust.ApplicationIdentity"></see> property of an <see cref="System.Security.Policy.ApplicationTrust"></see> specified in <paramref name="trust">trust</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Clear">
      <summary>Removes all the application trusts from the collection.</summary>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ApplicationTrust.ApplicationIdentity"></see> property of an item in the collection is null.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.CopyTo(System.Security.Policy.ApplicationTrust[],System.Int32)">
      <summary>Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional array of type <see cref="T:System.Security.Policy.ApplicationTrust"></see> that is the destination of the elements copied from the current collection.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than the lower bound of <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.  
 -or-  
 The number of elements in the <see cref="System.Security.Policy.ApplicationTrustCollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.Count">
      <summary>Gets the number of items contained in the collection.</summary>
      <returns>The number of items contained in the collection.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Find(System.ApplicationIdentity,System.Security.Policy.ApplicationVersionMatch)">
      <summary>Gets the application trusts in the collection that match the specified application identity.</summary>
      <param name="applicationIdentity">An <see cref="T:System.ApplicationIdentity"></see> object describing the application to find.</param>
      <param name="versionMatch">One of the <see cref="T:System.Security.Policy.ApplicationVersionMatch"></see> values.</param>
      <returns>An <see cref="System.Security.Policy.ApplicationTrustCollection"></see> containing all matching <see cref="System.Security.Policy.ApplicationTrust"></see> objects.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.GetEnumerator">
      <summary>Returns an object that can be used to iterate over the collection.</summary>
      <returns>An <see cref="System.Security.Policy.ApplicationTrustEnumerator"></see> that can be used to iterate over the collection.</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Security.Policy.ApplicationTrust"></see> object located at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the object within the collection.</param>
      <returns>The <see cref="System.Security.Policy.ApplicationTrust"></see> object at the specified index in the collection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is greater than or equal to the count of objects in the collection.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="index">index</paramref> is negative.</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Security.Policy.ApplicationTrust"></see> object for the specified application.</summary>
      <param name="appFullName">The full name of the application.</param>
      <returns>The <see cref="System.Security.Policy.ApplicationTrust"></see> object for the specified application, or null if the object cannot be found.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Remove(System.Security.Policy.ApplicationTrust)">
      <summary>Removes the specified application trust from the collection.</summary>
      <param name="trust">The <see cref="T:System.Security.Policy.ApplicationTrust"></see> object to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="trust">trust</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.ApplicationTrust.ApplicationIdentity"></see> property of the <see cref="System.Security.Policy.ApplicationTrust"></see> object specified by <paramref name="trust">trust</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Remove(System.ApplicationIdentity,System.Security.Policy.ApplicationVersionMatch)">
      <summary>Removes all application trust objects that match the specified criteria from the collection.</summary>
      <param name="applicationIdentity">The <see cref="T:System.ApplicationIdentity"></see> of the <see cref="T:System.Security.Policy.ApplicationTrust"></see> object to be removed.</param>
      <param name="versionMatch">One of the <see cref="T:System.Security.Policy.ApplicationVersionMatch"></see> values.</param>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.RemoveRange(System.Security.Policy.ApplicationTrust[])">
      <summary>Removes the application trust objects in the specified array from the collection.</summary>
      <param name="trusts">A one-dimensional array of type <see cref="T:System.Security.Policy.ApplicationTrust"></see> that contains items to be removed from the current collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="trusts">trusts</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.RemoveRange(System.Security.Policy.ApplicationTrustCollection)">
      <summary>Removes the application trust objects in the specified collection from the collection.</summary>
      <param name="trusts">An <see cref="T:System.Security.Policy.ApplicationTrustCollection"></see> that contains items to be removed from the currentcollection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="trusts">trusts</paramref> is null.</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>The object to use to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to the specified <see cref="T:System.Array"></see>, starting at the specified <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.  
 -or-  
 The number of elements in the source <see cref="System.Collections.ICollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationTrustEnumerator">
      <summary>Represents the enumerator for <see cref="T:System.Security.Policy.ApplicationTrust"></see> objects in the <see cref="T:System.Security.Policy.ApplicationTrustCollection"></see> collection.</summary>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustEnumerator.Current">
      <summary>Gets the current <see cref="T:System.Security.Policy.ApplicationTrust"></see> object in the <see cref="T:System.Security.Policy.ApplicationTrustCollection"></see> collection.</summary>
      <returns>The current <see cref="System.Security.Policy.ApplicationTrust"></see> in the <see cref="System.Security.Policy.ApplicationTrustCollection"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustEnumerator.MoveNext">
      <summary>Moves to the next element in the <see cref="T:System.Security.Policy.ApplicationTrustCollection"></see> collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustEnumerator.Reset">
      <summary>Resets the enumerator to the beginning of the <see cref="T:System.Security.Policy.ApplicationTrustCollection"></see> collection.</summary>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current <see cref="T:System.Object"></see> in the <see cref="T:System.Security.Policy.ApplicationTrustCollection"></see> collection.</summary>
      <returns>The current <see cref="System.Object"></see> in the <see cref="System.Security.Policy.ApplicationTrustCollection"></see>.</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationVersionMatch">
      <summary>Specifies how to match versions when locating application trusts in a collection.</summary>
    </member>
    <member name="F:System.Security.Policy.ApplicationVersionMatch.MatchAllVersions">
      <summary>Match on all versions.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Policy.ApplicationVersionMatch.MatchExactVersion">
      <summary>Match on the exact version.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Policy.CodeConnectAccess">
      <summary>Specifies the network resource access that is granted to code.</summary>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.CodeConnectAccess"></see> class.</summary>
      <param name="allowScheme">The URI scheme represented by the current instance.</param>
      <param name="allowPort">The port represented by the current instance.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allowScheme">allowScheme</paramref> is null.  
 -or-  
 <paramref name="allowScheme">allowScheme</paramref> is an empty string (&amp;quot;&amp;quot;).  
 -or-  
 <paramref name="allowScheme">allowScheme</paramref> contains characters that are not permitted in schemes.  
 -or-  
 <paramref name="allowPort">allowPort</paramref> is less than 0.  
 -or-  
 <paramref name="allowPort">allowPort</paramref> is greater than 65,535.</exception>
    </member>
    <member name="F:System.Security.Policy.CodeConnectAccess.AnyScheme">
      <summary>Contains the string value that represents the scheme wildcard.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.CreateAnySchemeAccess(System.Int32)">
      <summary>Returns a <see cref="T:System.Security.Policy.CodeConnectAccess"></see> instance that represents access to the specified port using any scheme.</summary>
      <param name="allowPort">The port represented by the returned instance.</param>
      <returns>A <see cref="System.Security.Policy.CodeConnectAccess"></see> instance for the specified port.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allowPort">allowPort</paramref> is less than 0.  
 -or-  
 <paramref name="allowPort">allowPort</paramref> is greater than 65,535.</exception>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.CreateOriginSchemeAccess(System.Int32)">
      <summary>Returns a <see cref="T:System.Security.Policy.CodeConnectAccess"></see> instance that represents access to the specified port using the code&amp;#39;s scheme of origin.</summary>
      <param name="allowPort">The port represented by the returned instance.</param>
      <returns>A <see cref="System.Security.Policy.CodeConnectAccess"></see> instance for the specified port.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allowPort">allowPort</paramref> is less than 0.  
 -or-  
 <paramref name="allowPort">allowPort</paramref> is greater than 65,535.</exception>
    </member>
    <member name="F:System.Security.Policy.CodeConnectAccess.DefaultPort">
      <summary>Contains the value used to represent the default port.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.Equals(System.Object)">
      <summary>Returns a value indicating whether two <see cref="T:System.Security.Policy.CodeConnectAccess"></see> objects represent the same scheme and port.</summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.CodeConnectAccess"></see> object.</param>
      <returns>true if the two objects represent the same scheme and port; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>A hash code for the current <see cref="System.Object"></see>.</returns>
    </member>
    <member name="F:System.Security.Policy.CodeConnectAccess.OriginPort">
      <summary>Contains the value used to represent the port value in the URI where code originated.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Policy.CodeConnectAccess.OriginScheme">
      <summary>Contains the value used to represent the scheme in the URL where the code originated.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Security.Policy.CodeConnectAccess.Port">
      <summary>Gets the port represented by the current instance.</summary>
      <returns>A <see cref="System.Int32"></see> value that identifies a computer port used in conjunction with the <see cref="System.Security.Policy.CodeConnectAccess.Scheme"></see> property.</returns>
    </member>
    <member name="P:System.Security.Policy.CodeConnectAccess.Scheme">
      <summary>Gets the URI scheme represented by the current instance.</summary>
      <returns>A <see cref="System.String"></see> that identifies a URI scheme, converted to lowercase.</returns>
    </member>
    <member name="T:System.Security.Policy.CodeGroup">
      <summary>Represents the abstract base class from which all implementations of code groups must derive.</summary>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>Initializes a new instance of <see cref="T:System.Security.Policy.CodeGroup"></see>.</summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy.</param>
      <param name="policy">The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="membershipCondition">membershipCondition</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="membershipCondition">membershipCondition</paramref> parameter is not valid.  
 -or-  
 The type of the <paramref name="policy">policy</paramref> parameter is not valid.</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.AddChild(System.Security.Policy.CodeGroup)">
      <summary>Adds a child code group to the current code group.</summary>
      <param name="group">The code group to be added as a child. This new child code group is added to the end of the list.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="group">group</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="group">group</paramref> parameter is not a valid code group.</exception>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.AttributeString">
      <summary>Gets a string representation of the attributes of the policy statement for the code group.</summary>
      <returns>A string representation of the attributes of the policy statement for the code group.</returns>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.Children">
      <summary>Gets or sets an ordered list of the child code groups of a code group.</summary>
      <returns>A list of child code groups.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set this property to null.</exception>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property with a list of children that are not <see cref="System.Security.Policy.CodeGroup"></see> objects.</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Copy">
      <summary>When overridden in a derived class, makes a deep copy of the current code group.</summary>
      <returns>An equivalent copy of the current code group, including its membership conditions and child code groups.</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>When overridden in a derived class, serializes properties and internal state specific to a derived code group and adds the serialization to the specified <see cref="T:System.Security.SecurityElement"></see>.</summary>
      <param name="element">The XML encoding to which to add the serialization.</param>
      <param name="level">The policy level within which the code group exists.</param>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.Description">
      <summary>Gets or sets the description of the code group.</summary>
      <returns>The description of the code group.</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Equals(System.Object)">
      <summary>Determines whether the specified code group is equivalent to the current code group.</summary>
      <param name="o">The code group to compare with the current code group.</param>
      <returns>true if the specified code group is equivalent to the current code group; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Equals(System.Security.Policy.CodeGroup,System.Boolean)">
      <summary>Determines whether the specified code group is equivalent to the current code group, checking the child code groups as well, if specified.</summary>
      <param name="cg">The code group to compare with the current code group.</param>
      <param name="compareChildren">true to compare child code groups, as well; otherwise, false.</param>
      <returns>true if the specified code group is equivalent to the current code group; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a given state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a given state and policy level from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy level within which the code group exists.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.GetHashCode">
      <summary>Gets the hash code of the current code group.</summary>
      <returns>The hash code of the current code group.</returns>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.MembershipCondition">
      <summary>Gets or sets the code group&amp;#39;s membership condition.</summary>
      <returns>The membership condition that determines to which evidence the code group is applicable.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set this parameter to null.</exception>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.MergeLogic">
      <summary>When overridden in a derived class, gets the merge logic for the code group.</summary>
      <returns>A description of the merge logic for the code group.</returns>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.Name">
      <summary>Gets or sets the name of the code group.</summary>
      <returns>The name of the code group.</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>When overridden in a derived class, reconstructs properties and internal state specific to a derived code group from the specified <see cref="T:System.Security.SecurityElement"></see>.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy level within which the code group exists.</param>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.PermissionSetName">
      <summary>Gets the name of the named permission set for the code group.</summary>
      <returns>The name of a named permission set of the policy level.</returns>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.PolicyStatement">
      <summary>Gets or sets the policy statement associated with the code group.</summary>
      <returns>The policy statement for the code group.</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.RemoveChild(System.Security.Policy.CodeGroup)">
      <summary>Removes the specified child code group.</summary>
      <param name="group">The code group to be removed as a child.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="group">group</paramref> parameter is not an immediate child code group of the current code group.</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>When overridden in a derived class, resolves policy for the code group and its descendants for a set of evidence.</summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>A policy statement that consists of the permissions granted by the code group with optional attributes, or null if the code group does not apply (the membership condition does not match the specified evidence).</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>When overridden in a derived class, resolves matching code groups.</summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>A <see cref="System.Security.Policy.CodeGroup"></see> that is the root of the tree of matching code groups.</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object, its current state, and the policy level within which the code exists.</summary>
      <param name="level">The policy level within which the code group exists.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="T:System.Security.Policy.Evidence">
      <summary>Defines the set of information that constitutes input to security policy decisions. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor">
      <summary>Initializes a new empty instance of the <see cref="T:System.Security.Policy.Evidence"></see> class.</summary>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence"></see> class from a shallow copy of an existing one.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> instance from which to create the new instance. This instance is not deep-copied.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="evidence">evidence</paramref> parameter is not a valid instance of <see cref="System.Security.Policy.Evidence"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence"></see> class from multiple sets of host and assembly evidence.</summary>
      <param name="hostEvidence">The host evidence from which to create the new instance.</param>
      <param name="assemblyEvidence">The assembly evidence from which to create the new instance.</param>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence"></see> class from multiple sets of host and assembly evidence.</summary>
      <param name="hostEvidence">The host evidence from which to create the new instance.</param>
      <param name="assemblyEvidence">The assembly evidence from which to create the new instance.</param>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddAssembly(System.Object)">
      <summary>Adds the specified assembly evidence to the evidence set.</summary>
      <param name="id">Any evidence object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="id">id</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="id">id</paramref> is not serializable.</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)">
      <summary>Adds an evidence object of the specified type to the assembly-supplied evidence list.</summary>
      <param name="evidence">The assembly evidence to add.</param>
      <typeparam name="T">The type of the object in evidence.</typeparam>
      <exception cref="T:System.ArgumentNullException"><paramref name="evidence">evidence</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Evidence of type <paramref name="T">T</paramref> is already in the list.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="evidence">evidence</paramref> is not serializable.</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddHost(System.Object)">
      <summary>Adds the specified evidence supplied by the host to the evidence set.</summary>
      <param name="id">Any evidence object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="id">id</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="id">id</paramref> is not serializable.</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddHostEvidence``1(``0)">
      <summary>Adds host evidence of the specified type to the host evidence collection.</summary>
      <param name="evidence">The host evidence to add.</param>
      <typeparam name="T">The type of the object in evidence.</typeparam>
      <exception cref="T:System.ArgumentNullException"><paramref name="evidence">evidence</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Evidence of type <paramref name="T">T</paramref> is already in the list.</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.Clear">
      <summary>Removes the host and assembly evidence from the evidence set.</summary>
    </member>
    <member name="M:System.Security.Policy.Evidence.Clone">
      <summary>Returns a duplicate copy of this evidence object.</summary>
      <returns>A duplicate copy of this evidence object.</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)">
      <summary>Copies evidence objects to an <see cref="T:System.Array"></see>.</summary>
      <param name="array">The target array to which to copy evidence objects.</param>
      <param name="index">The zero-based position in the array to which to begin copying evidence objects.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the range of the target array.</exception>
    </member>
    <member name="P:System.Security.Policy.Evidence.Count">
      <summary>Gets the number of evidence objects in the evidence set.</summary>
      <returns>The number of evidence objects in the evidence set.</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetAssemblyEnumerator">
      <summary>Enumerates evidence provided by the assembly.</summary>
      <returns>An enumerator for evidence added by the <see cref="System.Security.Policy.Evidence.AddAssembly(System.Object)"></see> method.</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetAssemblyEvidence``1">
      <summary>Gets assembly evidence of the specified type from the collection.</summary>
      <typeparam name="T">The type of the evidence to get.</typeparam>
      <returns>Evidence of type <paramref name="T">T</paramref> in the assembly evidence collection.</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetEnumerator">
      <summary>Enumerates all evidence in the set, both that provided by the host and that provided by the assembly.</summary>
      <returns>An enumerator for evidence added by both the <see cref="System.Security.Policy.Evidence.AddHost(System.Object)"></see> method and the <see cref="System.Security.Policy.Evidence.AddAssembly(System.Object)"></see> method.</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetHostEnumerator">
      <summary>Enumerates evidence supplied by the host.</summary>
      <returns>An enumerator for evidence added by the <see cref="System.Security.Policy.Evidence.AddHost(System.Object)"></see> method.</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetHostEvidence``1">
      <summary>Gets host evidence of the specified type from the collection.</summary>
      <typeparam name="T">The type of the evidence to get.</typeparam>
      <returns>Evidence of type <paramref name="T">T</paramref> in the host evidence collection.</returns>
    </member>
    <member name="P:System.Security.Policy.Evidence.IsReadOnly">
      <summary>Gets a value indicating whether the evidence set is read-only.</summary>
      <returns>Always false, because read-only evidence sets are not supported.</returns>
    </member>
    <member name="P:System.Security.Policy.Evidence.IsSynchronized">
      <summary>Gets a value indicating whether the evidence set is thread-safe.</summary>
      <returns>Always false because thread-safe evidence sets are not supported.</returns>
    </member>
    <member name="P:System.Security.Policy.Evidence.Locked">
      <summary>Gets or sets a value indicating whether the evidence is locked.</summary>
      <returns>true if the evidence is locked; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)">
      <summary>Merges the specified evidence set into the current evidence set.</summary>
      <param name="evidence">The evidence set to be merged into the current evidence set.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="evidence">evidence</paramref> parameter is not a valid instance of <see cref="System.Security.Policy.Evidence"></see>.</exception>
      <exception cref="T:System.Security.SecurityException"><see cref="System.Security.Policy.Evidence.Locked"></see> is true, the code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlEvidence"></see>, and the <paramref name="evidence">evidence</paramref> parameter has a host list that is not empty.</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.RemoveType(System.Type)">
      <summary>Removes the evidence for a given type from the host and assembly enumerations.</summary>
      <param name="t">The type of the evidence to be removed.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="t">t</paramref> is null.</exception>
    </member>
    <member name="P:System.Security.Policy.Evidence.SyncRoot">
      <summary>Gets the synchronization root.</summary>
      <returns>Always this (Me in Visual Basic), because synchronization of evidence sets is not supported.</returns>
    </member>
    <member name="T:System.Security.Policy.EvidenceBase">
      <summary>Provides a base class from which all objects to be used as evidence must derive.</summary>
    </member>
    <member name="M:System.Security.Policy.EvidenceBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.EvidenceBase"></see> class.</summary>
      <exception cref="T:System.InvalidOperationException">An object to be used as evidence is not serializable.</exception>
    </member>
    <member name="M:System.Security.Policy.EvidenceBase.Clone">
      <summary>Creates a new object that is a complete copy of the current instance.</summary>
      <returns>A duplicate copy of this evidence object.</returns>
    </member>
    <member name="T:System.Security.Policy.FileCodeGroup">
      <summary>Grants permission to manipulate files located in the code assemblies to code assemblies that match the membership condition. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Permissions.FileIOPermissionAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.FileCodeGroup"></see> class.</summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy.</param>
      <param name="access">One of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"></see> values. This value is used to construct the <see cref="T:System.Security.Permissions.FileIOPermission"></see> that is granted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="membershipCondition">membershipCondition</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="membershipCondition">membershipCondition</paramref> parameter is not valid.  
 -or-  
 The type of the <paramref name="access">access</paramref> parameter is not valid.</exception>
    </member>
    <member name="P:System.Security.Policy.FileCodeGroup.AttributeString">
      <summary>Gets a string representation of the attributes of the policy statement for the code group.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.Copy">
      <summary>Makes a deep copy of the current code group.</summary>
      <returns>An equivalent copy of the current code group, including its membership conditions and child code groups.</returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.Equals(System.Object)">
      <summary>Determines whether the specified code group is equivalent to the current code group.</summary>
      <param name="o">The code group to compare with the current code group.</param>
      <returns>true if the specified code group is equivalent to the current code group; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.GetHashCode">
      <summary>Gets the hash code of the current code group.</summary>
      <returns>The hash code of the current code group.</returns>
    </member>
    <member name="P:System.Security.Policy.FileCodeGroup.MergeLogic">
      <summary>Gets the merge logic.</summary>
      <returns>The string &amp;quot;Union&amp;quot;.</returns>
    </member>
    <member name="P:System.Security.Policy.FileCodeGroup.PermissionSetName">
      <summary>Gets the name of the named permission set for the code group.</summary>
      <returns>The concatenatation of the string &amp;quot;Same directory FileIO - &amp;quot; and the access type.</returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>Resolves policy for the code group and its descendants for a set of evidence.</summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>A policy statement consisting of the permissions granted by the code group with optional attributes, or null if the code group does not apply (the membership condition does not match the specified evidence).</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
      <exception cref="T:System.Security.Policy.PolicyException">The current policy is null.  
 -or-  
 More than one code group (including the parent code group and all child code groups) is marked <see cref="System.Security.Policy.PolicyStatementAttribute.Exclusive"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>Resolves matching code groups.</summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>A <see cref="System.Security.Policy.CodeGroup"></see> that is the root of the tree of matching code groups.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
    </member>
    <member name="T:System.Security.Policy.FirstMatchCodeGroup">
      <summary>Allows security policy to be defined by the union of the policy statement of a code group and that of the first child code group that matches. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.FirstMatchCodeGroup"></see> class.</summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy.</param>
      <param name="policy">The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.</param>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="membershipCondition">membershipCondition</paramref> parameter is not valid.  
 -or-  
 The type of the <paramref name="policy">policy</paramref> parameter is not valid.</exception>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.Copy">
      <summary>Makes a deep copy of the code group.</summary>
      <returns>An equivalent copy of the code group, including its membership conditions and child code groups.</returns>
    </member>
    <member name="P:System.Security.Policy.FirstMatchCodeGroup.MergeLogic">
      <summary>Gets the merge logic.</summary>
      <returns>The string &amp;quot;First Match&amp;quot;.</returns>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>Resolves policy for the code group and its descendants for a set of evidence.</summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>A policy statement consisting of the permissions granted by the code group with optional attributes, or null if the code group does not apply (the membership condition does not match the specified evidence).</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
      <exception cref="T:System.Security.Policy.PolicyException">More than one code group (including the parent code group and any child code groups) is marked <see cref="System.Security.Policy.PolicyStatementAttribute.Exclusive"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>Resolves matching code groups.</summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>A <see cref="System.Security.Policy.CodeGroup"></see> that is the root of the tree of matching code groups.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
    </member>
    <member name="T:System.Security.Policy.GacInstalled">
      <summary>Confirms that a code assembly originates in the global assembly cache (GAC) as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.GacInstalled"></see> class.</summary>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.Copy">
      <summary>Creates an equivalent copy of the current object.</summary>
      <returns>An equivalent copy of <see cref="System.Security.Policy.GacInstalled"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates a new identity permission that corresponds to the current object.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> from which to construct the identity permission.</param>
      <returns>A new identity permission that corresponds to the current object.</returns>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.Equals(System.Object)">
      <summary>Indicates whether the current object is equivalent to the specified object.</summary>
      <param name="o">The object to compare with the current object.</param>
      <returns>true if <paramref name="o">o</paramref> is a <see cref="System.Security.Policy.GacInstalled"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.GetHashCode">
      <summary>Returns a hash code for the current object.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.ToString">
      <summary>Returns a string representation of the current  object.</summary>
      <returns>A string representation of the current object.</returns>
    </member>
    <member name="T:System.Security.Policy.GacMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its global assembly cache membership. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.GacMembershipCondition"></see> class.</summary>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Indicates whether the specified evidence satisfies the membership condition.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> against which to make the test.</param>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new <see cref="System.Security.Policy.GacMembershipCondition"></see> object.</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.Equals(System.Object)">
      <summary>Indicates whether the current object is equivalent to the specified object.</summary>
      <param name="o">The object to compare with the current object.</param>
      <returns>true if <paramref name="o">o</paramref> is a <see cref="System.Security.Policy.GacMembershipCondition"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Uses the specified XML encoding to reconstruct a security object.</summary>
      <param name="e">The <see cref="T:System.Security.SecurityElement"></see> that contains the XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="e">e</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="e">e</paramref> is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Uses the specified XML encoding to reconstruct a security object, using the specified policy level context.</summary>
      <param name="e">The <see cref="T:System.Security.SecurityElement"></see> that contains the XML encoding to use to reconstruct the security object.</param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context for resolving <see cref="T:System.Security.NamedPermissionSet"></see> references.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="e">e</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="e">e</paramref> is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.GetHashCode">
      <summary>Gets a hash code for the current membership condition.</summary>
      <returns>0 (zero).</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.ToString">
      <summary>Returns a string representation of the membership condition.</summary>
      <returns>A string representation of the membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> that contains the XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state, using the specified policy level context.</summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context for resolving <see cref="T:System.Security.NamedPermissionSet"></see> references.</param>
      <returns>A <see cref="System.Security.SecurityElement"></see> that contains the XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="T:System.Security.Policy.Hash">
      <summary>Provides evidence about the hash value for an assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Hash.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Hash"></see> class.</summary>
      <param name="assembly">The assembly for which to compute the hash value.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assembly">assembly</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="assembly">assembly</paramref> is not a run-time <see cref="System.Reflection.Assembly"></see> object.</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.CreateMD5(System.Byte[])">
      <summary>Creates a <see cref="T:System.Security.Policy.Hash"></see> object that contains an <see cref="T:System.Security.Cryptography.MD5"></see> hash value.</summary>
      <param name="md5">A byte array that contains an <see cref="T:System.Security.Cryptography.MD5"></see> hash value.</param>
      <returns>An object that contains the hash value provided by the <paramref name="md5">md5</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="md5">md5</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.CreateSHA1(System.Byte[])">
      <summary>Creates a <see cref="T:System.Security.Policy.Hash"></see> object that contains a <see cref="T:System.Security.Cryptography.SHA1"></see> hash value.</summary>
      <param name="sha1">A byte array that contains a <see cref="T:System.Security.Cryptography.SHA1"></see> hash value.</param>
      <returns>An object that contains the hash value provided by the <paramref name="sha1">sha1</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sha1">sha1</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.CreateSHA256(System.Byte[])">
      <summary>Creates a <see cref="T:System.Security.Policy.Hash"></see> object that contains a <see cref="T:System.Security.Cryptography.SHA256"></see> hash value.</summary>
      <param name="sha256">A byte array that contains a <see cref="T:System.Security.Cryptography.SHA256"></see> hash value.</param>
      <returns>A hash object that contains the hash value provided by the <paramref name="sha256">sha256</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sha256">sha256</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.GenerateHash(System.Security.Cryptography.HashAlgorithm)">
      <summary>Computes the hash value for the assembly using the specified hash algorithm.</summary>
      <param name="hashAlg">The hash algorithm to use to compute the hash value for the assembly.</param>
      <returns>A byte array that represents the hash value for the assembly.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hashAlg">hashAlg</paramref> parameter is null.</exception>
      <exception cref="T:System.Security.SecurityException">The hash value for the assembly cannot be generated.</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the parameter name and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.Security.Policy.Hash.MD5">
      <summary>Gets the <see cref="T:System.Security.Cryptography.MD5"></see> hash value for the assembly.</summary>
      <returns>A byte array that represents the <see cref="System.Security.Cryptography.MD5"></see> hash value for the assembly.</returns>
    </member>
    <member name="P:System.Security.Policy.Hash.SHA1">
      <summary>Gets the <see cref="T:System.Security.Cryptography.SHA1"></see> hash value for the assembly.</summary>
      <returns>A byte array that represents the <see cref="System.Security.Cryptography.SHA1"></see> hash value for the assembly.</returns>
    </member>
    <member name="P:System.Security.Policy.Hash.SHA256">
      <summary>Gets the <see cref="T:System.Security.Cryptography.SHA256"></see> hash value for the assembly.</summary>
      <returns>A byte array that represents the <see cref="System.Security.Cryptography.SHA256"></see> hash value for the assembly.</returns>
    </member>
    <member name="M:System.Security.Policy.Hash.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Policy.Hash"></see>.</summary>
      <returns>A representation of the current <see cref="System.Security.Policy.Hash"></see>.</returns>
    </member>
    <member name="T:System.Security.Policy.HashMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its hash value. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.#ctor(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.HashMembershipCondition"></see> class with the hash algorithm and hash value that determine membership.</summary>
      <param name="hashAlg">The hash algorithm to use to compute the hash value for the assembly.</param>
      <param name="value">The hash value for which to test.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hashAlg">hashAlg</paramref> parameter is null.  
 -or-  
 The <paramref name="value">value</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="hashAlg">hashAlg</paramref> parameter is not a valid hash algorithm.</exception>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <param name="evidence">The evidence set against which to make the test.</param>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue"></see> and the <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm"></see> from the specified object are equivalent to the <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue"></see> and <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm"></see> contained in the current <see cref="T:System.Security.Policy.HashMembershipCondition"></see>.</summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.HashMembershipCondition"></see>.</param>
      <returns>true if the <see cref="System.Security.Policy.HashMembershipCondition.HashValue"></see> and <see cref="System.Security.Policy.HashMembershipCondition.HashAlgorithm"></see> from the specified object is equivalent to the <see cref="System.Security.Policy.HashMembershipCondition.HashValue"></see> and <see cref="System.Security.Policy.HashMembershipCondition.HashAlgorithm"></see> contained in the current <see cref="System.Security.Policy.HashMembershipCondition"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy level context, used to resolve named permission set references.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e">e</paramref> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
    </member>
    <member name="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm">
      <summary>Gets or sets the hash algorithm to use for the membership condition.</summary>
      <returns>The hash algorithm to use for the membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set <see cref="System.Security.Policy.HashMembershipCondition.HashAlgorithm"></see> to null.</exception>
    </member>
    <member name="P:System.Security.Policy.HashMembershipCondition.HashValue">
      <summary>Gets or sets the hash value for which the membership condition tests.</summary>
      <returns>The hash value for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set <see cref="System.Security.Policy.HashMembershipCondition.HashValue"></see> to null.</exception>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the state of the membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel"></see>.</summary>
      <param name="level">The policy level context for resolving named permission set references.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext"></see> for this serialization.</param>
    </member>
    <member name="T:System.Security.Policy.IIdentityPermissionFactory">
      <summary>Defines the method that creates a new identity permission.</summary>
    </member>
    <member name="M:System.Security.Policy.IIdentityPermissionFactory.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates a new identity permission for the specified evidence.</summary>
      <param name="evidence">The evidence from which to create the new identity permission.</param>
      <returns>The new identity permission.</returns>
    </member>
    <member name="T:System.Security.Policy.IMembershipCondition">
      <summary>Defines the test to determine whether a code assembly is a member of a code group.</summary>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <param name="evidence">The evidence set against which to make the test.</param>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
      <returns>true if the specified <see cref="System.Object"></see> is equal to the current <see cref="System.Object"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the state of the current membership condition.</returns>
    </member>
    <member name="T:System.Security.Policy.NetCodeGroup">
      <summary>Grants Web permission to the site from which the assembly was downloaded. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.#ctor(System.Security.Policy.IMembershipCondition)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.NetCodeGroup"></see> class.</summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies code access security policy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="membershipCondition">membershipCondition</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="membershipCondition">membershipCondition</paramref> parameter is not valid.</exception>
    </member>
    <member name="F:System.Security.Policy.NetCodeGroup.AbsentOriginScheme">
      <summary>Contains a value used to specify connection access for code with an unknown or unrecognized origin scheme.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.AddConnectAccess(System.String,System.Security.Policy.CodeConnectAccess)">
      <summary>Adds the specified connection access to the current code group.</summary>
      <param name="originScheme">A <see cref="T:System.String"></see> containing the scheme to match against the code&amp;#39;s scheme.</param>
      <param name="connectAccess">A <see cref="T:System.Security.Policy.CodeConnectAccess"></see> that specifies the scheme and port code can use to connect back to its origin server.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="originScheme">originScheme</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="originScheme">originScheme</paramref> contains characters that are not permitted in schemes.  
 -or-  
 <paramref name="originScheme">originScheme</paramref> = <see cref="System.Security.Policy.NetCodeGroup.AbsentOriginScheme"></see> and <paramref name="connectAccess">connectAccess</paramref> specifies <see cref="System.Security.Policy.CodeConnectAccess.OriginScheme"></see> as its scheme.</exception>
    </member>
    <member name="F:System.Security.Policy.NetCodeGroup.AnyOtherOriginScheme">
      <summary>Contains a value used to specify any other unspecified origin scheme.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.AttributeString">
      <summary>Gets a string representation of the attributes of the policy statement for the code group.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Copy">
      <summary>Makes a deep copy of the current code group.</summary>
      <returns>An equivalent copy of the current code group, including its membership conditions and child code groups.</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Equals(System.Object)">
      <summary>Determines whether the specified code group is equivalent to the current code group.</summary>
      <param name="o">The <see cref="T:System.Security.Policy.NetCodeGroup"></see> object to compare with the current code group.</param>
      <returns>true if the specified code group is equivalent to the current code group; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.GetConnectAccessRules">
      <summary>Gets the connection access information for the current code group.</summary>
      <returns>A <see cref="System.Collections.DictionaryEntry"></see> array containing connection access information.</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.GetHashCode">
      <summary>Gets the hash code of the current code group.</summary>
      <returns>The hash code of the current code group.</returns>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.MergeLogic">
      <summary>Gets the logic to use for merging groups.</summary>
      <returns>The string &amp;quot;Union&amp;quot;.</returns>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.PermissionSetName">
      <summary>Gets the name of the <see cref="T:System.Security.NamedPermissionSet"></see> for the code group.</summary>
      <returns>Always the string &amp;quot;Same site Web.&amp;quot;</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.ResetConnectAccess">
      <summary>Removes all connection access information for the current code group.</summary>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>Resolves policy for the code group and its descendants for a set of evidence.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> for the assembly.</param>
      <returns>A <see cref="System.Security.Policy.PolicyStatement"></see> that consists of the permissions granted by the code group with optional attributes, or null if the code group does not apply (the membership condition does not match the specified evidence).</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
      <exception cref="T:System.Security.Policy.PolicyException">More than one code group (including the parent code group and any child code groups) is marked <see cref="System.Security.Policy.PolicyStatementAttribute.Exclusive"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>Resolves matching code groups.</summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>The complete set of code groups that were matched by the evidence.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
    </member>
    <member name="T:System.Security.Policy.PermissionRequestEvidence">
      <summary>Defines evidence that represents permission requests. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.#ctor(System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PermissionRequestEvidence"></see> class with the permission request of a code assembly.</summary>
      <param name="request">The minimum permissions the code requires to run.</param>
      <param name="optional">The permissions the code can use if they are granted, but that are not required.</param>
      <param name="denied">The permissions the code explicitly asks not to be granted.</param>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.Copy">
      <summary>Creates an equivalent copy of the current <see cref="T:System.Security.Policy.PermissionRequestEvidence"></see>.</summary>
      <returns>An equivalent copy of the current <see cref="System.Security.Policy.PermissionRequestEvidence"></see>.</returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.DeniedPermissions">
      <summary>Gets the permissions the code explicitly asks not to be granted.</summary>
      <returns>The permissions the code explicitly asks not to be granted.</returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.OptionalPermissions">
      <summary>Gets the permissions the code can use if they are granted, but are not required.</summary>
      <returns>The permissions the code can use if they are granted, but are not required.</returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.RequestedPermissions">
      <summary>Gets the minimum permissions the code requires to run.</summary>
      <returns>The minimum permissions the code requires to run.</returns>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.ToString">
      <summary>Gets a string representation of the state of the <see cref="T:System.Security.Policy.PermissionRequestEvidence"></see>.</summary>
      <returns>A representation of the state of the <see cref="System.Security.Policy.PermissionRequestEvidence"></see>.</returns>
    </member>
    <member name="T:System.Security.Policy.PolicyException">
      <summary>The exception that is thrown when policy forbids code to run.</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException"></see> class with default properties.</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException"></see> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException"></see> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="exception">The exception that is the cause of the current exception. If the exception parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Security.Policy.PolicyLevel">
      <summary>Represents the security policy levels for the common language runtime. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongName)">
      <summary>Adds a <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> corresponding to the specified <see cref="T:System.Security.Policy.StrongName"></see> to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</summary>
      <param name="sn">The <see cref="T:System.Security.Policy.StrongName"></see> used to create the <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> to add to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sn">sn</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.StrongName"></see> specified by the <paramref name="sn">sn</paramref> parameter already has full trust.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)">
      <summary>Adds the specified <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</summary>
      <param name="snMC">The <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> to add to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="snMC">snMC</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.StrongNameMembershipCondition"></see> specified by the <paramref name="snMC">snMC</paramref> parameter already has full trust.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddNamedPermissionSet(System.Security.NamedPermissionSet)">
      <summary>Adds a <see cref="T:System.Security.NamedPermissionSet"></see> to the current policy level.</summary>
      <param name="permSet">The <see cref="T:System.Security.NamedPermissionSet"></see> to add to the current policy level.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="permSet">permSet</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="permSet">permSet</paramref> parameter has the same name as an existing <see cref="System.Security.NamedPermissionSet"></see> in the <see cref="System.Security.Policy.PolicyLevel"></see>.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(System.String,System.Security.PermissionSet)">
      <summary>Replaces a <see cref="T:System.Security.NamedPermissionSet"></see> in the current policy level with the specified <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <param name="name">The name of the <see cref="T:System.Security.NamedPermissionSet"></see> to replace.</param>
      <param name="pSet">The <see cref="T:System.Security.PermissionSet"></see> that replaces the <see cref="T:System.Security.NamedPermissionSet"></see> specified by the name parameter.</param>
      <returns>A copy of the <see cref="System.Security.NamedPermissionSet"></see> that was replaced.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> parameter is null.  
 -or-  
 The <paramref name="pSet">pSet</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter is equal to the name of a reserved permission set.  
 -or-  
 The <see cref="System.Security.PermissionSet"></see> specified by the <paramref name="pSet">pSet</paramref> parameter cannot be found.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.CreateAppDomainLevel">
      <summary>Creates a new policy level for use at the application domain policy level.</summary>
      <returns>The newly created <see cref="System.Security.Policy.PolicyLevel"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a given state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.SecurityElement"></see> specified by the <paramref name="e">e</paramref> parameter is invalid.</exception>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.FullTrustAssemblies">
      <summary>Gets a list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> objects used to determine whether an assembly is a member of the group of assemblies used to evaluate security policy.</summary>
      <returns>A list of <see cref="System.Security.Policy.StrongNameMembershipCondition"></see> objects used to determine whether an assembly is a member of the group of assemblies used to evaluate security policy. These assemblies are granted full trust during security policy evaluation of assemblies not in the list.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.GetNamedPermissionSet(System.String)">
      <summary>Returns the <see cref="T:System.Security.NamedPermissionSet"></see> in the current policy level with the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.Security.NamedPermissionSet"></see> to find.</param>
      <returns>The <see cref="System.Security.NamedPermissionSet"></see> in the current policy level with the specified name, if found; otherwise, null.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.Label">
      <summary>Gets a descriptive label for the policy level.</summary>
      <returns>The label associated with the policy level.</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.NamedPermissionSets">
      <summary>Gets a list of named permission sets defined for the policy level.</summary>
      <returns>A list of named permission sets defined for the policy level.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Recover">
      <summary>Replaces the configuration file for this <see cref="T:System.Security.Policy.PolicyLevel"></see> with the last backup (reflecting the state of policy prior to the last time it was saved) and returns it to the state of the last save.</summary>
      <exception cref="T:System.Security.Policy.PolicyException">The policy level does not have a valid configuration file.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongName)">
      <summary>Removes an assembly with the specified <see cref="T:System.Security.Policy.StrongName"></see> from the list of assemblies the policy level uses to evaluate policy.</summary>
      <param name="sn">The <see cref="T:System.Security.Policy.StrongName"></see> of the assembly to remove from the list of assemblies used to evaluate policy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sn">sn</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The assembly with the <see cref="System.Security.Policy.StrongName"></see> specified by the <paramref name="sn">sn</paramref> parameter does not have full trust.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)">
      <summary>Removes an assembly with the specified <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> from the list of assemblies the policy level uses to evaluate policy.</summary>
      <param name="snMC">The <see cref="T:System.Security.Policy.StrongNameMembershipCondition"></see> of the assembly to remove from the list of assemblies used to evaluate policy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="snMC">snMC</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.Policy.StrongNameMembershipCondition"></see> specified by the <paramref name="snMC">snMC</paramref> parameter does not have full trust.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.Security.NamedPermissionSet)">
      <summary>Removes the specified <see cref="T:System.Security.NamedPermissionSet"></see> from the current policy level.</summary>
      <param name="permSet">The <see cref="T:System.Security.NamedPermissionSet"></see> to remove from the current policy level.</param>
      <returns>The <see cref="System.Security.NamedPermissionSet"></see> that was removed.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Security.NamedPermissionSet"></see> specified by the <paramref name="permSet">permSet</paramref> parameter was not found.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="permSet">permSet</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.String)">
      <summary>Removes the <see cref="T:System.Security.NamedPermissionSet"></see> with the specified name from the current policy level.</summary>
      <param name="name">The name of the <see cref="T:System.Security.NamedPermissionSet"></see> to remove.</param>
      <returns>The <see cref="System.Security.NamedPermissionSet"></see> that was removed.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="name">name</paramref> parameter is equal to the name of a reserved permission set.  
 -or-  
 A <see cref="System.Security.NamedPermissionSet"></see> with the specified name cannot be found.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Reset">
      <summary>Returns the current policy level to the default state.</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Resolve(System.Security.Policy.Evidence)">
      <summary>Resolves policy based on evidence for the policy level, and returns the resulting <see cref="T:System.Security.Policy.PolicyStatement"></see>.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> used to resolve the <see cref="T:System.Security.Policy.PolicyLevel"></see>.</param>
      <returns>The resulting <see cref="System.Security.Policy.PolicyStatement"></see>.</returns>
      <exception cref="T:System.Security.Policy.PolicyException">The policy level contains multiple matching code groups marked as exclusive.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>Resolves policy at the policy level and returns the root of a code group tree that matches the evidence.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> used to resolve policy.</param>
      <returns>A <see cref="System.Security.Policy.CodeGroup"></see> representing the root of a tree of code groups matching the specified evidence.</returns>
      <exception cref="T:System.Security.Policy.PolicyException">The policy level contains multiple matching code groups marked as exclusive.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence">evidence</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.RootCodeGroup">
      <summary>Gets or sets the root code group for the policy level.</summary>
      <returns>The <see cref="System.Security.Policy.CodeGroup"></see> that is the root of the tree of policy level code groups.</returns>
      <exception cref="T:System.ArgumentNullException">The value for <see cref="System.Security.Policy.PolicyLevel.RootCodeGroup"></see> is null.</exception>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.StoreLocation">
      <summary>Gets the path where the policy file is stored.</summary>
      <returns>The path where the policy file is stored, or null if the <see cref="System.Security.Policy.PolicyLevel"></see> does not have a storage location.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.Type">
      <summary>Gets the type of the policy level.</summary>
      <returns>One of the <see cref="System.Security.PolicyLevelType"></see> values.</returns>
    </member>
    <member name="T:System.Security.Policy.PolicyStatement">
      <summary>Represents the statement of a <see cref="T:System.Security.Policy.CodeGroup"></see> describing the permissions and other information that apply to code with a particular set of evidence. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.#ctor(System.Security.PermissionSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyStatement"></see> class with the specified <see cref="T:System.Security.PermissionSet"></see>.</summary>
      <param name="permSet">The <see cref="T:System.Security.PermissionSet"></see> with which to initialize the new instance.</param>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.#ctor(System.Security.PermissionSet,System.Security.Policy.PolicyStatementAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyStatement"></see> class with the specified <see cref="T:System.Security.PermissionSet"></see> and attributes.</summary>
      <param name="permSet">The <see cref="T:System.Security.PermissionSet"></see> with which to initialize the new instance.</param>
      <param name="attributes">A bitwise combination of the <see cref="T:System.Security.Policy.PolicyStatementAttribute"></see> values.</param>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.Attributes">
      <summary>Gets or sets the attributes of the policy statement.</summary>
      <returns>The attributes of the policy statement.</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.AttributeString">
      <summary>Gets a string representation of the attributes of the policy statement.</summary>
      <returns>A text string representing the attributes of the policy statement.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.Copy">
      <summary>Creates an equivalent copy of the current policy statement.</summary>
      <returns>A new copy of the <see cref="System.Security.Policy.PolicyStatement"></see> with <see cref="System.Security.Policy.PolicyStatement.PermissionSet"></see> and <see cref="System.Security.Policy.PolicyStatement.Attributes"></see> identical to those of the current <see cref="System.Security.Policy.PolicyStatement"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Security.Policy.PolicyStatement"></see> object is equal to the current <see cref="T:System.Security.Policy.PolicyStatement"></see>.</summary>
      <param name="obj">The <see cref="T:System.Security.Policy.PolicyStatement"></see> object to compare with the current <see cref="T:System.Security.Policy.PolicyStatement"></see>.</param>
      <returns>true if the specified <see cref="System.Security.Policy.PolicyStatement"></see> is equal to the current <see cref="System.Security.Policy.PolicyStatement"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a given state from an XML encoding.</summary>
      <param name="et">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="et">et</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="et">et</paramref> parameter is not a valid <see cref="System.Security.Policy.PolicyStatement"></see> encoding.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a given state from an XML encoding.</summary>
      <param name="et">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context for lookup of <see cref="T:System.Security.NamedPermissionSet"></see> values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="et">et</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="et">et</paramref> parameter is not a valid <see cref="System.Security.Policy.PolicyStatement"></see> encoding.</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Security.Policy.PolicyStatement"></see> object that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="System.Security.Policy.PolicyStatement"></see> object.</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.PermissionSet">
      <summary>Gets or sets the <see cref="T:System.Security.PermissionSet"></see> of the policy statement.</summary>
      <returns>The <see cref="System.Security.PermissionSet"></see> of the policy statement.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel"></see> context for lookup of <see cref="T:System.Security.NamedPermissionSet"></see> values.</param>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="T:System.Security.Policy.PolicyStatementAttribute">
      <summary>Defines special attribute flags for security policy on code groups.</summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.All">
      <summary>All attribute flags are set.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.Exclusive">
      <summary>The exclusive code group flag. When a code group has this flag set, only the permissions associated with that code group are granted to code belonging to the code group. At most, one code group matching a given piece of code can be set as exclusive.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.LevelFinal">
      <summary>The flag representing a policy statement that causes lower policy levels to not be evaluated as part of the resolve operation, effectively allowing the policy level to override lower levels.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.Nothing">
      <summary>No flags are set.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Policy.Publisher">
      <summary>Provides the Authenticode X.509v3 digital signature of a code assembly as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Publisher.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Publisher"></see> class with the Authenticode X.509v3 certificate containing the publisher&amp;#39;s public key.</summary>
      <param name="cert">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> that contains the software publisher&amp;#39;s public key.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cert">cert</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Security.Policy.Publisher.Certificate">
      <summary>Gets the publisher&amp;#39;s Authenticode X.509v3 certificate.</summary>
      <returns>The publisher&amp;#39;s <see cref="System.Security.Cryptography.X509Certificates.X509Certificate"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.Copy">
      <summary>Creates an equivalent copy of the <see cref="T:System.Security.Policy.Publisher"></see>.</summary>
      <returns>A new, identical copy of the <see cref="System.Security.Policy.Publisher"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates an identity permission that corresponds to the current instance of the <see cref="T:System.Security.Policy.Publisher"></see> class.</summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> from which to construct the identity permission.</param>
      <returns>A <see cref="System.Security.Permissions.PublisherIdentityPermission"></see> for the specified <see cref="System.Security.Policy.Publisher"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Security.Policy.Publisher"></see> to the specified object for equivalence.</summary>
      <param name="o">The <see cref="T:System.Security.Policy.Publisher"></see> to test for equivalence with the current object.</param>
      <returns>true if the two instances of the <see cref="System.Security.Policy.Publisher"></see> class are equal; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="o">o</paramref> parameter is not a <see cref="System.Security.Policy.Publisher"></see> object.</exception>
    </member>
    <member name="M:System.Security.Policy.Publisher.GetHashCode">
      <summary>Gets the hash code of the current <see cref="P:System.Security.Policy.Publisher.Certificate"></see>.</summary>
      <returns>The hash code of the current <see cref="System.Security.Policy.Publisher.Certificate"></see>.</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Policy.Publisher"></see>.</summary>
      <returns>A representation of the current <see cref="System.Security.Policy.Publisher"></see>.</returns>
    </member>
    <member name="T:System.Security.CodeAccessPermission">
      <summary>Defines the underlying structure of all code access permissions.</summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.CodeAccessPermission"></see> class.</summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Assert">
      <summary>Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using <see cref="M:System.Security.CodeAccessPermission.Assert"></see> can create security issues.</summary>
      <exception cref="T:System.Security.SecurityException">The calling code does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.Assertion"></see>.  
 -or-  
 There is already an active <see cref="System.Security.CodeAccessPermission.Assert"></see> for the current frame.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Copy">
      <summary>When implemented by a derived class, creates and returns an identical copy of the current permission object.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Demand">
      <summary>Forces a <see cref="T:System.Security.SecurityException"></see> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</summary>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have the permission specified by the current instance.  
 -or-  
 A caller higher in the call stack has called <see cref="System.Security.CodeAccessPermission.Deny"></see> on the current permission object.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Deny">
      <summary>Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</summary>
      <exception cref="T:System.Security.SecurityException">There is already an active <see cref="System.Security.CodeAccessPermission.Deny"></see> for the current frame.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Security.CodeAccessPermission"></see> object is equal to the current <see cref="T:System.Security.CodeAccessPermission"></see>.</summary>
      <param name="obj">The <see cref="T:System.Security.CodeAccessPermission"></see> object to compare with the current <see cref="T:System.Security.CodeAccessPermission"></see>.</param>
      <returns>true if the specified <see cref="System.Security.CodeAccessPermission"></see> object is equal to the current <see cref="System.Security.CodeAccessPermission"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
      <summary>When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="elem">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="elem">elem</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="elem">elem</paramref> parameter does not contain the XML encoding for an instance of the same type as the current instance.  
 -or-  
 The version number of the <paramref name="elem">elem</paramref> parameter is not supported.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Security.CodeAccessPermission"></see> object that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="System.Security.CodeAccessPermission"></see> object.</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
      <summary>When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not an instance of the same class as the current permission.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.PermitOnly">
      <summary>Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</summary>
      <exception cref="T:System.Security.SecurityException">There is already an active <see cref="System.Security.CodeAccessPermission.PermitOnly"></see> for the current frame.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertAll">
      <summary>Causes all previous overrides for the current frame to be removed and no longer in effect.</summary>
      <exception cref="T:System.InvalidOperationException">There is no previous <see cref="System.Security.CodeAccessPermission.Assert"></see>, <see cref="System.Security.CodeAccessPermission.Deny"></see>, or <see cref="System.Security.CodeAccessPermission.PermitOnly"></see> for the current frame.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertAssert">
      <summary>Causes any previous <see cref="M:System.Security.CodeAccessPermission.Assert"></see> for the current frame to be removed and no longer in effect.</summary>
      <exception cref="T:System.InvalidOperationException">There is no previous <see cref="System.Security.CodeAccessPermission.Assert"></see> for the current frame.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertDeny">
      <summary>Causes any previous <see cref="M:System.Security.CodeAccessPermission.Deny"></see> for the current frame to be removed and no longer in effect.</summary>
      <exception cref="T:System.InvalidOperationException">There is no previous <see cref="System.Security.CodeAccessPermission.Deny"></see> for the current frame.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertPermitOnly">
      <summary>Causes any previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly"></see> for the current frame to be removed and no longer in effect.</summary>
      <exception cref="T:System.InvalidOperationException">There is no previous <see cref="System.Security.CodeAccessPermission.PermitOnly"></see> for the current frame.</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.ToString">
      <summary>Creates and returns a string representation of the current permission object.</summary>
      <returns>A string representation of the current permission object.</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.ToXml">
      <summary>When overridden in a derived class, creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
      <summary>When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.NotSupportedException">The <paramref name="other">other</paramref> parameter is not null. This method is only supported at this level when passed null.</exception>
    </member>
    <member name="T:System.Security.XmlSyntaxException">
      <summary>The exception that is thrown when there is a syntax error in XML parsing. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException"></see> class with default properties.</summary>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException"></see> class with the line number where the exception was detected.</summary>
      <param name="lineNumber">The line number of the XML stream where the XML syntax error was detected.</param>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException"></see> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException"></see> class with a specified error message and the line number where the exception was detected.</summary>
      <param name="lineNumber">The line number of the XML stream where the XML syntax error was detected.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Transactions.DistributedTransactionPermission">
      <summary>The permission that is demanded by <see cref="N:System.Transactions"></see> when management of a transaction is escalated to MSDTC. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Transactions.DistributedTransactionPermission"></see> class.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding used to reconstruct the permission.</param>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Returns a value that indicates whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission to test for the subset relationship. This permission must be the same type as the current permission.</param>
      <returns>true if the current <see cref="System.Security.IPermission"></see> is a subset of the specified <see cref="System.Security.IPermission"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.IsUnrestricted">
      <summary>Returns a value that indicates whether unrestricted access to the resource that is protected by the current permission is allowed.</summary>
      <returns>true if unrestricted use of the resource protected by the permission is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> that contains the XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>An <see cref="System.Security.IPermission"></see> that represents the union of the current permission and the specified permission.</returns>
    </member>
    <member name="T:System.Transactions.DistributedTransactionPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Transactions.DistributedTransactionPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Transactions.DistributedTransactionPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermissionAttribute.CreatePermission">
      <summary>Creates a permission object that can then be serialized into binary form and persistently stored along with the <see cref="T:System.Security.Permissions.SecurityAction"></see> in an assembly&amp;#39;s metadata.</summary>
      <returns>A serializable permission object.</returns>
    </member>
    <member name="P:System.Transactions.DistributedTransactionPermissionAttribute.Unrestricted">
      <summary>Gets or sets a value indicating whether full (unrestricted) permission to the resource protected by the attribute is declared.</summary>
      <returns>true if full permission to the protected resource is declared; otherwise, false.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermission">
      <summary>Allows control of code access permissions for <see cref="T:System.Diagnostics.PerformanceCounter"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission"></see> class.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission"></see> class with the specified permission access level entries.</summary>
      <param name="permissionAccessEntries">An array of <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> objects. The <see cref="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries"></see> property is set to this value.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="permissionAccessEntries">permissionAccessEntries</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission"></see> class with the specified permission state.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission"></see> class with the specified access levels, the name of the computer to use, and the category associated with the performance counter.</summary>
      <param name="permissionAccess">One of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess"></see> values.</param>
      <param name="machineName">The server on which the performance counter and its associate category reside.</param>
      <param name="categoryName">The name of the performance counter category (performance object) with which the performance counter is associated.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries">
      <summary>Gets the collection of permission entries for this permissions request.</summary>
      <returns>A <see cref="System.Diagnostics.PerformanceCounterPermissionEntryCollection"></see> that contains the permission entries for this permissions request.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAccess">
      <summary>Defines access levels used by <see cref="T:System.Diagnostics.PerformanceCounter"></see> permission classes.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can read, write, and create categories.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Browse">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can read categories.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Instrument">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can read and write categories.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.None">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> has no permissions.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can read categories.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can write categories.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAttribute">
      <summary>Allows declaritive performance counter permission checks.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.CategoryName">
      <summary>Gets or sets the name of the performance counter category.</summary>
      <returns>The name of the performance counter category (performance object).</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.CreatePermission">
      <summary>Creates the permission based on the requested access levels that are set through the <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess"></see> property on the attribute.</summary>
      <returns>An <see cref="System.Security.IPermission"></see> that represents the created permission.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName">
      <summary>Gets or sets the computer name for the performance counter.</summary>
      <returns>The server on which the category of the performance counter resides.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName"></see> format is invalid.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess">
      <summary>Gets or sets the access levels used in the permissions request.</summary>
      <returns>A bitwise combination of the <see cref="System.Diagnostics.PerformanceCounterPermissionAccess"></see> values. The default is <see cref="System.Diagnostics.EventLogPermissionAccess.Write"></see>.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntry">
      <summary>Defines the smallest unit of a code access security permission that is set for a <see cref="T:System.Diagnostics.PerformanceCounter"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntry.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> class.</summary>
      <param name="permissionAccess">A bitwise combination of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess"></see> values. The <see cref="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess"></see> property is set to this value.</param>
      <param name="machineName">The server on which the category of the performance counter resides.</param>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="categoryName">categoryName</paramref> is null.  
 -or-  
 <paramref name="machineName">machineName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="permissionAccess">permissionAccess</paramref> is not a valid <see cref="System.Diagnostics.PerformanceCounterPermissionAccess"></see> value.  
 -or-  
 <paramref name="machineName">machineName</paramref> is not a valid computer name.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.CategoryName">
      <summary>Gets the name of the performance counter category (performance object).</summary>
      <returns>The name of the performance counter category (performance object).</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.MachineName">
      <summary>Gets the name of the server on which the category of the performance counter resides.</summary>
      <returns>The name of the server on which the category resides.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess">
      <summary>Gets the permission access level of the entry.</summary>
      <returns>A bitwise combination of the <see cref="System.Diagnostics.PerformanceCounterPermissionAccess"></see> values.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection">
      <summary>Contains a strongly typed collection of <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> objects.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Add(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Adds a specified <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> to this collection.</summary>
      <param name="value">The <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> object to add.</param>
      <returns>The zero-based index of the added <see cref="System.Diagnostics.PerformanceCounterPermissionEntry"></see> object.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>Appends a set of specified permission entries to this collection.</summary>
      <param name="value">An array of type <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> objects that contains the permission entries to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
      <summary>Appends a set of specified permission entries to this collection.</summary>
      <param name="value">A <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"></see> that contains the permission entries to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Contains(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Determines whether this collection contains a specified <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> object.</summary>
      <param name="value">The <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> object to find.</param>
      <returns>true if the specified <see cref="System.Diagnostics.PerformanceCounterPermissionEntry"></see> object belongs to this collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.CopyTo(System.Diagnostics.PerformanceCounterPermissionEntry[],System.Int32)">
      <summary>Copies the permission entries from this collection to an array, starting at a particular index of the array.</summary>
      <param name="array">An array of type <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> that receives this collection&amp;#39;s permission entries.</param>
      <param name="index">The zero-based index at which to begin copying the permission entries.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.IndexOf(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Determines the index of a specified permission entry in this collection.</summary>
      <param name="value">The permission entry for which to search.</param>
      <returns>The zero-based index of the specified permission entry, or -1 if the permission entry was not found in the collection.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Inserts a permission entry into this collection at a specified index.</summary>
      <param name="index">The zero-based index of the collection at which to insert the permission entry.</param>
      <param name="value">The permission entry to insert into this collection.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Item(System.Int32)">
      <summary>Gets or sets the object at a specified index.</summary>
      <param name="index">The zero-based index into the collection.</param>
      <returns>The <see cref="System.Diagnostics.PerformanceCounterPermissionEntry"></see> object that exists at the specified index.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnClear">
      <summary>Performs additional custom processes after clearing the contents of the collection.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>Performs additional custom processes before a new permission entry is inserted into the collection.</summary>
      <param name="index">The zero-based index at which to insert value.</param>
      <param name="value">The new value of the permission entry at index.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>Performs additional custom processes when removing a new permission entry from the collection.</summary>
      <param name="index">The zero-based index at which value can be found.</param>
      <param name="value">The permission entry to remove from index.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Performs additional custom processes before setting a value in the collection.</summary>
      <param name="index">The zero-based index at which oldValue can be found.</param>
      <param name="oldValue">The value to replace with newValue.</param>
      <param name="newValue">The new value of the permission entry at index.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Remove(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Removes a specified permission entry from this collection.</summary>
      <param name="value">The permission entry to remove.</param>
    </member>
    <member name="T:System.Net.PeerToPeer.PnrpPermission">
      <summary>Specifies the values that are used in <see cref="System.Net.PeerToPeer"></see> object permissions.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PnrpPermission"></see> class with the supplied initial permission state.</summary>
      <param name="state">One of the values in the <see cref="T:System.Security.Permissions.PermissionState"></see> enumeration.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.Copy">
      <summary>Creates and returns an identical copy of the current <see cref="T:System.Net.PeerToPeer.PnrpPermission"></see>.</summary>
      <returns>An object with an IPermission interface, whose instance contains a copy of the current instance of <see cref="System.Net.PeerToPeer.PnrpPermission"></see>.</returns>
      <exception cref="T:System.ArgumentException">
The parameter is not a valid <see cref="System.Net.PeerToPeer.PnrpPermission"></see> element.  

The parameter&amp;#39;s version number is not supported.</exception>
      <exception cref="T:System.ArgumentNullException">The parameter is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentException">
The parameter is not a valid <see cref="System.Net.PeerToPeer.PnrpPermission"></see> element.  

The parameter&amp;#39;s version number is not supported.</exception>
      <exception cref="T:System.ArgumentNullException">The parameter is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current <see cref="T:System.Net.PeerToPeer.PnrpPermission"></see> and the specified permission.</summary>
      <param name="target">A permission to <see cref="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)"></see> with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current <see cref="System.Net.PeerToPeer.PnrpPermission"></see> and the specified permission. This new permission is a null reference (Nothing in Visual Basic) if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The target parameter is not a null reference (Nothing in Visual Basic) and is not an instance of the same class as the current permission.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current <see cref="T:System.Net.PeerToPeer.PnrpPermission"></see> is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>True if the current <see cref="System.Net.PeerToPeer.PnrpPermission"></see> is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The target parameter is not a null reference (Nothing in Visual Basic) and is not an instance of the same class as the current permission.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.IsUnrestricted">
      <summary>Returns a value specifying whether the current <see cref="T:System.Net.PeerToPeer.PnrpPermission"></see> is unrestricted.</summary>
      <returns>True if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.ToXml">
      <summary>Creates an XML encoding of the <see cref="T:System.Net.PeerToPeer.PnrpPermission"></see> and its current state.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> object that contains an XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current <see cref="T:System.Net.PeerToPeer.PnrpPermission"></see> and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the <see cref="System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)"></see> of the current <see cref="System.Net.PeerToPeer.PnrpPermission"></see> and the specified permission.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> parameter is invalid.</exception>
    </member>
    <member name="T:System.Net.PeerToPeer.PnrpPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Net.PeerToPeer.PnrpPermission"></see> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PnrpPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.IPermission"></see>.</summary>
      <returns>A new <see cref="System.Security.IPermission"></see> object.</returns>
    </member>
    <member name="T:System.Net.PeerToPeer.PnrpScope">
      <summary>Specifies the different scopes of a PNRP cloud.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.All">
      <summary>All IP addresses are allowed to register with the PNRP <see cref="T:System.Net.PeerToPeer.Cloud"></see>. There is no difference between any scope and all scopes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.Global">
      <summary>The scope is global; all valid IP addresses are allowed to register with the PNRP <see cref="T:System.Net.PeerToPeer.Cloud"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.LinkLocal">
      <summary>The scope is link-local; only IP addresses defined for the local area subnet are allowed to register with the PNRP <see cref="T:System.Net.PeerToPeer.Cloud"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.SiteLocal">
      <summary>The scope is site-local; only IP addresses defined for the site are allowed to register with the PNRP.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.SocketPermission">
      <summary>Controls rights to make or accept connections on a transport address.</summary>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.SocketPermission"></see> class that allows unrestricted access to the <see cref="T:System.Net.Sockets.Socket"></see> or disallows access to the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.SocketPermission"></see> class for the given transport address with the specified permission.</summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkAccess"></see> values.</param>
      <param name="transport">One of the <see cref="T:System.Net.TransportType"></see> values.</param>
      <param name="hostName">The host name for the transport address.</param>
      <param name="portNumber">The port number for the transport address.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostName">hostName</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.SocketPermission.AcceptList">
      <summary>Gets a list of <see cref="T:System.Net.EndpointPermission"></see> instances that identifies the endpoints that can be accepted under this permission instance.</summary>
      <returns>An instance that implements the <see cref="System.Collections.IEnumerator"></see> interface that contains <see cref="System.Net.EndpointPermission"></see> instances.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.AddPermission(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>Adds a permission to the set of permissions for a transport address.</summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkAccess"></see> values.</param>
      <param name="transport">One of the <see cref="T:System.Net.TransportType"></see> values.</param>
      <param name="hostName">The host name for the transport address.</param>
      <param name="portNumber">The port number for the transport address.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostName">hostName</paramref> is null.</exception>
    </member>
    <member name="F:System.Net.SocketPermission.AllPorts">
      <summary>Defines a constant that represents all ports.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Net.SocketPermission.ConnectList">
      <summary>Gets a list of <see cref="T:System.Net.EndpointPermission"></see> instances that identifies the endpoints that can be connected to under this permission instance.</summary>
      <returns>An instance that implements the <see cref="System.Collections.IEnumerator"></see> interface that contains <see cref="System.Net.EndpointPermission"></see> instances.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.Copy">
      <summary>Creates a copy of a <see cref="T:System.Net.SocketPermission"></see> instance.</summary>
      <returns>A new instance of the <see cref="System.Net.SocketPermission"></see> class that is a copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a <see cref="T:System.Net.SocketPermission"></see> instance for an XML encoding.</summary>
      <param name="securityElement">The XML encoding used to reconstruct the <see cref="T:System.Net.SocketPermission"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="securityElement">securityElement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="securityElement">securityElement</paramref> is not a permission element for this type.</exception>
    </member>
    <member name="M:System.Net.SocketPermission.Intersect(System.Security.IPermission)">
      <summary>Returns the logical intersection between two <see cref="T:System.Net.SocketPermission"></see> instances.</summary>
      <param name="target">The <see cref="T:System.Net.SocketPermission"></see> instance to intersect with the current instance.</param>
      <returns>The <see cref="System.Net.SocketPermission"></see> instance that represents the intersection of two <see cref="System.Net.SocketPermission"></see> instances. If the intersection is empty, the method returns null. If the <paramref name="target">target</paramref> parameter is a null reference, the method returns null.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not a <see cref="System.Net.SocketPermission"></see>.</exception>
      <exception cref="T:System.Security.SecurityException"><see cref="System.Net.DnsPermission"></see> is not granted to the method caller.</exception>
    </member>
    <member name="M:System.Net.SocketPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines if the current permission is a subset of the specified permission.</summary>
      <param name="target">A <see cref="T:System.Net.SocketPermission"></see> that is to be tested for the subset relationship.</param>
      <returns>If <paramref name="target">target</paramref> is null, this method returns true if the current instance defines no permissions; otherwise, false. If <paramref name="target">target</paramref> is not null, this method returns true if the current instance defines a subset of <paramref name="target">target</paramref> permissions; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not a <see cref="System.Net.Sockets.SocketException"></see>.</exception>
      <exception cref="T:System.Security.SecurityException"><see cref="System.Net.DnsPermission"></see> is not granted to the method caller.</exception>
    </member>
    <member name="M:System.Net.SocketPermission.IsUnrestricted">
      <summary>Checks the overall permission state of the object.</summary>
      <returns>true if the <see cref="System.Net.SocketPermission"></see> instance is created with the Unrestricted value from <see cref="System.Security.Permissions.PermissionState"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.ToXml">
      <summary>Creates an XML encoding of a <see cref="T:System.Net.SocketPermission"></see> instance and its current state.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> instance that contains an XML-encoded representation of the <see cref="System.Net.SocketPermission"></see> instance, including state information.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.Union(System.Security.IPermission)">
      <summary>Returns the logical union between two <see cref="T:System.Net.SocketPermission"></see> instances.</summary>
      <param name="target">The <see cref="T:System.Net.SocketPermission"></see> instance to combine with the current instance.</param>
      <returns>The <see cref="System.Net.SocketPermission"></see> instance that represents the union of two <see cref="System.Net.SocketPermission"></see> instances. If <paramref name="target">target</paramref> parameter is null, it returns a copy of the current instance.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not a <see cref="System.Net.SocketPermission"></see>.</exception>
    </member>
    <member name="T:System.Net.SocketPermissionAttribute">
      <summary>Specifies security actions to control <see cref="T:System.Net.Sockets.Socket"></see> connections. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.SocketPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see> value.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="action">action</paramref> is not a valid <see cref="System.Security.Permissions.SecurityAction"></see> value.</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Access">
      <summary>Gets or sets the network access method that is allowed by this <see cref="T:System.Net.SocketPermissionAttribute"></see>.</summary>
      <returns>A string that contains the network access method that is allowed by this instance of <see cref="System.Net.SocketPermissionAttribute"></see>. Valid values are &amp;quot;Accept&amp;quot; and &amp;quot;Connect.&amp;quot;</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Net.SocketPermissionAttribute.Access"></see> property is not null when you attempt to set the value. To specify more than one Access method, use an additional attribute declaration statement.</exception>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of the <see cref="T:System.Net.SocketPermission"></see> class.</summary>
      <returns>An instance of the <see cref="System.Net.SocketPermission"></see> class that corresponds to the security declaration.</returns>
      <exception cref="T:System.ArgumentException">One or more of the current instance&amp;#39;s <see cref="System.Net.SocketPermissionAttribute.Access"></see>, <see cref="System.Net.SocketPermissionAttribute.Host"></see>, <see cref="System.Net.SocketPermissionAttribute.Transport"></see>, or <see cref="System.Net.SocketPermissionAttribute.Port"></see> properties is null.</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Host">
      <summary>Gets or sets the DNS host name or IP address that is specified by this <see cref="T:System.Net.SocketPermissionAttribute"></see>.</summary>
      <returns>A string that contains the DNS host name or IP address that is associated with this instance of <see cref="System.Net.SocketPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="System.Net.SocketPermissionAttribute.Host"></see> is not null when you attempt to set the value. To specify more than one host, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Port">
      <summary>Gets or sets the port number that is associated with this <see cref="T:System.Net.SocketPermissionAttribute"></see>.</summary>
      <returns>A string that contains the port number that is associated with this instance of <see cref="System.Net.SocketPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="System.Net.SocketPermissionAttribute.Port"></see> property is null when you attempt to set the value. To specify more than one port, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Transport">
      <summary>Gets or sets the <see cref="T:System.Net.TransportType"></see> that is specified by this <see cref="T:System.Net.SocketPermissionAttribute"></see>.</summary>
      <returns>A string that contains the <see cref="System.Net.TransportType"></see> that is associated with this <see cref="System.Net.SocketPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="System.Net.SocketPermissionAttribute.Transport"></see> is not null when you attempt to set the value. To specify more than one transport type, use an additional attribute declaration statement.</exception>
    </member>
    <member name="T:System.Data.OracleClient.OraclePermission">
      <summary>Enables the .NET Framework Data Provider for Oracle to help ensure that a user has a security level adequate to access an Oracle database.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OraclePermission"></see> class with one of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>Creates a new set of permissions.</summary>
      <param name="connectionString">The connection string.</param>
      <param name="restrictions">The key restrictions.</param>
      <param name="behavior">One of the <see cref="T:System.Data.KeyRestrictionBehavior"></see> enumerations.</param>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermission.AllowBlankPassword">
      <summary>Gets a value indicating whether a blank password is allowed.</summary>
      <returns>true if a blank password is allowed, otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Copy">
      <summary>When implemented by a derived class, creates and returns an identical copy of the current permission object.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.FromXml(System.Security.SecurityElement)">
      <summary>When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="securityElement">A <see cref="T:System.Security.SecurityElement"></see> expression.</param>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Intersect(System.Security.IPermission)">
      <summary>When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.IsUnrestricted">
      <summary>Returns a value indicating whether the permission can be represented as unrestricted without any knowledge of the permission semantics.</summary>
      <returns>true if the permission can be represented as unrestricted.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OraclePermissionAttribute">
      <summary>Associates a security action with a custom security attribute.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OraclePermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values representing an action that can be performed using declarative security.</param>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.AllowBlankPassword">
      <summary>Gets or sets a value indicating whether a blank password is allowed.</summary>
      <returns>true if a blank password is allowed, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.ConnectionString">
      <summary>Gets or sets a permitted connection string.</summary>
      <returns>A permitted connection string.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.CreatePermission">
      <summary>Returns an <see cref="T:System.Data.OracleClient.OraclePermission"></see> object that is configured according to the attribute properties.</summary>
      <returns>An <see cref="System.Data.OracleClient.OraclePermission"></see> object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictionBehavior">
      <summary>Identifies whether the list of connection string parameters identified by the <see cref="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictions"></see> property are the only connection string parameters allowed.</summary>
      <returns>One of the <see cref="System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictionBehavior"></see> values.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictions">
      <summary>Gets or sets connection string parameters that are allowed or disallowed.</summary>
      <returns>One or more connection string parameters that are allowed or disallowed.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.ShouldSerializeConnectionString">
      <summary>Identifies whether the attribute should serialize the connection string.</summary>
      <returns>true if the attribute should serialize the connection string; otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.ShouldSerializeKeyRestrictions">
      <summary>Identifies whether the attribute should serialize the set of key restrictions.</summary>
      <returns>true if the attribute should serialize the set of key restrictions, otherwise false.</returns>
    </member>
    <member name="T:System.Net.TransportType">
      <summary>Defines transport types for the <see cref="T:System.Net.SocketPermission"></see> and <see cref="T:System.Net.Sockets.Socket"></see> classes.</summary>
    </member>
    <member name="F:System.Net.TransportType.All">
      <summary>All transport types.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.TransportType.Connectionless">
      <summary>The transport type is connectionless, such as UDP. Specifying this value has the same effect as specifying <see cref="F:System.Net.TransportType.Udp"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.TransportType.ConnectionOriented">
      <summary>The transport is connection oriented, such as TCP. Specifying this value has the same effect as specifying <see cref="F:System.Net.TransportType.Tcp"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.TransportType.Tcp">
      <summary>TCP transport.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.TransportType.Udp">
      <summary>UDP transport.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.WebPermission">
      <summary>Controls rights to access HTTP Internet resources.</summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Net.WebPermission"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Creates a new instance of the <see cref="T:System.Net.WebPermission"></see> class that passes all demands or fails all demands.</summary>
      <param name="state">A <see cref="T:System.Security.Permissions.PermissionState"></see> value.</param>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebPermission"></see> class with the specified access rights for the specified URI.</summary>
      <param name="access">A NetworkAccess value that indicates what kind of access to grant to the specified URI. <see cref="F:System.Net.NetworkAccess.Accept"></see> indicates that the application is allowed to accept connections from the Internet on a local resource. <see cref="F:System.Net.NetworkAccess.Connect"></see> indicates that the application is allowed to connect to specific Internet resources.</param>
      <param name="uriString">A URI string to which access rights are granted.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriString">uriString</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebPermission"></see> class with the specified access rights for the specified URI regular expression.</summary>
      <param name="access">A <see cref="T:System.Net.NetworkAccess"></see> value that indicates what kind of access to grant to the specified URI. <see cref="F:System.Net.NetworkAccess.Accept"></see> indicates that the application is allowed to accept connections from the Internet on a local resource. <see cref="F:System.Net.NetworkAccess.Connect"></see> indicates that the application is allowed to connect to specific Internet resources.</param>
      <param name="uriRegex">A regular expression that describes the URI to which access is to be granted.</param>
    </member>
    <member name="P:System.Net.WebPermission.AcceptList">
      <summary>This property returns an enumeration of a single accept permissions held by this <see cref="T:System.Net.WebPermission"></see>. The possible objects types contained in the returned enumeration are <see cref="T:System.String"></see> and <see cref="T:System.Text.RegularExpressions.Regex"></see>.</summary>
      <returns>The <see cref="System.Collections.IEnumerator"></see> interface that contains accept permissions.</returns>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)">
      <summary>Adds the specified URI string with the specified access rights to the current <see cref="T:System.Net.WebPermission"></see>.</summary>
      <param name="access">A <see cref="T:System.Net.NetworkAccess"></see> that specifies the access rights that are granted to the URI.</param>
      <param name="uriString">A string that describes the URI to which access rights are granted.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriString">uriString</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>Adds the specified URI with the specified access rights to the current <see cref="T:System.Net.WebPermission"></see>.</summary>
      <param name="access">A NetworkAccess that specifies the access rights that are granted to the URI.</param>
      <param name="uriRegex">A regular expression that describes the set of URIs to which access rights are granted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="uriRegex">uriRegex</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Net.WebPermission.ConnectList">
      <summary>This property returns an enumeration of a single connect permissions held by this <see cref="T:System.Net.WebPermission"></see>. The possible objects types contained in the returned enumeration are <see cref="T:System.String"></see> and <see cref="T:System.Text.RegularExpressions.Regex"></see>.</summary>
      <returns>The <see cref="System.Collections.IEnumerator"></see> interface that contains connect permissions.</returns>
    </member>
    <member name="M:System.Net.WebPermission.Copy">
      <summary>Creates a copy of a <see cref="T:System.Net.WebPermission"></see>.</summary>
      <returns>A new instance of the <see cref="System.Net.WebPermission"></see> class that has the same values as the original.</returns>
    </member>
    <member name="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a <see cref="T:System.Net.WebPermission"></see> from an XML encoding.</summary>
      <param name="securityElement">The XML encoding from which to reconstruct the <see cref="T:System.Net.WebPermission"></see>.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="securityElement">securityElement</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> is not a permission element for this type.</exception>
    </member>
    <member name="M:System.Net.WebPermission.Intersect(System.Security.IPermission)">
      <summary>Returns the logical intersection of two <see cref="T:System.Net.WebPermission"></see> instances.</summary>
      <param name="target">The <see cref="T:System.Net.WebPermission"></see> to compare with the current instance.</param>
      <returns>A new <see cref="System.Net.WebPermission"></see> that represents the intersection of the current instance and the <paramref name="target">target</paramref> parameter. If the intersection is empty, the method returns null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null or of type <see cref="System.Net.WebPermission"></see></exception>
    </member>
    <member name="M:System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current <see cref="T:System.Net.WebPermission"></see> is a subset of the specified object.</summary>
      <param name="target">The <see cref="T:System.Net.WebPermission"></see> to compare to the current <see cref="T:System.Net.WebPermission"></see>.</param>
      <returns>true if the current instance is a subset of the <paramref name="target">target</paramref> parameter; otherwise, false. If the target is null, the method returns true for an empty current permission that is not unrestricted and false otherwise.</returns>
      <exception cref="T:System.ArgumentException">The target parameter is not an instance of <see cref="System.Net.WebPermission"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance.</exception>
    </member>
    <member name="M:System.Net.WebPermission.IsUnrestricted">
      <summary>Checks the overall permission state of the <see cref="T:System.Net.WebPermission"></see>.</summary>
      <returns>true if the <see cref="System.Net.WebPermission"></see> was created with the <see cref="System.Security.Permissions.PermissionState.Unrestricted"></see><see cref="System.Security.Permissions.PermissionState"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.WebPermission.ToXml">
      <summary>Creates an XML encoding of a <see cref="T:System.Net.WebPermission"></see> and its current state.</summary>
      <returns>A <see cref="System.Security.SecurityElement"></see> that contains an XML-encoded representation of the <see cref="System.Net.WebPermission"></see>, including state information.</returns>
    </member>
    <member name="M:System.Net.WebPermission.Union(System.Security.IPermission)">
      <summary>Returns the logical union between two instances of the <see cref="T:System.Net.WebPermission"></see> class.</summary>
      <param name="target">The <see cref="T:System.Net.WebPermission"></see> to combine with the current <see cref="T:System.Net.WebPermission"></see>.</param>
      <returns>A <see cref="System.Net.WebPermission"></see> that represents the union of the current instance and the <paramref name="target">target</paramref> parameter. If either WebPermission is <see cref="System.Security.Permissions.PermissionState.Unrestricted"></see>, the method returns a <see cref="System.Net.WebPermission"></see> that is <see cref="System.Security.Permissions.PermissionState.Unrestricted"></see>. If the target is null, the method returns a copy of the current <see cref="System.Net.WebPermission"></see>.</returns>
      <exception cref="T:System.ArgumentException">target is not null or of type <see cref="System.Net.WebPermission"></see>.</exception>
    </member>
    <member name="T:System.Net.WebPermissionAttribute">
      <summary>Specifies permission to access Internet resources. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebPermissionAttribute"></see> class with a value that specifies the security actions that can be performed on this class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="action">action</paramref> is not a valid <see cref="System.Security.Permissions.SecurityAction"></see> value.</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Accept">
      <summary>Gets or sets the URI string accepted by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</summary>
      <returns>A string containing the URI accepted by the current <see cref="System.Net.WebPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="System.Net.WebPermissionAttribute.Accept"></see> is not null when you attempt to set the value. If you wish to specify more than one Accept URI, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.AcceptPattern">
      <summary>Gets or sets a regular expression pattern that describes the URI accepted by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</summary>
      <returns>A string containing a regular expression pattern that describes the URI accepted by the current <see cref="System.Net.WebPermissionAttribute"></see>. This string must be escaped according to the rules for encoding a <see cref="System.Text.RegularExpressions.Regex"></see> constructor string.</returns>
      <exception cref="T:System.ArgumentException"><see cref="System.Net.WebPermissionAttribute.AcceptPattern"></see> is not null when you attempt to set the value. If you wish to specify more than one Accept URI, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Connect">
      <summary>Gets or sets the URI connection string controlled by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</summary>
      <returns>A string containing the URI connection controlled by the current <see cref="System.Net.WebPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="System.Net.WebPermissionAttribute.Connect"></see> is not null when you attempt to set the value. If you wish to specify more than one Connect URI, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.ConnectPattern">
      <summary>Gets or sets a regular expression pattern that describes the URI connection controlled by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</summary>
      <returns>A string containing a regular expression pattern that describes the URI connection controlled by this <see cref="System.Net.WebPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="System.Net.WebPermissionAttribute.ConnectPattern"></see> is not null when you attempt to set the value. If you wish to specify more than one connect URI, use an additional attribute declaration statement.</exception>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of the <see cref="T:System.Net.WebPermission"></see> class.</summary>
      <returns>A <see cref="System.Net.WebPermission"></see> corresponding to the security declaration.</returns>
    </member>
    <member name="T:System.ApplicationIdentity">
      <summary>Provides the ability to uniquely identify a manifest-activated application. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ApplicationIdentity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ApplicationIdentity"></see> class.</summary>
      <param name="applicationIdentityFullName">The full name of the application.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="applicationIdentityFullName">applicationIdentityFullName</paramref> is null.</exception>
    </member>
    <member name="P:System.ApplicationIdentity.CodeBase">
      <summary>Gets the location of the deployment manifest as a URL.</summary>
      <returns>The URL of the deployment manifest.</returns>
    </member>
    <member name="P:System.ApplicationIdentity.FullName">
      <summary>Gets the full name of the application.</summary>
      <returns>The full name of the application, also known as the display name.</returns>
    </member>
    <member name="M:System.ApplicationIdentity.ToString">
      <summary>Returns the full name of the manifest-activated application.</summary>
      <returns>The full name of the manifest-activated application.</returns>
    </member>
    <member name="M:System.ApplicationIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) structure for the serialization.</param>
    </member>
    <member name="T:System.Data.Common.DBDataPermission">
      <summary>Enables a .NET Framework data provider to help ensure that a user has a security level adequate for accessing data.</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor">
      <summary>Initializes a new instance of a DBDataPermission class.</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Data.Common.DBDataPermission)">
      <summary>Initializes a new instance of a DBDataPermission class using an existing DBDataPermission.</summary>
      <param name="permission">An existing DBDataPermission used to create a new DBDataPermission.</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Data.Common.DBDataPermissionAttribute)">
      <summary>Initializes a new instance of a DBDataPermission class with the specified DBDataPermissionAttribute.</summary>
      <param name="permissionAttribute">A security action associated with a custom security attribute.</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of a DBDataPermission class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see> value.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>Initializes a new instance of a DBDataPermission class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see> value, and a value indicating whether a blank password is allowed.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <param name="allowBlankPassword">Indicates whether a blank password is allowed.</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>Adds access for the specified connection string to the existing state of the DBDataPermission.</summary>
      <param name="connectionString">A permitted connection string.</param>
      <param name="restrictions">String that identifies connection string parameters that are allowed or disallowed.</param>
      <param name="behavior">One of the <see cref="T:System.Data.KeyRestrictionBehavior"></see> properties.</param>
    </member>
    <member name="P:System.Data.Common.DBDataPermission.AllowBlankPassword">
      <summary>Gets a value indicating whether a blank password is allowed.</summary>
      <returns>true if a blank password is allowed, otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Clear">
      <summary>Removes all permissions that were previous added using the <see cref="M:System.Data.Common.DBDataPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)"></see> method.</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission object.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.CreateInstance">
      <summary>Creates a new instance of the DBDataPermission class.</summary>
      <returns>A new DBDataPermission object.</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Intersect(System.Security.IPermission)">
      <summary>Returns a new permission object representing the intersection of the current permission object and the specified permission object.</summary>
      <param name="target">A permission object to intersect with the current permission object. It must be of the same type as the current permission object.</param>
      <returns>A new permission object that represents the intersection of the current permission object and the specified permission object. This new permission object is a null reference (Nothing in Visual Basic) if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not a null reference (Nothing in Visual Basic) and is not an instance of the same class as the current permission object.</exception>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Returns a value indicating whether the current permission object is a subset of the specified permission object.</summary>
      <param name="target">A permission object that is to be tested for the subset relationship. This object must be of the same type as the current permission object.</param>
      <returns>true if the current permission object is a subset of the specified permission object, otherwise false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is an object that is not of the same type as the current permission object.</exception>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the permission can be represented as unrestricted without any knowledge of the permission semantics.</summary>
      <returns>true if the permission can be represented as unrestricted.</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Union(System.Security.IPermission)">
      <summary>Returns a new permission object that is the union of the current and specified permission objects.</summary>
      <param name="target">A permission object to combine with the current permission object. It must be of the same type as the current permission object.</param>
      <returns>A new permission object that represents the union of the current permission object and the specified permission object.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> object is not the same type as the current permission object.</exception>
    </member>
    <member name="T:System.Data.Common.DBDataPermissionAttribute">
      <summary>Associates a security action with a custom security attribute.</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.DBDataPermissionAttribute"></see>.</summary>
      <param name="action">One of the security action values representing an action that can be performed by declarative security.</param>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.AllowBlankPassword">
      <summary>Gets or sets a value indicating whether a blank password is allowed.</summary>
      <returns>true if a blank password is allowed; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.ConnectionString">
      <summary>Gets or sets a permitted connection string.</summary>
      <returns>A permitted connection string.</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictionBehavior">
      <summary>Identifies whether the list of connection string parameters identified by the <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions"></see> property are the only connection string parameters allowed.</summary>
      <returns>One of the <see cref="System.Data.KeyRestrictionBehavior"></see> values.</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions">
      <summary>Gets or sets connection string parameters that are allowed or disallowed.</summary>
      <returns>One or more connection string parameters that are allowed or disallowed.</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.ShouldSerializeConnectionString">
      <summary>Identifies whether the attribute should serialize the connection string.</summary>
      <returns>true if the attribute should serialize the connection string; otherwise false.</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.ShouldSerializeKeyRestrictions">
      <summary>Identifies whether the attribute should serialize the set of key restrictions.</summary>
      <returns>true if the attribute should serialize the set of key restrictions; otherwise false.</returns>
    </member>
    <member name="T:System.Drawing.Printing.PrintingPermission">
      <summary>Controls access to printers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.#ctor(System.Drawing.Printing.PrintingPermissionLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintingPermission"></see> class with the level of printing access specified.</summary>
      <param name="printingLevel">One of the <see cref="T:System.Drawing.Printing.PrintingPermissionLevel"></see> values.</param>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintingPermission"></see> class with either fully restricted or unrestricted access, as specified.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid <see cref="System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission object.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="esd">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission object and a target permission object.</summary>
      <param name="target">A permission object of the same type as the current permission object.</param>
      <returns>A new permission object that represents the intersection of the current object and the specified target. This object is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is an object that is not of the same type as the current permission object.</exception>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission object is a subset of the specified permission.</summary>
      <param name="target">A permission object that is to be tested for the subset relationship. This object must be of the same type as the current permission object.</param>
      <returns>true if the current permission object is a subset of <paramref name="target">target</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is an object that is not of the same type as the current permission object.</exception>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.IsUnrestricted">
      <summary>Gets a value indicating whether the permission is unrestricted.</summary>
      <returns>true if permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="P:System.Drawing.Printing.PrintingPermission.Level">
      <summary>Gets or sets the code&amp;#39;s level of printing access.</summary>
      <returns>One of the <see cref="System.Drawing.Printing.PrintingPermissionLevel"></see> values.</returns>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that combines the permission object and the target permission object.</summary>
      <param name="target">A permission object of the same type as the current permission object.</param>
      <returns>A new permission object that represents the union of the current permission object and the specified permission object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is an object that is not of the same type as the current permission object.</exception>
    </member>
    <member name="T:System.Drawing.Printing.PrintingPermissionAttribute">
      <summary>Allows declarative printing permission checks.</summary>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintingPermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermissionAttribute.CreatePermission">
      <summary>Creates the permission based on the requested access levels, which are set through the <see cref="P:System.Drawing.Printing.PrintingPermissionAttribute.Level"></see> property on the attribute.</summary>
      <returns>An <see cref="System.Security.IPermission"></see> that represents the created permission.</returns>
    </member>
    <member name="P:System.Drawing.Printing.PrintingPermissionAttribute.Level">
      <summary>Gets or sets the type of printing allowed.</summary>
      <returns>One of the <see cref="System.Drawing.Printing.PrintingPermissionLevel"></see> values.</returns>
      <exception cref="T:System.ArgumentException">The value is not one of the <see cref="System.Drawing.Printing.PrintingPermissionLevel"></see> values.</exception>
    </member>
    <member name="T:System.Drawing.Printing.PrintingPermissionLevel">
      <summary>Specifies the type of printing that code is allowed to do.</summary>
    </member>
    <member name="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting">
      <summary>Provides full access to all printers.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting">
      <summary>Provides printing programmatically to the default printer, along with safe printing through semirestricted dialog box. <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting"></see> is a subset of <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Drawing.Printing.PrintingPermissionLevel.NoPrinting">
      <summary>Prevents access to printers. <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.NoPrinting"></see> is a subset of <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting">
      <summary>Provides printing only from a restricted dialog box. <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting"></see> is a subset of <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting"></see>.</summary>
      <returns></returns>
    </member>
  </members>
</doc>